@model KGERP.ViewModel.ComplainViewModel
@{
    /**/

    Layout = @ViewBag.Layout;
}

@using (Html.BeginForm("CreateOrEdit", "ComplainManagement", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{

    if (@ViewBag.Layout != null)
    {
        <div class="row">
            <span style="font-size:25px">Fill Customer Complain</span>
            <hr style="border-color:#32527B; padding:0px;margin-top: 10px;margin-bottom: 10px; border-width: 2px;" />
        </div>
    }
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Complain.CompanyId)
    @Html.HiddenFor(model => model.Complain.ComplainId)

    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.CustomerName, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Complain.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Complain.CustomerName, "", new { @class = "text-danger" })
    </div>

    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.MobileNo, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Complain.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
    </div>

    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.Address, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Complain.Address, new { htmlAttributes = new { @class = "form-control" } })
    </div>

    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.ComplainTypeId, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.Complain.ComplainTypeId, new SelectList(Model.ComplainType, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
        @Html.ValidationMessageFor(model => model.Complain.ComplainTypeId, "", new { @class = "text-danger" })
    </div>
    @*<div class="col-md-6">
        @Html.LabelFor(model => model.Complain.InvoiceDate, htmlAttributes: new { @class = "control-label" })
        <br />
        @Html.EditorFor(model => model.Complain.InvoiceDate, new { htmlAttributes = new { @class = "datepicker", @style = "width:240px", @placeholder = "dd/mm/yyyy", @autocomplete = "off" } })
    </div>*@
    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.InvoiceNo, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Complain.InvoiceNo, new { htmlAttributes = new { @class = "form-control" } })
    </div>


    <div class="col-md-6">
        @Html.LabelFor(model => model.Complain.ComplainDescription, htmlAttributes: new { @class = "control-label" })
        <br />
        @Html.TextAreaFor(model => model.Complain.ComplainDescription, new { htmlAttributes = new { @class = "form-control", @style = "margin: 0px; width: 289px; height: 81px;" } })
    </div>


    if (@ViewBag.Status == "N")
    {
        <div class="col-md-6">
            @Html.LabelFor(model => model.Complain.ActionDescription, htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Complain.ActionDescription, new { htmlAttributes = new { @class = "form-control" , @style = "margin: 0px; width: 289px; height: 81px;" } })
        </div>

        @*<div class="col-md-6">
            @Html.LabelFor(model => model.Complain.ActionAssignTo, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Complain.ActionAssignTo, new { htmlAttributes = new { @class = "form-control" } })

        </div>*@
    }


    if (Model.Complain.IsActionTaked == 1)
    {

        <div class="col-md-6">
            @Html.LabelFor(model => model.Complain.SolvingDescription, htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Complain.SolvingDescription, new { htmlAttributes = new { @class = "form-control" , @style = "height:75px" } })
        </div>
        <div class="col-md-6">

            @Html.Label("Is Solved", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Complain.IsComplainSolved, new { @style = "margin-left:50px" })

        </div>
    }

    if (Model.Complain.IsComplainSolved == true)
    {
        <div class="col-md-6">
            @Html.LabelFor(model => model.Complain.SolvingDescription, htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Complain.SolvingDescription, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="col-md-6">
            @Html.LabelFor(model => model.Complain.Remarks, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Complain.Remarks, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="col-md-6">
            @Html.Label("Is Closed", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Complain.IsComplainClosed, new { @style = "margin-left:50px" })

        </div>
    }


    <div class="form-group">
        <input type="submit" value="Submit" class="btn btn-primary pull-right" style="margin-right:72px;margin-top:5px" />
        <input type="reset" value="Cancel" class="btn btn-danger pull-right" style="margin-right:2px ;margin-top:5px" />
    </div>
}


<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.date.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


