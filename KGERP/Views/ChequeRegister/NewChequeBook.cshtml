@model KGERP.Service.ServiceModel.ChequeBookModel
@{
    ViewData["Title"] = "New Cheque Book";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        New Cheque Book
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">New Cheque Book</li>
    </ol>
</section>

@using (Html.BeginForm("NewChequeBook", "ChequeRegister", FormMethod.Post, new { id = "ChequeBookFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="box-danger">
                    <div class="box-body row">
                        @Html.HiddenFor(model => model.ID, new { Value = "", id = "chequeBookItemId" })
                        @Html.HiddenFor(model => model.ActionId, new { Value = "", id = "ActionId" })
                        @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Select Bank<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                @Html.DropDownListFor(model => model.BankId, new SelectList(Model.BankList.OrderBy(order => order.Text), "Value", "Text"), "==Select Bank==", new { id = "ddlBankId", @class = "form-control searchingDropdown", style = "width:100%" })
                                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Select Branch<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                @Html.DropDownListFor(model => model.BankBranchId, new SelectList(Model.bankBranchList.OrderBy(order => order.Text), "Value", "Text"), "==Select Branch==", new { id = "ddlBankBranchId", @class = "form-control searchingDropdown", style = "width:100%" })
                                @Html.ValidationMessageFor(model => model.BankBranchId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">A/C Holder Name<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.AccountName, new { id = "txtAccountName", @class = "form-control", @placeholder = "A/C name", required = "true" })
                                @Html.ValidationMessageFor(model => model.AccountName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">A/C Number<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.AccountNumber, new { id = "txtAccountNumber", @class = "form-control", @placeholder = "A/C number", required = "true" })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Cheque Book No<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.ChequeBookNo, new { id = "txtChequeBookNo", @class = "form-control", @placeholder = "Cheque Book No", required = "true", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.ChequeBookNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">First Page Number<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.BookFirstPageNumber, new { id = "txtFirstPageNumber", @class = "form-control", @placeholder = "First page number", required = "true" })
                                @Html.ValidationMessageFor(model => model.BookFirstPageNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Last Page Number<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.BookLastPageNumber, new { id = "txtLastPageNumber", @class = "form-control", @placeholder = "Last page number", required = "true" })
                                @Html.ValidationMessageFor(model => model.BookLastPageNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Total Page<sup class="text-danger" title="Required">*</sup></label>
                                @Html.TextBoxFor(model => model.TotalBookPage, new { id = "txtTotalBookPage", @class = "form-control", @placeholder = "Total book page", required = "true", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.TotalBookPage, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label">Remarks/Purpose</label>
                                @Html.TextAreaFor(model => model.Remarks, new { id = "txtRemarks", @class = "form-control", @placeholder = "Type remarks/purpose here" })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { id = "nameExist", @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6"></div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-6">
                                    <button type="button" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal" style="width:100% !important">Reset</button>
                                </div>
                                <div class="col-md-6">
                                    <button type="submit" id="btnSave" class="btn btn-primary btn-block" style="width:100% !important"><i class='fa fa-edit'></i> Add</button>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </section>
}

<section class="content">
    <div class="row">
        <div class="box">
            <div class="box-danger">
                <div class="box-header">
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                    <div class="table-responsive col-md-12">
                        <table id="KgErpDataTable" class="table table-dark table-striped table-responsive">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Bank Name</th>
                                    <th>Branch Name</th>
                                    <th>A/C Name</th>
                                    <th>A/C Number</th>
                                    <th>Cheque Book No</th>
                                    <th>Frist Page Number</th>
                                    <th>Last Page Number</th>
                                    <th>Total Page</th>
                                    <th>Used Page</th>
                                    <th>Remarks/Purpose</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            @{int sl = 0;}
                            <tbody>
                                @foreach (var item in Model.ChequeBoookList)
                                {
                                    <tr>
                                        <td>
                                            @(++sl)
                                        </td>
                                        <td>@item.BankName</td>
                                        <td>@item.BankBranchName</td>
                                        <td>@item.AccountName</td>
                                        <td>@item.AccountNumber</td>
                                        <td>@item.ChequeBookNo</td>
                                        <td>@item.BookFirstPageNumber</td>
                                        <td>[@item.BookLastPageNumber</td>
                                        <td>[@item.TotalBookPage</td>
                                        <td>[@item.UsedBookPage</td>
                                        <td>[@item.Remarks</td>
                                        <td>
                                            @if (item.UsedBookPage > 0)
                                            {
                                                <a id="@item.ChequeBookId" class="linkPointer disabled" title="Disabled"><i class="fa fa-pencil-square-o"></i></a>

                                                <a id="@item.ChequeBookId" class="linkPointer disabled" title="Disabled"
                                                   data-placement="top">
                                                    <i class="glyphicon glyphicon-trash" aria-hidden="true"></i>
                                                </a>

                                            }
                                            else
                                            {
                                                <a id="@item.ChequeBookId" onclick="makeEditble(@item.ChequeBookId);" class="linkPointer" title="Edit"><i class="fa fa-pencil-square-o"></i></a>

                                                <a id="@item.ChequeBookId" onclick="makeDeletable(@item.ChequeBookId);" class="linkPointer" data-toggle="modal" data-target="#ChequeRegisterDeleteModal" title="Delete"
                                                   data-placement="top">
                                                    <i class="glyphicon glyphicon-trash" aria-hidden="true"></i>
                                                </a>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@using (Html.BeginForm("NewChequeBook", "ChequeRegister", FormMethod.Post, new { id = "DeleteChequeBookFormId", @class = "formValidator", }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.HiddenFor(model => model.ChequeBookId, new { Value = "", id = "ChequeBookDelete" })
    @Html.HiddenFor(model => model.ActionId, new { Value = "", id = "ActionIdDelete" })
    @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFKDelete" })

    <div class="modal fade" id="ChequeRegisterDeleteModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" onclick="resetForm()" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Cheque Book Delete</b></h5>

                </div>
                <div class="modal-body">
                    <div style="text-align:center">
                        <h3>Are you sure to delete?</h3>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="btnClose" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" id="btnDelete" class="deleteId btn btn-primary"><i class="glyphicon glyphicon-check"></i> Confirm</button>
                </div>
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {
    <script type="text/javascript">

        var isEdited = false;
        var reuisitionId = 0;

        function makeEditble(chequeRegisterId) {
            if (chequeRegisterId !== null) {

                $.ajax({
                    type: "get",
                    url:"@Url.Action("ChequeRegisterById", "ChequeRegister")",
                    data: { chequeRegisterId: chequeRegisterId },
                    dataType: "json",
                    success: function (data) {
                        $('#chequeResgisterItemId').val(chequeRegisterId);
                        $('#ActionId').val(2);
                        $('#btnSave').html("<i class='fa fa-edit'></i>&nbsp;Update");
                        $('#ddlRegisterFor').val(data.RegisterFor).trigger('change');
                        $('#ddlProjectId').val(data.ProjectId).trigger('change');
                        $('#txtSupplierName').val("[" + data.SupplierCode + "] " + data.SupplierName);
                        $('#ddlCommon_SupplierFK').val(data.SupplierId);
                        $('#txtIssueDate').val($('#hiddenIssueDate_' + chequeRegisterId).val());
                        $('#txtChequeDate').val($('#hiddenChequeDate_' + chequeRegisterId).val());
                        $('#txtClearingDate').val($('#hiddenClearingDate_' + chequeRegisterId).val());
                        $('#txtChequeNo').val(data.ChequeNo);
                        $('#txtAmount').val(data.Amount);
                        $('#txtPayTo').val(data.PayTo);
                        $('#txtRemarks').val(data.Remarks);
                        isEdited = true;
                        reuisitionId = data.RequisitionId;
                    }
                });

                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }

        function makeDeletable(id) {
            if (id !== null) {
                $('#ChequeRegisterDelete').val(id);
                $('#ActionIdDelete').val(3);
                $("#CompanyFKDelete").val("@Model.CompanyFK");
            }
        }

        function resetForm() {
            $('#ChequeRegisterFormId')[0].reset();
            $('#DeleteChequeRegisterFormId')[0].reset();
            $('#btnSave').html("<i class='fa fa-edit'></i>&nbsp;Add");
        }

    </script>
}