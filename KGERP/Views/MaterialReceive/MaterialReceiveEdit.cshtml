@model KGERP.ViewModel.MaterialReceiveViewModel

@{
    ViewBag.Title = "Store Detail Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        padding: 2px 0px 2px 0px;
    }
</style>

@using (Html.BeginForm("MaterialReceiveEdit", "MaterialReceive", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.MaterialReceive.MaterialReceiveId)
    @Html.HiddenFor(x => x.MaterialReceive.CompanyId)
    <div class="row">
        <table class="table table-responsive">
            <tr style="background-color:#3c8dbc;color:#FFFFFF">
                <td colspan="10"><b>Material Receive Update</b></td>
            </tr>

            <tr>
                <td>
                    MRR No
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.ReceiveNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.HiddenFor(model => model.MaterialReceive.MaterialType, new { @Value = "R" })
                </td>
                <td>
                    MRR Date
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.ReceivedDate, new { htmlAttributes = new { @style = "width:240px", @class = "datepicker", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.ReceivedDate, "", new { @class = "text-danger" })
                </td>

                <td>
                    Warehouse
                </td>
                <td>
                    @Html.DropDownListFor(model => model.MaterialReceive.StockInfoId, new SelectList(Model.StockInfos, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.StockInfoId, "", new { @class = "text-danger" })
                </td>

            </tr>



            <tr>
                <td>
                    Supplier
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.SupplierName, new { htmlAttributes = new { @class = "form-control", @name = "supplier", @id = "supplier" } })
                    @Html.HiddenFor(x => x.MaterialReceive.VendorId, new { @id = "supplierId", @name = "supplierId" })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.SupplierName, "", new { @class = "text-danger" })

                </td>
                <td>
                    PO No
                </td>
                <td>
                    @Html.DropDownListFor(model => model.MaterialReceive.PurchaseOrderId, new SelectList(Model.PurchaseOrders, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlPurchaseOrderNo" })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.PurchaseOrderId, "", new { @class = "text-danger" })
                </td>
                <td>
                    PO Date
                </td>

                <td>
                    @Html.EditorFor(model => model.MaterialReceive.PurchaseOrderDate, new { htmlAttributes = new { @readonly = "readonly", @style = "width:240px", @class = "datepicker" } })
                    @*@Html.Editor("PODate", new { htmlAttributes = new { @readonly = "readonly", @style = "width:240px", @class = "datepicker" } })*@
                </td>
            </tr>



            <tr>
                <td>
                    Demand No
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.DemandNo, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @*@Html.TextBox("DemandNo", null, new { @readonly = "readonly", @class = "form-control" })*@
                </td>
                <td>
                    Demand Date

                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.DemandDate, new { htmlAttributes = new { @readonly = "readonly", @style = "width:240px", @class = "datepicker" } })
                    @*@Html.Editor("DemandDate", new { htmlAttributes = new { @readonly = "readonly", @style = "width:240px", @class = "datepicker" } })*@
                </td>




                <td>
                    Challan No

                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.ChallanNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.ChallanNo, "", new { @class = "text-danger" })
                </td>

            </tr>
            <tr>
                <td>
                    Challan Date
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.ChallanDate, new { htmlAttributes = new { @style = "width:240px", @class = "datepicker", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.ChallanNo, "", new { @class = "text-danger" })
                </td>
                <td>
                    Driver Name
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.DriverName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                </td>
                <td>
                    Truck No
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.TruckNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                </td>
            </tr>


            <tr>
                <td>
                    Unloading Date
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.UnloadingDate, new { htmlAttributes = new { @style = "width:240px", @class = "datepicker", @autocomplete = "off" } })
                </td>

                <td>
                    Truck Fare
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.TruckFare, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.MaterialReceive.TruckFare, "", new { @class = "text-danger" })
                </td>

                <td>
                    Labour Bill
                </td>
                <td>

                    <label class="radio-inline">
                        @Html.RadioButtonFor(model => model.MaterialReceive.AllowLabourBill, "true", new { @id = "rbtnYes" })<b>Allow</b>
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(model => model.MaterialReceive.AllowLabourBill, "false", new { @id = "rbtnNo" })<b>Not Allow</b>
                    </label>
                    @Html.EditorFor(model => model.MaterialReceive.LabourBill, new { htmlAttributes = new { @id = "txtLabourBill", @class = "form-control", @autocomplete = "off", @style = "width: 110px;display: inline;" } })
                </td>

            </tr>
            <tr>
                <td>
                    Received By
                </td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.ReceiverName, new { htmlAttributes = new { @class = "form-control", @name = "receiverName", @id = "receiverName" } })
                    @Html.HiddenFor(x => x.MaterialReceive.ReceivedBy, new { @id = "receivedBy", @name = "receivedBy" })
                </td>

                <td>Remarks</td>
                <td>
                    @Html.EditorFor(model => model.MaterialReceive.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                </td>
                <td></td>
                <td></td>
            </tr>
        </table>
        <table class="table">
            <tr style="background-color:#3c8dbc;color:#FFFFFF">
                <th>
                    Raw Material
                </th>
                <th>
                    Unit
                </th>
                @*<th>
                        PO Qty
                    </th>
                    <th>
                        Purchased Qty
                    </th>*@

                <th>
                    Purchase Qty
                </th>
                <th>
                    Purchase Rate
                </th>
                <th>
                    Amount
                </th>
                <th>
                    Deduct(%)
                </th>
                <th>
                    Bag Weight
                </th>
                <th>
                    Stock Qty
                </th>
                <th>
                    Stock Rate
                </th>
                <th>
                    Stock Amount
                </th>
                <th>
                    Bag Qty
                </th>

            </tr>
            @for (int i = 0; i < Model.MaterialReceive.MaterialReceiveDetails.Count(); i++)
            {
                <tr>
                    <td>
                        @Html.HiddenFor(model => model.MaterialReceive.MaterialReceiveDetails[i].MaterialReceiveDetailId)
                        @Html.HiddenFor(model => model.MaterialReceive.MaterialReceiveDetails[i].ProductId)
                        @Html.DisplayFor(model => model.MaterialReceive.MaterialReceiveDetails[i].ProductName)
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].BagWeight, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__BagWeight", @style = "display:none" } })
                    </td>
                    <td>
                        @Html.DisplayFor(model => model.MaterialReceive.MaterialReceiveDetails[i].UnitName)
                    </td>
                    @*<td>
                            @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].POQty, new { htmlAttributes = new { @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:100px;background-color:#EEEEEE;", @autocomplete = "off", } })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].PurchasedQty, new { htmlAttributes = new { @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;background-color:#EEEEEE;width:100px;", @autocomplete = "off", } })
                            @Html.ValidationMessageFor(model => model.MaterialReceive.MaterialReceiveDetails[i].PurchasedQty, "", new { @class = "text-danger" })
                        </td>*@
                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].ReceiveQty, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__ReceiveQty", @onkeyup = "calculateAmount(" + i + ")", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:100px;", @autocomplete = "off", } })
                        @Html.ValidationMessageFor(model => model.MaterialReceive.MaterialReceiveDetails[i].ReceiveQty, "", new { @class = "text-danger" })
                    </td>

                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].UnitPrice, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__UnitPrice", @onkeyup = "calculateAmount(" + i + ")", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:100px;", @autocomplete = "off", } })
                        @Html.ValidationMessageFor(model => model.MaterialReceive.MaterialReceiveDetails[i].UnitPrice, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].Amount, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__Amount", @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:100px;background-color:#EEEEEE;", @autocomplete = "off", } })
                    </td>

                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].Deduction, new { htmlAttributes = new { @type = "text", @onkeyup = "changeDeduction(" + i + ")", @id = "MaterialReceiveDetails_" + i + "__Deduction", @class = "DeductionRate", @style = "text-align:right;padding-right:2px;width:60px;", @autocomplete = "off", } })
                    </td>

                    <td>
                        @Html.DropDownListFor(model => model.MaterialReceive.MaterialReceiveDetails[i].BagId, new SelectList(Model.BagWeights, "Value", "Text", Model.MaterialReceive.MaterialReceiveDetails[i].BagId), new { @onchange = "changeBagDropDown(" + i + ")", @id = "MaterialReceiveDetails_" + i + "__BagId", @class = "ddlBag dropdownsize form-control", @style = "width: 100px;height: 26px;padding: 0px;" })
                        @Html.ValidationMessageFor(model => model.MaterialReceive.MaterialReceiveDetails[i].BagId, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].StockInQty, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__StockInQty", @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;width:100px;background-color:#EEEEEE;", @autocomplete = "off", } })
                    </td>

                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].StockInRate, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__StockInRate", @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;width:80px;background-color:#EEEEEE;", @autocomplete = "off", } })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].StockAmount, new { htmlAttributes = new { @id = "MaterialReceiveDetails_" + i + "__StockAmount", @readonly = "readonly", @class = "", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:100px;background-color:#EEEEEE;", @autocomplete = "off", } })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.MaterialReceive.MaterialReceiveDetails[i].BagQty, new { htmlAttributes = new { @onkeyup = "calculateStockQuantity(" + i + ")", @id = "MaterialReceiveDetails_" + i + "__BagQty", @class = "", @type = "text", @style = "text-align:right;padding-right:2px;border: 1px solid #999;width:60px;", @autocomplete = "off", } })
                        @Html.ValidationMessageFor(model => model.MaterialReceive.MaterialReceiveDetails[i].BagQty, "", new { @class = "text-danger" })
                    </td>
                </tr>

            }

            <tr>
                <td colspan="11">
                    <br />
                    <input type="submit" value="Update" data-confirm="Are you sure to submit?" class="btn btn-success pull-right" />
                    <a href="@Url.Action("Index", "MaterialReceive", new { companyId = Model.MaterialReceive.CompanyId})" class="btn btn-danger" style="float:right;margin-right:10px">
                        Close <i class="fa fa-close" aria-hidden="true"></i>
                    </a>
                    &nbsp;
                </td>
            </tr>

        </table>
    </div>

}


<script src="~/Scripts/ApplicationScripts/Inventory_Feed/Stock/StockEntry.js"></script>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">
        $(function () {
            $("#supplier").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Vendor/SupplierAutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#supplierId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {

                    loadOpenedPurchaseaOrderDropDown(ui.item.val);
                }



            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

        function loadOpenedPurchaseaOrderDropDown(vendorId) {
            $.ajax({
                type: "post",
                url: "/PurchaseOrder/GetOpenedPurchaseByVendor",
                data: { vendorId },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var PurchaseOrder = "<select>";
                    PurchaseOrder = PurchaseOrder + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        PurchaseOrder = PurchaseOrder + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    PurchaseOrder = PurchaseOrder + '</select>';
                    $('#ddlPurchaseOrderNo').html(PurchaseOrder);
                }
            });
        }

        $('#rbtnYes').click(function () {
            $("#txtLabourBill").show();
        })
        $('#rbtnNo').click(function () {
            $("#txtLabourBill").hide();
        })
        $(function () {
            if ($('#rbtnYes').is(':checked')) {
                $("#txtLabourBill").show();
            }
        })

        $(function () {
            $("#receiverName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#receivedBy").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

        $(function () {
            $("#ddlPurchaseOrderNo").change(function () {
                var purchaseOrderId = $("#ddlPurchaseOrderNo option:selected").val();
                $.ajax({
                    url: '/PurchaseOrder/GetPurchaseOrderInfo?purchaseOrderId=' + purchaseOrderId + "",
                    type: "GET",
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (data) {
                        var result = JSON.parse(data);

                        var purchaseDate = new Date(result.PurchaseDate);
                        var demandDate = new Date(result.Demand.DemandDate);

                        $('#PODate').val(getFormattedDate(purchaseDate))
                        $('#DemandNo').val(result.Demand.DemandNo)
                        $('#DemandDate').val(getFormattedDate(demandDate))
                        $('#Supplier').val(result.Vendor.Name)
                        $('#hfSupplierId').val(result.Vendor.VendorId)

                        $.ajax({
                            url: '/MaterialReceive/GetPurchaseOrderItems?purchaseOrderId=' + purchaseOrderId + '&companyId=' + result.CompanyId + "",
                            type: "GET",
                            async: true,
                            processData: false,
                            cache: false,
                            success: function (data) {
                                $('#purchaseOrderItems').html(data);
                            },
                            error: function (xhr) {
                                alert('error');
                            }
                        });
                    },
                    error: function (xhr) {
                        alert('error');
                    }
                });
            });
        });


        function getFormattedDate(date) {
            let year = date.getFullYear();
            let month = (1 + date.getMonth()).toString().padStart(2, '0');
            let day = date.getDate().toString().padStart(2, '0');

            return day + '/' + month + '/' + year;
        }


        /*Same as defined in _purchaseOrderItemList.cshtml*/
        function calculateAmount(id) {
            var receiveQty = $("#MaterialReceiveDetails_" + id + "__ReceiveQty").val();
            var unitPrice = $("#MaterialReceiveDetails_" + id + "__UnitPrice").val();
            $("#MaterialReceiveDetails_" + id + "__Amount").val(parseFloat(parseFloat(receiveQty) * parseFloat(unitPrice)).toFixed(2));

            //Setting StockInQty & StockInRate & StockAmount
            $("#MaterialReceiveDetails_" + id + "__StockInQty").val(parseFloat(receiveQty).toFixed(2));
            $("#MaterialReceiveDetails_" + id + "__StockInRate").val(parseFloat(unitPrice).toFixed(2));
            $("#MaterialReceiveDetails_" + id + "__StockAmount").val(parseFloat(parseFloat(unitPrice) * parseFloat(unitPrice)).toFixed(2));
        }

        function changeDeduction(id) {
            var $idDeduction = "#MaterialReceiveDetails_" + id + "__Deduction";
            var $idAmount = "#MaterialReceiveDetails_" + id + "__Amount";
            var $idReceiveQty = "#MaterialReceiveDetails_" + id + "__ReceiveQty";

            var $idStockInQty = "#MaterialReceiveDetails_" + id + "__StockInQty";
            var $idStockInRate = "#MaterialReceiveDetails_" + id + "__StockInRate";
            var $idStockAmount = "#MaterialReceiveDetails_" + id + "__StockAmount";


            var $deduction = $($idDeduction).val();
            if (isNaN($deduction)) {
                $deduction = 0;
            }
            var $amount = $($idAmount).val();
            var $receiveQty = $($idReceiveQty).val();


            var $stockInQty = $($idStockInQty).val();
            var $stockInRate = $($idStockInRate).val();
            var $stockAmount = $($idStockAmount).val();


            var $newStockInRate = parseFloat((parseFloat($amount) - parseFloat($amount) * (parseFloat($deduction) / 100)) / parseFloat($receiveQty)).toFixed(2);
            $($idStockInRate).val($newStockInRate);

            var $newStockAmount = parseFloat(parseFloat($stockInQty) * parseFloat($newStockInRate)).toFixed(2);
            $($idStockAmount).val($newStockAmount);


        }

        function changeBagDropDown(id) {
            var $idReceiveQty = "#MaterialReceiveDetails_" + id + "__ReceiveQty";
            var $idStockInQty = "#MaterialReceiveDetails_" + id + "__StockInQty";
            var $idStockInRate = "#MaterialReceiveDetails_" + id + "__StockInRate";
            var $idStockAmount = "#MaterialReceiveDetails_" + id + "__StockAmount";
            var $idBagWeight = "#MaterialReceiveDetails_" + id + "__BagWeight";

            var $idBagId = "#MaterialReceiveDetails_" + id + "__BagId";

            $.ajax({
                url: "/Bag/GetBagInfo?bagId=" + $($idBagId).val() + "",
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (result) {
                    var $bagWeight = parseFloat(result.BagValue / 1000);
                    $($idBagWeight).val($bagWeight);//Setting BagWeight per KG

                    var $idBagQty = "#MaterialReceiveDetails_" + id + "__BagQty";
                    var $bagQty = $($idBagQty).val();

                    if ($bagQty > 0) {
                        var $totalBagWeight = parseFloat($bagQty) * parseFloat($bagWeight);

                        var $receiveQty = $($idReceiveQty).val();
                        var $stockInQty = $($idStockInQty).val();
                        var $stockInRate = $($idStockInRate).val();

                        $stockInQty = parseFloat(parseFloat($receiveQty) - parseFloat($totalBagWeight)).toFixed(2);


                        $($idStockInQty).val($stockInQty);//Setting StockIn Qty

                        $stockAmount = parseFloat($stockInQty * $stockInRate).toFixed(2);//Calculating Stock Amount
                        $($idStockAmount).val($stockAmount);//Setting Stock Amount
                    }
                }
            });
        }

        function calculateStockQuantity(id) {
            var $idReceiveQty = "#MaterialReceiveDetails_" + id + "__ReceiveQty";
            var $idStockInQty = "#MaterialReceiveDetails_" + id + "__StockInQty";
            var $idStockInRate = "#MaterialReceiveDetails_" + id + "__StockInRate";
            var $idStockAmount = "#MaterialReceiveDetails_" + id + "__StockAmount";
            var $idBagId = "#MaterialReceiveDetails_" + id + "__BagId";
            var $idBagQty = "#MaterialReceiveDetails_" + id + "__BagQty";
            var $BagWeight = 0;

            $.ajax({
                url: '/Bag/GetBagWeightByBagId?bagId=' + $($idBagId + " option:selected").val() + "",
                type: "Post",
                async: true,
                processData: false,
                cache: false,
                success: function (response) {
                    $BagWeight = (response / 1000);
                    //console.log("$BagWeight=" + $BagWeight);
                    var $BagQty = $($idBagQty).val();
                    // console.log("$BagQty=" + $BagQty);
                    var $TotalBagWeight = parseFloat($BagQty) * parseFloat($BagWeight);
                    //  console.log("$TotalBagWeight=" + $TotalBagWeight);
                    if (isNaN($TotalBagWeight)) {
                        alert("Please select Bag Weight")
                        //$($idBagQty).val(0);
                        return false;
                    }
                    var $ReceiveQty = $($idReceiveQty).val();
                    var $StockInQty = $($idStockInQty).val();
                    var $StockInRate = $($idStockInRate).val();

                    $StockInQty = parseFloat(parseFloat($ReceiveQty) - parseFloat($TotalBagWeight)).toFixed(2);
                    // console.log("$StockInQty=" + $StockInQty);
                    $($idStockInQty).val($StockInQty);//Setting StockIn Qty

                    $StockAmount = parseFloat($StockInQty * $StockInRate).toFixed(2);//Calculating Stock Amount
                    $($idStockAmount).val($StockAmount);//Setting Stock Amount
                },
                error: function (xhr) {
                    //alert('error');
                }
            });

        }
    </script>
}
