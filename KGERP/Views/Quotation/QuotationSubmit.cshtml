@model KGERP.Service.ServiceModel.QuotationSubmitModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "Quotation Submit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }

    .ui-datepicker-trigger {
        width: 37px !important;
        height: 33px !important;
        margin-left: 5px !important;
    }

    .dateCustom {
        width: 82% !important;
        border-radius: 1px !important;
        border: 1px solid #d2d6de !important;
        height: 33px !important;
    }
</style>

<section class="content-header">
    <h1>
        <span>
            Quotation Submit
        </span>

    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">
            <span>
                Quotation Submit
            </span>
        </li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="box">
                <div class="box-danger">
                    <div class="box-body">
                        @using (Html.BeginForm("QuotationSubmit", "Quotation", FormMethod.Post, new { id = "quotationSubmitFormId", @class = "formValidator" }))
                        {
                            @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyId" })
                            <div class="row">

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">Submission Date<sup class="text-danger" title="Required">*</sup></label>
                                        <input name="SubmissionDate" asp-for="SubmissionDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker w-100 dateCustom" autocomplete="off" id="txtFromDate">
                                        @Html.ValidationMessageFor(model => model.SubmissionDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">Quotation Type<sup class="text-danger" title="Required">*</sup></label>
                                        @Html.DropDownListFor(model => model.QuotationForId, Model.QuotationTypeList as SelectList, "==Quotation Type==", new { id = "ddlQuotationType", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.QuotationForId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">Quotation For<sup class="text-danger" title="Required">*</sup></label>
                                        @Html.DropDownListFor(model => model.QuotationMasterId, Model.QuotationForList as SelectList, "==Quotation For==", new { id = "ddlQuotationFor", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.QuotationMasterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">Select Quotation<sup class="text-danger" title="Required">*</sup></label>
                                        @Html.DropDownListFor(model => model.QuotationMasterId, Model.QuotationList as SelectList, "==Select Quotation==", new { id = "ddlQuotationId", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.QuotationMasterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">Supplier/Party<sup class="text-danger" title="Required">*</sup></label>
                                        @Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Supplier Name", @id = "txtSupplierName", required = "required" } })
                                        @Html.HiddenFor(model => model.SupplierId, new { id = "ddlCommon_SupplierFK" })
                                        @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>&nbsp;</label>
                                        <button type="submit" id="btnSave" class="btn btn-primary btn-block">Search</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        $('.datepicker').datepicker({
            dateFormat: "dd/mm/yy",
            showOn: 'both',
            buttonText: "<i class='fa fa-calendar'></i>",
            changeMonth: true,
            changeYear: true,
            yearRange: "2001:+50"
        });

        function MakeDeletable(rowId) {
            $('#hiddenQuotationMasterId').val(rowId);
            $('#hiddenCompanyFK').val(@Model.CompanyFK);
            $('#deleteActionId').val(3);
        }

        $('#ddlQuotationType').on('change', function () {
            var typeId = $('#ddlQuotationType').val();
            var forId = $('#ddlQuotationFor').val();
            var quotationList = $('#ddlQuotationId');

            $.ajax({
                url: '/Quotation/GetQuotationListFilteredByTypeAndFor',
                type: 'GET',
                contentType: 'application/json',
                data: { typeId: typeId, forId: forId },
                success: function (response) {
                    console.log(response);
                    quotationList.empty();
                    quotationList.append("<option selected disabled>==Select Quotation==</option>");
                    $.each(response, function (index, item) {
                        quotationList.append($('<option>', {
                            value: item.QuotationMasterId,
                            text: item.QuotationNo
                        }));
                    });
                }
            });
        });

        $('#ddlQuotationFor').on('change', function () {
            var typeId = $('#ddlQuotationType').val();
            var forId = $('#ddlQuotationFor').val();
            var quotationList = $('#ddlQuotationId');

            $.ajax({
                url: '/Quotation/GetQuotationListFilteredByTypeAndFor',
                type: 'GET',
                contentType: 'application/json',
                data: { typeId: typeId, forId: forId },
                success: function (response) {
                    console.log(response);
                    quotationList.empty();
                    quotationList.append("<option selected disabled>==Select Quotation==</option>");
                    $.each(response, function (index, item) {
                        quotationList.append($('<option>', {
                            value: item.QuotationMasterId,
                            text: item.QuotationNo
                        }));
                    });
                }
            });
        });

        $("#txtSupplierName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url:"@Url.Action("GetAutoCompleteSupplierGet", "Procurement")",
                    data: { prefix: request.term, companyId: @Model.CompanyFK },
                    dataType: "json",
                    type: "get",
                    cache: true,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                       response($.map(data, function (item) {
                           return item;
                       }))
                    }
                });
            },

            select: function (e, i) {
                $("#ddlCommon_SupplierFK").val(i.item.val);

                },
            minLength: 1,
            cache: true

        }).focus(function () {
            $(this).autocomplete("search");
        });

    </script>
}