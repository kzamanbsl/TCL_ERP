@model KGERP.Service.ServiceModel.QuotationSubmitMasterModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "Quotation Submit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int sl = 0;
}

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }

    .ui-datepicker-trigger {
        width: 37px !important;
        height: 33px !important;
        margin-left: 5px !important;
    }

    .dateCustom {
        width: 82% !important;
        border-radius: 1px !important;
        border: 1px solid #d2d6de !important;
        height: 33px !important;
    }
</style>

<section class="content-header">
    <h1>
        <span>
            Quotation Submit
        </span>

    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">
            <span>
                Quotation Submit
            </span>
        </li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="box">
                <div class="box-danger">
                    <div class="box-body">
                        @if (Model.QuotationSubmitMasterId > 0)
                        {
                            <div class="row mb-5">
                                <div class="col-md-1"> </div>
                                <div class="col-md-10">
                                    <table class="table">
                                        <tr>
                                            <th>Submission Date</th>
                                            <th>:</th>
                                            <td>@Model.QuotationSubmitMaster.SubmissionDate.ToString("dd/MM/yyyy")</td>

                                            <th>Supplier Name</th>
                                            <th>:</th>
                                            <td>
                                                @Model.QuotationSubmitMaster.SupplierName
                                            </td>
                                        </tr>

                                        <tr>
                                            <th style="width:17% !important">Quotation No</th>
                                            <th>:</th>
                                            <td>@Model.QuotationSubmitMaster.QuotationNo</td>

                                            <th style="width:17% !important">Quotation For</th>
                                            <th>:</th>
                                            <td>
                                                @Model.QuotationSubmitMaster.QuotationForName
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="col-md-1"> </div>
                            </div>

                            if (true)
                            {
                                using (Html.BeginForm("QuotationSubmitDetail", "Quotation", FormMethod.Post, new { id = "QuotationSubmitDetailFormId", @class = "formValidator" }))
                                {
                                    if (Model.QuotationDetailModelList?.Any() ?? false)
                                    {
                                        <div class="table-wrapper">
                                            <table class="table table-responsive table-bordered table-striped table-fixed" id="itemTable">
                                                <thead>
                                                    <tr class="bg-gray">
                                                        <th style="text-align: center !important">SL</th>
                                                        <th style="text-align: center !important">Material Name</th>
                                                        <th style="text-align: center !important">Quality</th>
                                                        <th style="text-align: center !important">Quantity</th>
                                                        <th style="text-align: center !important">Unit Price</th>
                                                        <th style="text-align: center !important">Total</th>
                                                    </tr>
                                                </thead>

                                                <tbody>
                                                    @{
                                                        int i = 0;
                                                    }
                                                    @foreach (var item in Model.QuotationDetailModelList)
                                                    {
                                                        @Html.HiddenFor(model => model.QuotationSubmitMasterId)
                                                        <tr>
                                                            <td style="text-align: center !important">@(++sl)</td>
                                                            <td>
                                                                @item.MaterialName
                                                                @Html.HiddenFor(model => model.QuotationDetailModelList[i].MaterialId)
                                                            </td>
                                                            <td style="text-align: center !important">@Enum.GetName(typeof(EnumMaterialQuality), item.MaterialQualityId)</td>
                                                            <td>
                                                                @Html.TextBoxFor(model => model.QuotationDetailModelList[i].Quantity, new { value = "0", @class = "form-control demandValue", required = "true", @readonly = "true" })
                                                                @Html.ValidationMessageFor(model => model.QuotationDetailModelList[i].Quantity, "", new { @class = "text-danger" })
                                                            </td>
                                                            <td>
                                                                @Html.TextBoxFor(model => model.QuotationDetailModelList[i].UnitPrice, new { value = "0", @class = "form-control unitValue", required = "true" })
                                                                @Html.ValidationMessageFor(model => model.QuotationDetailModelList[i].UnitPrice, "", new { @class = "text-danger" })
                                                            </td>
                                                            <td style="text-align: right !important" class="totalValue"></td>
                                                        </tr>

                                                        i++;
                                                    }
                                                </tbody>
                                                <tfoot>
                                                    <tr>
                                                        <td colspan="5" style="text-align: right !important">
                                                            <b>Total Amount</b>
                                                        </td>
                                                        <td id="totalFooter" colspan="2" style="text-align: right !important">
                                                            <span id="showTotalValue"></span>
                                                        </td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                        if (Model.QuotationSubmitMaster.QuotationSubmitStatusId == (int)EnumQuotationSubmitStatus.Pending)
                                        {
                                            <div class="box-footer">
                                                <div class="row">
                                                    <div class="col-md-3"></div>
                                                    <div class="col-md-3"></div>
                                                    <div class="col-md-3"></div>
                                                    <div class="col-md-3">
                                                        <a class="btn btn-primary btn-block linkPointer" data-toggle="modal" data-target="#ApprovedModalId" data-placement="top" id="actionButton">Proceed to Submit Quotation</a>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- Approve Modal-->
                                            <div class="modal fade" id="ApprovedModalId" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <button type="button" onclick="resetForm()" class="close pull-right" data-dismiss="modal" aria-label="Close">
                                                                &times;
                                                            </button>
                                                            <h4 class="modal-title text-primary"><b>Submit Quotation</b></h4>
                                                        </div>
                                                        <div class="modal-body">
                                                            Do you want to submit the Quotation?
                                                        </div>
                                                        <div class="modal-footer">
                                                            <button type="button" id="btnClose" onclick="resetForm()" class="btn btn-outline-warning" data-dismiss="modal">Go Back</button>
                                                            <button type="submit" id="btnDelete" class="deleteId btn btn-success">Submit</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            using (Html.BeginForm("QuotationSubmitMaster", "Quotation", FormMethod.Post, new { id = "quotationSubmitFormId", @class = "formValidator" }))
                            {
                                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyId" })
                                <div class="row">

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label">Submission Date<sup class="text-danger" title="Required">*</sup></label>
                                            <input name="SubmissionDate" asp-for="SubmissionDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker w-100 dateCustom" autocomplete="off" id="txtFromDate">
                                            @Html.ValidationMessageFor(model => model.SubmissionDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label">Quotation Type<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.QuotationTypeId, Model.QuotationTypeList as SelectList, "==Quotation Type==", new { id = "ddlQuotationType", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.QuotationTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label">Quotation For<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.QuotationForId, Model.QuotationForList as SelectList, "==Quotation For==", new { id = "ddlQuotationFor", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.QuotationForId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label">Select Quotation<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.QuotationMasterId, Model.QuotationList as SelectList, "==Select Quotation==", new { id = "ddlQuotationId", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.QuotationMasterId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label">Supplier/Party<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Supplier Name", @id = "txtSupplierName", required = "required" } })
                                            @Html.HiddenFor(model => model.SupplierId, new { id = "ddlCommon_SupplierFK" })
                                            @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label>&nbsp;</label>
                                            <button type="submit" id="btnSave" class="btn btn-primary btn-block">Search</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        $('.datepicker').datepicker({
            dateFormat: "dd/mm/yy",
            showOn: 'both',
            buttonText: "<i class='fa fa-calendar'></i>",
            changeMonth: true,
            changeYear: true,
            yearRange: "2001:+50"
        });

        function MakeDeletable(rowId) {
            $('#hiddenQuotationMasterId').val(rowId);
            $('#hiddenCompanyFK').val(@Model.CompanyFK);
            $('#deleteActionId').val(3);
        }

        $('#ddlQuotationType').on('change', function () {
            var typeId = $('#ddlQuotationType').val();
            var forId = $('#ddlQuotationFor').val();
            var quotationList = $('#ddlQuotationId');

            $.ajax({
                url: '/Quotation/GetQuotationListFilteredByTypeAndFor',
                type: 'GET',
                contentType: 'application/json',
                data: { typeId: typeId, forId: forId },
                success: function (response) {
                    console.log(response);
                    quotationList.empty();
                    quotationList.append("<option selected disabled>==Select Quotation==</option>");
                    $.each(response, function (index, item) {
                        quotationList.append($('<option>', {
                            value: item.QuotationMasterId,
                            text: item.QuotationNo
                        }));
                    });
                }
            });
        });

        $('#ddlQuotationFor').on('change', function () {
            var typeId = $('#ddlQuotationType').val();
            var forId = $('#ddlQuotationFor').val();
            var quotationList = $('#ddlQuotationId');

            $.ajax({
                url: '/Quotation/GetQuotationListFilteredByTypeAndFor',
                type: 'GET',
                contentType: 'application/json',
                data: { typeId: typeId, forId: forId },
                success: function (response) {
                    console.log(response);
                    quotationList.empty();
                    quotationList.append("<option selected disabled>==Select Quotation==</option>");
                    $.each(response, function (index, item) {
                        quotationList.append($('<option>', {
                            value: item.QuotationMasterId,
                            text: item.QuotationNo
                        }));
                    });
                }
            });
        });

        $("#txtSupplierName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url:"@Url.Action("GetAutoCompleteSupplierGet", "Procurement")",
                    data: { prefix: request.term, companyId: 21 },
                    dataType: "json",
                    type: "get",
                    cache: true,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                       response($.map(data, function (item) {
                           return item;
                       }))
                    }
                });
            },

            select: function (e, i) {
                $("#ddlCommon_SupplierFK").val(i.item.val);

                },
            minLength: 1,
            cache: true

        }).focus(function () {
            $(this).autocomplete("search");
        });


        $(document).ready(function () {
            $(".demandValue, .unitValue").on('input', function (event) {
                LineCalculator();
            });

            function LineCalculator() {
                $("#itemTable tbody tr").each(function () {
                    var inputDemadValue = $(this).find(".demandValue").val();
                    var inputUnitValue = $(this).find(".unitValue").val();
                    var lineTotal = 0;

                    if (!isNaN(inputDemadValue) && !isNaN(inputUnitValue)) {
                        lineTotal = parseFloat(inputDemadValue) * parseFloat(inputUnitValue);
                    }

                    $(this).find(".totalValue").text(lineTotal.toFixed(2));
                });

                TotalCalculator();
            }

            function TotalCalculator() {
                var total = 0;

                $("#itemTable tbody tr").each(function () {
                    var inputTotalValue = $(this).find(".totalValue");
                    var totalValue = parseFloat(inputTotalValue.text());

                    if (!isNaN(totalValue)) {
                        total += totalValue;
                    }
                });

                $("#showTotalValue").text(total.toFixed(2));
            }

            LineCalculator();
            TotalCalculator();

            $('#actionButton').on('click', function () {
                $(this).hide();
            });

        });
    </script>
}