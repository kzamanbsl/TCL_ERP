@model KGERP.Service.ServiceModel.QuotationMasterModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "New Quotation";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
}

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }

    .ui-datepicker-trigger {
        width: 35px !important;
        height: 33px !important;
        margin-left: 20px !important;
    }

    .dateCustom {
        width: 82% !important;
        border-radius: 1px !important;
        border: 1px solid #d2d6de !important;
        height: 33px !important;
    }
</style>

<section class="content-header">
    @if (Model.QuotationMasterId > 0)
    {
        if (Model.StatusId == (int)EnumQuotationStatus.Draft)
        {


            <h1>Add Material</h1>
        }
        else
        {
            <h1>Detail View</h1>
        }
    }
    else
    {
        <h1>New Quotation</h1>
    }
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">New Quotation</li>
    </ol>
</section>
@using (Html.BeginForm("QuotationMasterSlave", "Quotation", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.QuotationMasterId, new { id = "quotationMasterIdHidden" })
                @Html.HiddenFor(model => model.DetailModel.QuotationDetailId, new { id = "quotationDetailIdHidden" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                <div class="box-danger">
                    <div class="box-body">
                        @if (Model.QuotationMasterId > 0)
                        {
                            <div class="row mb-5">
                                <div class="col-md-1"> </div>
                                <div class="col-md-10">
                                    <table class="table">
                                        <tr>
                                            <th style="width:17% !important">Quotation Date</th>
                                            <th>:</th>
                                            <td>@Model.QuotationDate.ToString("dd/MM/yyyy")</td>

                                            <th style="width:17% !important">Quotation Status</th>
                                            <th>:</th>
                                            <td>
                                                @Enum.GetName(typeof(EnumQuotationStatus), Model.StatusId)
                                                <input type="hidden" value="@Model.StatusId" id="quotationStatusHidden" />
                                            </td>
                                        </tr>

                                        <tr>
                                            <th style="width:17% !important">Quotation No</th>
                                            <th>:</th>
                                            <td>@Model.QuotationNo</td>

                                            <th style="width:17% !important">Quotation For</th>
                                            <th>:</th>
                                            <td>
                                                @Model.QuotationForName
                                                <input type="hidden" value="@Model.QuotationForId" id="quotationForHidden" />
                                            </td>
                                        </tr>

                                        <tr>
                                            <th style="width:17% !important">Quotation Type</th>
                                            <th>:</th>
                                            <td>
                                                @Enum.GetName(typeof(EnumQuotationType), Model.QuotationTypeId)
                                                <input type="hidden" value="@Model.QuotationTypeId" id="quotationTypeHidden" />
                                            </td>

                                            <th style="width:17% !important">Requisition No</th>
                                            <th>:</th>
                                            <td>
                                                @Model.RequisitionNo
                                                <input type="hidden" value="@Model.RequisitionId" id="requisitionIdHidden" />
                                            </td>
                                        </tr>

                                        @if (Model.StartDate != DateTime.MinValue)
                                        {
                                            <tr>
                                                <th>
                                                    Open Date
                                                </th>
                                                <th>:</th>
                                                <td>@Model.StartDate.Value.ToString("dd/MM/yyyy")</td>

                                                <th>Close Date</th>
                                                <th>:</th>
                                                <td>@(Model.EndDate != DateTime.MinValue ? Model.EndDate.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                                            </tr>
                                        }

                                        <tr>
                                            <th>
                                                Description
                                            </th>
                                            <th>:</th>
                                            <td>@Model.Description</td>

                                            <th>Created By</th>
                                            <th>:</th>
                                            <td>@Model.EmployeeName</td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="col-md-1"> </div>
                            </div>
                        }

                        <div class="box-body">

                            @if (Model.QuotationMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-4" id="inputDate">
                                        <label class="form-label">Quotation Date<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                        <div class="form-group">
                                            <input name="QuotationDate" asp-for="QuotationDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker w-100 dateCustom" autocomplete="off" id="txtQuotationDate">
                                            @Html.ValidationMessageFor(model => model.QuotationDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputQuotationFor">
                                        <div class="form-group">
                                            <label class="form-label">Qutation Type<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.QuotationTypeId, Model.QuotationTypeList as SelectList, "==Select Quotation Type==", new { id = "ddlQuotationType", @class = "form-control searchingDropdown", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.QuotationTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputQuotationFor">
                                        <div class="form-group">
                                            <label class="form-label">Qutation For<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.QuotationForId, Model.QuotationForList as SelectList, "==Select Quotation For==", new { id = "ddlQuotationFor", @class = "form-control searchingDropdown", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.QuotationForId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4 hidden" id="inputRequisition">
                                        <div class="form-group">
                                            <label class="form-label">Select Requisition<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.RequisitionId, Model.RequisitionList as SelectList, "==Select Requisition==", new { id = "ddlRequisitionId", @class = "form-control searchingDropdown", style = "width:100%", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.RequisitionId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label class="form-label">Description</label>
                                            @Html.TextAreaFor(model => model.Description, new { id = "txtDescription", placeholder = "Type description here", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            }

                            @if (Model.StatusId == (int)EnumQuotationStatus.Draft)
                            {
                                <div class="row">
                                    <div class="col-md-4 d-block" id="inputMaterialType">
                                        <div class="form-group">
                                            <label class="form-label">Material Type<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.MaterialTypeId, Model.DetailModel.MaterialTypeList as SelectList, "==Select Material Type==", new { id = "ddlMaterialTypeId", style = "width:100%", @class = "form-control searchingDropdown", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.MaterialTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4 d-block" id="inputMaterialSubtype">
                                        <div class="form-group">
                                            <label class="form-label">Material Subtype<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.MaterialSubtypeId, Model.DetailModel.MaterialSubtypeList as SelectList, "==Select Material Subtype==", new { id = "ddlMaterialSubtypeId", style = "width:100%", @class = "form-control searchingDropdown", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.MaterialSubtypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputMaterial">
                                        <div class="form-group">
                                            <label class="form-label">Select Material<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.MaterialId, Model.DetailModel.MaterialList as SelectList, "==Select Material==", new { id = "ddlMaterialId", onchange = "GetUnitName()", style = "width:100%", @class = "form-control searchingDropdown", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.MaterialId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputUnitName">
                                        <div class="form-group">
                                            <label class="form-label">Unit Name<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.TextBoxFor(model => model.DetailModel.UnitName, new { id = "txtUnitName", style = "width:100%", @class = "form-control", placeholder = "Unit name", @required = "true", ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.UnitName, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.DetailModel.UnitId, new { id = "txtUnitId" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputQuality">
                                        <div class="form-group">
                                            <label class="form-label">Material Quality<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.MaterialQualityId, Model.DetailModel.MaterialQualityList as SelectList, "==Select Quality==", new { id = "ddlMaterialQualityId", @class = "form-control searchingDropdown", style = "width: 100%", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.MaterialQualityId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" id="inputQuantity">
                                        <div class="form-group">
                                            <label class="form-label">Quantity<sup class="text-danger" title="Required"><b>*</b></sup></label>
                                            @Html.TextBoxFor(model => model.DetailModel.Quantity, new { id = "txtQuantity", type = "number", step = "0.01", @class = "form-control", placeholder = "Quantity", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.Quantity, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label class="form-label">Remarks/Particular</label>
                                            @Html.TextAreaFor(model => model.DetailModel.Remarks, new { id = "txtRemarks", placeholder = "Type remarks/particular here", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.DetailModel.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            }
                        </div>

                        @if (Model.StatusId == (int)EnumQuotationStatus.Draft)
                        {
                            <div class="box-footer">
                                <div class="row">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-4"></div>
                                    <div class="col-lg-4 col-md-4">
                                        <input type="submit" id="soCreateBtn" value="Add Material" class="btn btn-primary btn-block" />
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.QuotationMasterId > 0)
                        {
                            @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                            <div class="table-responsive col-md-12  text-wrap">
                                <table id="KgErpDataTable" class="table table-striped table-responsive">
                                    <thead>
                                        <tr>
                                            <th>SL</th>
                                            @if (Model.QuotationTypeId == (int)EnumQuotationType.General)
                                            {
                                                <th>Material Type</th>
                                                <th>Material Subtype</th>
                                            }
                                            else
                                            {
                                                <th>Requisition No</th>
                                            }
                                            <th>Material Name</th>
                                            <th>Quality</th>
                                            <th>Unit</th>
                                            <th>Quantity</th>
                                            <th>Rmarks</th>
                                            @if (Model.StatusId == (int)EnumQuotationStatus.Draft)
                                            {
                                                <th style="padding:5px;text-align:center;">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var item in Model.DetailList)
                                        {
                                            <tr>
                                                <td>@(++sl)</td>
                                                @if (Model.QuotationTypeId == (int)EnumQuotationType.General)
                                                {
                                                    <td>@item.MaterialTypeName</td>
                                                    <td>@item.MaterialSubtypeName</td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <a href="~/BillRequisition/BillRequisitionMasterCommonSlave?companyId=@Model.CompanyFK&billRequisitionMasterId=@Model.RequisitionId">@Model.RequisitionNo</a>
                                                    </td>
                                                }
                                                <td>@item.MaterialName</td>
                                                <td>
                                                    @Enum.GetName(typeof(EnumMaterialQuality), item.MaterialQualityId)
                                                </td>
                                                <td>@item.UnitName</td>
                                                <td>@item.Quantity</td>
                                                <td>@item.Remarks</td>
                                                @if (Model.StatusId == (int)EnumQuotationStatus.Draft)
                                                {
                                                    <td style="padding:5px;text-align:center;">
                                                        <a id="@item.QuotationDetailId" onclick="MakeEditable(@item.QuotationDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                        <a id="@item.QuotationDetailId" onclick="MakeDeletable(@item.QuotationDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteDamageSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                    </div>

                    @if (Model.QuotationMasterId > 0 && Model.StatusId == (int)EnumQuotationStatus.Draft)
                    {
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.QuotationMasterId" onclick="makeSubmitble(@Model.QuotationMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitDamageModal" data-placement="top">
                                        @if (Model.StatusId == (int)EnumQuotationStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitQuotationMasterSlave", "Quotation", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDamageModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Quotation Submit</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.QuotationMasterId, new { id = "hidSubmitBRMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to proceed ?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-check">Make Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteQuotationDetail", "Quotation", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDamageSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Quotation Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.DetailModel.QuotationDetailId, new { id = "hiddenQuotationDetailId" })
                    @Html.HiddenFor(model => model.QuotationMasterId, new { id = "hiddenQuotationMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Quotation Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetDamageDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        $(document).ready(function () {
            "use strict"

            $("#ddlQuotationType").on('change', function (event) {
                if ($(this).val() == @((int)EnumQuotationType.Requisition)) {
                    $("#inputRequisition").removeClass("hidden").addClass("d-block");
                    $("#inputMaterialType").removeClass("d-block").addClass("hidden");
                    $("#inputMaterialSubtype").removeClass("d-block").addClass("hidden");

                    $("#inputMaterial").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputUnitName").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputQuality").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputQuantity").removeClass("col-md-4").addClass("col-md-3");
                } else {
                    $("#inputRequisition").removeClass("d-block").addClass("hidden");
                    $("#inputMaterialType").removeClass("hidden").addClass("d-block");
                    $("#inputMaterialSubtype").removeClass("hidden").addClass("d-block");

                    $("#inputMaterial").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnitName").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputQuality").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputQuantity").removeClass("col-md-3").addClass("col-md-4");
                }
            });
        });

        // make deletable form
        function MakeDeletable(rowId) {
            $('#hiddenQuotationDetailId').val(rowId);
            $('#deleteCompanyFK').val(@Model.CompanyFK);
            $('#deleteActionId').val(3);
        }

        // reset form
        function resetDamageDeleteSlaveForm() {

            $('#BRMasterSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        var materialSubtypeId = 0;
        var materialId = 0;
        function MakeEditable(rowId) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetQuotationDetailById", "Quotation")",
                datatype: "Json",
                data: { id: rowId },
                success: function (data) {
                    $('#soCreateBtn').val("Update");
                    $("#quotationDetailIdHidden").val(rowId);
                    $("#quotationMasterIdHidden").val(data.QuotationDetailId);
                    $('#ActionId').val(2);
                    $("#CompanyFK").val(data.CompanyFK);
                    $("#ddlMaterialQualityId").val(data.MaterialQualityId).trigger('change');
                    $("#txtQuantity").val(data.Quantity);
                    $("#txtUnitPrice").val(data.UnitPrice);
                    $("#txtTotalAmount").val(data.TotalAmount);
                    $("#txtRemarks").val(data.Remarks == null ? "" : data.Remarks.trim());

                    if (@Model.QuotationTypeId == @((int)EnumQuotationType.General)) {
                        $("#ddlMaterialTypeId").val(data.MaterialTypeId).trigger('change');
                        materialSubtypeId = data.MaterialSubtypeId;
                        materialId = data.MaterialId;
                    } else {
                        $("#ddlMaterialId").val(data.MaterialId).trigger('change');
                    }

                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            });
        }

        $('#ddlMaterialTypeId').on('change', function (event) {
            var getMaterialTypeId = $(this).val();
            var showMaterialSubtypeList = $("#ddlMaterialSubtypeId");
            $.ajax({
                type: "GET",
                url: "/Configuration/GetSubCategoryByCategoryId",
                dataType: "json",
                data: { id: getMaterialTypeId },
                success: function (data) {
                    showMaterialSubtypeList.empty();
                    showMaterialSubtypeList.append("<option selected disabled>==Select Material Subtype==</option>");

                    $.each(data, function (index, item) {
                        showMaterialSubtypeList.append($('<option>', {
                            value: item.ProductSubCategoryId,
                            text: item.Name
                        }));
                    });
                    if (materialSubtypeId > 0) {
                        $("#ddlMaterialSubtypeId").val(materialSubtypeId).trigger('change');
                    }
                }
            });
        });

        $('#ddlMaterialSubtypeId').on('change', function (event) {
            var getMaterialSubtypeId = $(this).val();
            var showMaterialList = $("#ddlMaterialId");
            $.ajax({
                type: "GET",
                url: "/Configuration/GetProductBySubcategoryId",
                dataType: "json",
                data: { id: getMaterialSubtypeId },
                success: function (data) {
                    showMaterialList.empty();
                    showMaterialList.append("<option selected disabled>==Select Material==</option>");

                    $.each(data, function (index, item) {
                        showMaterialList.append($('<option>', {
                            value: item.ProductId,
                            text: item.ProductName
                        }));
                    });
                    if (materialId > 0) {
                        $("#ddlMaterialId").val(materialId).trigger('change');
                    }
                }
            });
        });

        $('#ddlRequisitionId').on('change', function (event) {
            var getRequisitionId = $(this).val();
            var showMaterialList = $("#ddlMaterialId");
            $.ajax({
                type: "GET",
                url: "/Procurement/GetMaterialByRequisitionId",
                dataType: "json",
                data: { companyId: @Model.CompanyFK, requisitionId: getRequisitionId },
                success: function (data) {
                    showMaterialList.empty();
                    showMaterialList.append("<option selected disabled>===Select Material===</option>");

                    $.each(data, function (index, item) {
                        showMaterialList.append($('<option>', {
                            value: item.ProductId,
                            text: item.ProductName
                        }));
                    });
                }
            });
        });

        function GetUnitName() {
            var getMaterialId = $("#ddlMaterialId option:selected");
            var showName = $("#txtUnitName");
            var showValue = $("#txtUnitId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/GetUnitNameWithId",
                dataType: "json",
                data: { id: getMaterialId.val() },
                success: function (data) {
                    if (data) {
                        showName.val(data.unitName);
                        showValue.val(data.unitId);
                    }
                }
            });
        }

        if (@(Model.QuotationTypeId) == @((int)EnumQuotationType.Requisition)) {

            var getRequisitionId = $('#requisitionIdHidden').val();
            var showMaterialList = $("#ddlMaterialId");
            $.ajax({
                type: "GET",
                url: "/Procurement/GetMaterialByRequisitionId",
                dataType: "json",
                data: { companyId: 21, requisitionId: getRequisitionId },
                success: function (data) {
                    showMaterialList.empty();
                    showMaterialList.append("<option selected disabled>===Select Material===</option>");

                    $.each(data, function (index, item) {
                        showMaterialList.append($('<option>', {
                            value: item.ProductId,
                            text: item.ProductName
                        }));
                    });
                }
            });

            $("#inputRequisition").removeClass("hidden").addClass("d-block");
            $("#inputMaterialType").removeClass("d-block").addClass("hidden");
            $("#inputMaterialSubtype").removeClass("d-block").addClass("hidden");

            $("#inputMaterial").removeClass("col-md-4").addClass("col-md-3");
            $("#inputUnitName").removeClass("col-md-4").addClass("col-md-3");
            $("#inputQuality").removeClass("col-md-4").addClass("col-md-3");
            $("#inputQuantity").removeClass("col-md-4").addClass("col-md-3");
        }
    </script>
}