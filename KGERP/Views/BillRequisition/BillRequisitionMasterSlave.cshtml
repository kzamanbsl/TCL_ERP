@model KGERP.Service.ServiceModel.BillRequisitionMasterModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "Requisition Entry";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.BillRequisitionMasterId > 0)
        {
            <span>
                Requisition Entry
            </span>
        }
        else
        {
            <span>
                Requisition Entry
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Requisition Entry</li>
    </ol>
</section>
@using (Html.BeginForm("BillRequisitionMasterSlave", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidBRMasterId" })
                @Html.HiddenFor(model => model.DetailModel.BillRequisitionDetailId, new { id = "hiddenBillRequisitionDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                <div class="box-danger">
                    <div class="box-body">
                        @if (Model.BillRequisitionMasterId > 0)
                        {
                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:18%">Requisition Date</th>
                                        <th style="width:2%">:</th>
                                        @*<td style="width:30%">@Model.CreatedDate.ToShortDateString()</td>*@
                                        <td style="width:30%">@Model.BRDate.ToShortDateString()</td>

                                        <th>Status</th>
                                        <th>:</th>
                                        <td>Draft</td>
                                    </tr>
                                    <tr>
                                        <th>Requisition No</th>
                                        <th>:</th>
                                        <td>@Model.BillRequisitionNo</td>
                                        <th>Requisition Type </th>
                                        <th>:</th>
                                        <td>@Model.BRTypeName</td>
                                    </tr>
                                    <tr>
                                        <th>Project Type</th>
                                        <th>:</th>
                                        <td>@Model.ProjectTypeName</td>
                                        <th>Project </th>
                                        <th>:</th>
                                        <td>@Model.CostCenterName</td>
                                    </tr>

                                    <tr>
                                        <th>Remarks</th>
                                        <th>:</th>
                                        <td>@Model.Description</td>

                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        }

                    <div class="box-body">

                        @if (Model.BillRequisitionMasterId == 0)
                        {
                            <div class="row">

                                <div class="col-md-3">
                                    <label for="message-text" class="col-form-label">Requisition Date :</label>
                                    <div class="form-group">
                                        <input name="BRDate" asp-for="BRDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker " placeholder="Operation Date" autocomplete="off" id="txtOperationrDate">
                                        @Html.ValidationMessageFor(model => model.BRDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Requisition Type :</label>
                                        @Html.DropDownListFor(model => model.BillRequisitionTypeId, Model.RequisitionTypeList as SelectList, "==Select Requisition Type==", new { id = "ddlBRTypeId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.BillRequisitionTypeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Project Type :</label>
                                        @Html.DropDownListFor(model => model.ProjectTypeId, Model.ProjectTypeList as SelectList, "==Select Project Type==", new { id = "projectTypeId", onchange = "showInput()", @class = "form-control searchingDropdown", style = "width:100%" })
                                        @Html.ValidationMessageFor(model => model.ProjectTypeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Select Project :</label>
                                        @Html.DropDownListFor(model => model.CostCenterId, Model.ProjectList as SelectList, "==Select Project==", new { id = "ddlCostCenterId", @class = "form-control searchingDropdown", style = "width:100%" })
                                        @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Work Detail / BOQ Item :</label>
                                        @Html.DropDownListFor(model => model.BOQItemId, Model.BOQItemList as SelectList, "==Select BOQ Item==", new { id = "ddlBOQItemId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.BOQItemId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-9">
                                    <div class="form-group">
                                        <label for="txtDescription" class="col-form-label">Work Description :</label>
                                        @Html.TextAreaFor(model => model.Description, new { id = "txtitemDescription", placeholder = "Type work description here...", @class = "form-control", rows = 1 })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        }

                        @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                        {
                            <!--- dependable input -->
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group hidden" id="inputWard">
                                        <label for="txtDescription" class="col-form-label">Ward :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.Ward, new { id = "txtWrad", placeholder = "Type remarks here...", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.DetailModel.Ward, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group hidden" id="inputDPP">
                                        <label for="txtDescription" class="col-form-label">DPP :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.DPP, new { id = "txtDPP", placeholder = "Type remarks here...", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.DetailModel.DPP, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group hidden" id="inputChainage">
                                        <label for="txtDescription" class="col-form-label">Chainage :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.Chainage, new { id = "txtChainage", placeholder = "Type remarks here...", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.DetailModel.Chainage, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group hidden" id="inputFloor">
                                        <label for="txtDescription" class="col-form-label">Floor :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.Floor, new { id = "txtFloor", placeholder = "Type remarks here...", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.DetailModel.Floor, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <!--- dependable input -->

                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Requisition Item/ Material :</label>
                                        @Html.DropDownListFor(model => model.DetailModel.BillRequisitionItemId, Model.RequisitionItemList as SelectList, "==Select Requisition Material==", new { id = "ddlRequisitionItemId", @class = "form-control searchingDropdown", style = "width:100%", required = "required", onchange = "getUnitName()" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.BillRequisitionItemId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Material Unit :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.UnitId, new { id = "txtUnitId", @class = "form-control", placeholder = "Material Unit" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.UnitId, "", new { @class = "text-danger" })
                                        <span id="showUnitName"></span>
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Estimate Quantity :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.EstimatedQty, new { id = "decEstimatedQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Estimate quantity" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.EstimatedQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Recived So Far :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.ReceivedSoFar, new { id = "decReceivedSoFar", type = "number", step = "0.01", @class = "form-control", placeholder = "Recived so far" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.ReceivedSoFar, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Remaining Quantity :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.RemainingQty, new { id = "decRemainingQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Remaining quantity" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.RemainingQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Material Demand :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.DemandQty, new { id = "decDemandQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Material demand" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.DemandQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Unit Rate :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.UnitRate, new { id = "decUnitRate", type = "number", step = "0.01", @class = "form-control", placeholder = "Unit rate" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.UnitRate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Total Price :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.TotalPrice, new { id = "decTotalPrice", type = "number", step = "0.01", @class = "form-control", placeholder = "Total price" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.TotalPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="txtDescription" class="col-form-label">Remarks :</label>
                                        @Html.TextAreaFor(model => model.DetailModel.Remarks, new { id = "txtitemDescription", placeholder = "Type remarks here...", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.DetailModel.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        }
                    </div>

                        @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                        {
                            <div class="box-footer">
                                <div class="row">
                                    <div class="col-md-4">
                                        @*<table class="table" id="tblStockAvailable">
                                                <tr>
                                                    <th>Available Stock: </th>
                                                    <th id="stockAvailable"></th>
                                                </tr>
                                            </table>*@
                                    </div>
                                    <div class="col-md-4">

                                    </div>
                                    <div class="col-lg-4 col-md-4">
                                        <input type="submit" id="soCreateBtn" value="Add Requisition" class="btn btn-primary btn-block" />
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.BillRequisitionMasterId > 0)
                        {

                            @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                            <div class="table-responsive col-md-12  text-nowrap">
                                <table id="KgErpDataTable" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th style="padding:5px;text-align:center;">SL</th>
                                            <th style="padding: 5px; text-align: left;">Item/ Mat.</th>
                                            <th style="padding: 5px; text-align: left;">Unit</th>
                                            <th style="padding: 5px; text-align: right;">Est. Qty</th>
                                            <th style="padding: 5px; text-align: right; ">Recived So Far</th>
                                            <th style="padding: 5px; text-align: right; ">Remaining Qty</th>
                                            <th style="padding: 5px; text-align: right; ">Demand Qty</th>
                                            <th style="padding: 5px; text-align: right; ">Unit Rate</th>
                                            <th style="padding: 5px; text-align: right; ">Total Price</th>
                                            @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                                            {
                                                <th style="padding:5px;text-align:center;">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var item in Model.DetailList)
                                        {

                                            <tr>
                                                <td style="padding:5px">@(++sl)</td>
                                                <td style="padding:5px;text-align:left;">@item.ItemName</td>
                                                <td style="padding: 5px; text-align: left;">@item.UnitName</td>
                                                <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", item.EstimatedQty)</td>
                                                <td style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", item.ReceivedSoFar)</td>
                                                <td style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", item.RemainingQty)</td>
                                                <td style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", item.DemandQty)</td>
                                                <td style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", item.UnitRate)</td>
                                                <td style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", item.TotalPrice)</td>

                                                @{ if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                                                    {
                                                        <td style="padding:5px;text-align:center;">
                                                            <a id="@item.BillRequisitionDetailId" onclick=" makeEditble(@item.BillRequisitionDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                            <a id="@item.BillRequisitionDetailId" onclick="makeDeletale(@item.BillRequisitionDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteDamageSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                    </div>

                    @if (Model.BillRequisitionMasterId > 0 && Model.StatusId == EnumBillRequisitionStatus.Draft)
                    {
                        <div class="box-footer">

                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.BillRequisitionMasterId" onclick="makeSubmitble(@Model.BillRequisitionMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitDamageModal" data-placement="top">
                                        @if (Model.StatusId == EnumBillRequisitionStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitBillRequisitionMaster", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDamageModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Requisition </b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidSubmitBRMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to proceed ?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteBillRequisitionDetailById", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDamageSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Requisition Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.DetailModel.BillRequisitionDetailId, new { id = "hidBillRequisitionDetailId" })
                    @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidBillRequisitionMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Requisition Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetDamageDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        let unitPrice = 0;
        var normal= 0;
        $(document).ready(function () {


            //$('#BRMasterSlaveFormId').on('keyup keypress', function (e) {

            //    var keyCode = e.keyCode || e.which;
            //    if (keyCode === 13) {
            //        e.preventDefault();
            //        return false;
            //    }
            //});


            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {

                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

        });
           function makeEditble(rowId) {

                $.ajax({

                    type: "POST",
                    url: "@Url.Action("SingleBillRequisitionDetails", "BillRequisition")",
                    datatype: "Json",
                    data: { id: rowId },
                    success: function (data) {
                        unitPrice = data.UnitPrice;

                        $('#soCreateBtn').val("Update");
                        $("#hidBRMasterId").val(data.BillRequisitionMasterId);
                        $('#ActionId').val(2);
                        $("#CompanyFK").val(data.CompanyId);
                        $("#hiddenBillRequisitionDetailId").val(data.BillRequisitionDetailId);
                        $("#ddlRequisitionItemId").val(data.BillRequisitionItemId).trigger('change');

                        $("#txtUnitId").val(data.UnitId);
                        $("#decEstimatedQty").val(data.EstimatedQty);
                        $("#decReceivedSoFar").val(data.ReceivedSoFar);
                        $("#decRemainingQty").val(data.RemainingQty);
                        $("#decDemandQty").val(data.DemandQty);
                        $("#decUnitRate").val(data.UnitRate);
                        $("#decTotalPrice").val(data.TotalPrice);
                        $("#txtitemDescription").val(data.Remarks);
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }
                });
            }

        function makeSubmitble(rowId) {

            if (@Model.StatusId == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }
            $('#hidSubmitBRMasterId').val(@Model.BillRequisitionMasterId);
        }

        function makeDeletale(rowId) {

            $('#hidBillRequisitionDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        function resetDamageDeleteSlaveForm() {

            $('#BRMasterSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        function getUnitName() {
            var requisitionIdValue = document.getElementById("inputWard");;
            $('#showUnitName').val(requisitionIdValue);
            console.log(requisitionIdValue);
        }

        function showInput() {
            var Ward = document.getElementById("inputWard");
            var Dpp = document.getElementById("inputDPP");
            var Chainage = document.getElementById("inputChainage");
            var Floor = document.getElementById("inputFloor");
            var projectType = $('#projectTypeId').val();
            console.log(projectType);

            if (projectType == 8) {
                Ward.classList.remove("block");
                Ward.classList.add("hidden");

                Dpp.classList.remove("block");
                Dpp.classList.add("hidden");

                Chainage.classList.remove("block");
                Chainage.classList.add("hidden");

                Floor.classList.remove("hidden");
                Floor.classList.add("block");
            }
            else if (projectType == 9) {
                Ward.classList.remove("hidden");
                Ward.classList.add("block");

                Dpp.classList.remove("hidden");
                Dpp.classList.add("block");

                Chainage.classList.remove("hidden");
                Chainage.classList.add("block");

                Floor.classList.remove("block");
                Floor.classList.add("hidden");
            }
            else {
                Ward.classList.remove("block");
                Ward.classList.add("hidden");

                Dpp.classList.remove("block");
                Dpp.classList.add("hidden");

                Chainage.classList.remove("block");
                Chainage.classList.add("hidden");

                Floor.classList.remove("block");
                Floor.classList.add("hidden");
            }
        }

    </script>
}