@model KGERP.Service.ServiceModel.BillRequisitionMasterModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "New Requisition";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
}

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }

    .ui-datepicker-trigger {
        width: 37px !important;
        height: 33px !important;
        margin-left: 5px !important;
    }

    .dateCustom {
        width: 82% !important;
        border-radius: 1px !important;
        border: 1px solid #d2d6de !important;
        height: 33px !important;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.BillRequisitionMasterId > 0)
        {
            <span>
                Requisition Details
            </span>
        }
        else
        {
            <span>
                New Requisition
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">New Requisition</li>
    </ol>
</section>
@using (Html.BeginForm("BillRequisitionMasterSlave", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidBRMasterId" })
                @Html.HiddenFor(model => model.DetailModel.BillRequisitionDetailId, new { id = "hiddenBillRequisitionDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                <div class="box-danger">
                    <div class="box-body">
                        @if (Model.BillRequisitionMasterId > 0)
                        {
                            <div class="row mb-5">
                                <div class="col-md-1"> </div>
                                <div class="col-md-10">
                                    <table class="table">
                                        <tr>
                                            <th style="width:17% !important">Requisition No</th>
                                            <th>:</th>
                                            <td>@Model.BillRequisitionNo</td>

                                            <th style="width:17% !important">Requisition Status</th>
                                            <th>:</th>
                                            <td>@Model.StatusName</td>
                                        </tr>

                                        <tr>
                                            <th style="width:17% !important">Requisition Date</th>
                                            <th>:</th>
                                            <td>@Model.BRDate.ToShortDateString()</td>

                                            <th style="width:17% !important">Requisition Type</th>
                                            <th>:</th>
                                            <td>
                                                @Model.BRTypeName
                                                <input type="hidden" value="@Model.BillRequisitionTypeId" id="reqTypeId" />
                                            </td>
                                        </tr>

                                        <tr>
                                            <th style="width:17% !important">Project Type</th>
                                            <th>:</th>
                                            <td>@Model.ProjectTypeName</td>

                                            <th style="width:17% !important">Project Name</th>
                                            <th>:</th>
                                            <td>
                                                @Model.CostCenterName
                                                <input type="hidden" value="@Model.CostCenterId" id="ProjectId" />
                                            </td>
                                        </tr>

                                        <tr>
                                            <th>
                                                @((Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Overhead)? "Item Description" : "Work Details")
                                            </th>
                                            <th>:</th>
                                            <td>@Model.Description</td>

                                            <th>Created By</th>
                                            <th>:</th>
                                            <td>@Model.EmployeeName</td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="col-md-1"> </div>
                            </div>
                        }

                        <div class="box-body">

                            @if (Model.BillRequisitionMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-3">
                                        <label for="message-text" class="col-form-label">Requisition Date<sup class="text-danger" title="Required">*</sup></label>
                                        <div class="form-group">
                                            <input name="BRDate" asp-for="BRDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker w-100 dateCustom" placeholder="Operation Date" autocomplete="off" id="txtOperationrDate">
                                            @Html.ValidationMessageFor(model => model.BRDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label class="form-label">Requisition Type<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.BillRequisitionTypeId, Model.RequisitionTypeList as SelectList, "==Select Requisition Type==", new { id = "ddlBRTypeId", @class = "form-control searchingDropdown", required = "required" })
                                            @Html.ValidationMessageFor(model => model.BillRequisitionTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label class="form-label">Project Type<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.ProjectTypeId, Model.ProjectTypeList as SelectList, "==Select Project Type==", new { id = "projectTypeId", onchange = "GetProjectListByProjectTypeId()", @class = "form-control searchingDropdown", required = "required" })
                                            @Html.ValidationMessageFor(model => model.ProjectTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label class="form-label">Select Project<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.CostCenterId, Model.ProjectList as SelectList, "==Select Project==", new { id = "ddlCostCenterId", onchange = "GetDivisionListByProjectId()", @class = "form-control searchingDropdown", style = "width:100%", required = "requried" })
                                            @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription" class="form-label" id="descriptionTitle">Work Deatils</label>
                                            @Html.TextAreaFor(model => model.Description, new { id = "txtitemDescription", placeholder = "Type work details here", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                            {
                                if (Model.ProjectTypeId == (int)EnumBillReqProjectType.Building)
                                {
                                    <div class="row">
                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="ddlFloor" class="form-label d-block">Select Floor</label>
                                                @Html.DropDownListFor(model => model.DetailModel.FloorId, Model.FloorList as SelectList, "==Select Floor==", new { id = "ddlFloor", @class = "form-control searchingDropdown d-block", @style = "width: 100%" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.FloorId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="ddlMember" class="form-label d-block">Member</label>
                                                @Html.DropDownListFor(model => model.DetailModel.MemberId, Model.MemberList as SelectList, "==Select Member==", new { id = "ddlMember", @class = "form-control searchingDropdown d-block", @style = "width: 100%" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.MemberId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.ProjectTypeId == (int)EnumBillReqProjectType.Road)
                                {
                                    <div class="row d-block">
                                        <div class="col-md-3">
                                            <div class="form-group d-block">
                                                <label for="txtWrad" class="form-label">Ward</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Ward, new { id = "txtWrad", placeholder = "Ward", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Ward, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="txtDPP" class="form-label">DPP/Road Id</label>
                                                @Html.TextBoxFor(model => model.DetailModel.DPP, new { id = "txtDPP", placeholder = "DPP", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.DPP, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.ProjectTypeId == (int)EnumBillReqProjectType.Runway)
                                {
                                    <div class="row d-block">
                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="txtChainage" class="form-label">Chainage</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Chainage, new { id = "txtChainage", placeholder = "Chainage", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Chainage, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.ProjectTypeId == (int)EnumBillReqProjectType.Bridge)
                                {
                                    <div class="row d-block">
                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="txtPier" class="form-label">Pier/Wing</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Pier, new { id = "txtPier", placeholder = "Pier/Wing", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Pier, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row d-block">
                                        <div class="col-md-3 d-block">
                                            <div class="form-group">
                                                <label for="txtChainage" class="form-label">Chainage</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Chainage, new { id = "txtChainage", placeholder = "Chainage", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Chainage, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.ProjectTypeId == 0)
                                {
                                    <div class="row hidden" id="depandableInputForm">
                                        <div class="col-md-3" id="inputWard">
                                            <div class="form-group">
                                                <label for="txtWrad" class="form-label">Ward</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Ward, new { id = "txtWrad", placeholder = "Ward", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Ward, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 hidden" id="inputDPP">
                                            <div class="form-group">
                                                <label for="txtDPP" class="form-label">DPP/Road Id</label>
                                                @Html.TextBoxFor(model => model.DetailModel.DPP, new { id = "txtDPP", placeholder = "DPP", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.DPP, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 hidden" id="inputChainage">
                                            <div class="form-group">
                                                <label for="txtChainage" class="form-label">Chainage</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Chainage, new { id = "txtChainage", placeholder = "Chainage", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Chainage, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 hidden" id="inputFloor">
                                            <div class="form-group">
                                                <label for="ddlFloor" class="form-label d-block">Select Floor</label>
                                                @Html.DropDownListFor(model => model.DetailModel.FloorId, Model.FloorList as SelectList, "==Select Floor==", new { id = "ddlFloor", @class = "form-control searchingDropdown d-block", @style = "width: 100%" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.FloorId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 hidden" id="inputMember">
                                            <div class="form-group">
                                                <label for="ddlMember" class="form-label d-block">Select Member</label>
                                                @Html.DropDownListFor(model => model.DetailModel.MemberId, Model.MemberList as SelectList, "==Select Member==", new { id = "ddlMember", @class = "form-control searchingDropdown d-block", @style = "width: 100%" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.MemberId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 hidden" id="inputPier">
                                            <div class="form-group">
                                                <label for="txtPier" class="form-label">Pier/Wing</label>
                                                @Html.TextBoxFor(model => model.DetailModel.Pier, new { id = "txtPier", placeholder = "Pier/Wing", @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.Pier, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div class="row">
                                    @if (Model.BillRequisitionTypeId != (int)EnumBillRequisitionType.Overhead)
                                    {
                                        <div class="col-md-3 d-block" id="inputDivision">
                                            <div class="form-group">
                                                <label class="form-label">BoQ Division</label>
                                                @Html.DropDownListFor(model => model.DetailModel.BoqDivisionId, Model.BOQDivisionList as SelectList, "==Select BoQ Division==", new { id = "ddlDivisionId", onchange = "GetBoqItemListByDivisionId()", @class = "form-control searchingDropdown" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.BoqDivisionId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3 d-block" id="inputBoq">
                                            <div class="form-group">
                                                <label class="form-label">BoQ Item</label>
                                                @Html.DropDownListFor(model => model.DetailModel.BoqItemId, Model.BOQItemList as SelectList, "==Select BoQ Item==", new { id = "ddlBOQItemId", onchange = "GetSubcategoryByBoqId()", @class = "form-control searchingDropdown" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.BoqItemId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }

                                    <div class="col-md-3" id="inputRequisitionFor">
                                        <div class="form-group">
                                            <label class="form-label">Requisition For<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.RequisitionSubtypeId, Model.RequisitionSubTypeList as SelectList, "==Requisition For==", new { id = "ddlBRSubTypeId", onchange = "GetMaterialListBySubCategoryId()", @class = "form-control searchingDropdown", required = "required" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.RequisitionSubtypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3 d-block" id="inputMaterial">
                                        <div class="form-group">
                                            <label class="form-label" id="materialTitle">@((Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Overhead) ? "Requisition Item" : "Requisition Material")<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.DropDownListFor(model => model.DetailModel.ProductId, Model.RequisitionItemList as SelectList, "==Select Material==", new { id = "ddlRequisitionItemId", onchange = "GetUnitNameByProductId()", @class = "form-control searchingDropdown", required = "required" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.ProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3 d-block" id="inputUnit">
                                        <div class="form-group">
                                            <label class="form-label">Material Unit</label>
                                            @Html.TextBoxFor(model => model.DetailModel.UnitName, new { id = "showUnitName", @class = "form-control", placeholder = "Material Unit", ReadOnly = true })
                                            @Html.HiddenFor(model => model.DetailModel.UnitId, new { id = "txtUnitId" })
                                        </div>
                                    </div>

                                    @if (Model.BillRequisitionTypeId != (int)EnumBillRequisitionType.Overhead)
                                    {
                                        <div class="col-md-3 d-block" id="inputEstimateQty">
                                            <div class="form-group">
                                                <label class="form-label">Estimate Quantity</label>
                                                @Html.TextBoxFor(model => model.DetailModel.EstimatedQty, new { id = "decEstimatedQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Estimate quantity", ReadOnly = "true" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.EstimatedQty, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }

                                    <div class="col-md-3 d-block" id="inputReceivedSoFar">
                                        <div class="form-group">
                                            <label>Item Received So Far</label>
                                            @Html.TextBoxFor(model => model.DetailModel.ReceivedSoFar, new { id = "decReceivedSoFar", type = "number", step = "0.01", @class = "form-control", placeholder = "Received so far", ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.ReceivedSoFar, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @if (Model.BillRequisitionTypeId != (int)EnumBillRequisitionType.Overhead)
                                    {
                                        <div class="col-md-3 d-block" id="inputRemainingQty">
                                            <div class="form-group">
                                                <label>Remaining Quantity</label>
                                                @Html.TextBoxFor(model => model.DetailModel.RemainingQty, new { id = "decRemainingQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Remaining quantity", ReadOnly = "true" })
                                                @Html.ValidationMessageFor(model => model.DetailModel.RemainingQty, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }

                                    <div class="col-md-4 d-block" id="inputDemandQty">
                                        <div class="form-group">
                                            <label id="demandTitle">@((Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Labor) ? "Labor Demand" : "Demand Quantity")<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.TextBoxFor(model => model.DetailModel.DemandQty, new { id = "decDemandQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Material demand" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.DemandQty, "", new { @class = "text-danger" })
                                            <span class="text-danger" id="demandValidate"></span>
                                        </div>
                                    </div>

                                    <div class="col-md-4 d-block" id="inputUnitRate">
                                        <div class="form-group">
                                            <label id="unitTitle">@((Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Labor) ? "Labor Rate" : "Unit Rate")<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.TextBoxFor(model => model.DetailModel.UnitRate, new { id = "decUnitRate", type = "number", step = "0.01", @class = "form-control", placeholder = "Unit rate", })
                                            @Html.ValidationMessageFor(model => model.DetailModel.UnitRate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4 d-block" id="inputTotalPrice">
                                        <div class="form-group">
                                            <label id="totalTitle">Total Amount<sup class="text-danger" title="Required">*</sup></label>
                                            @Html.TextBoxFor(model => model.DetailModel.TotalPrice, new { id = "decTotalPrice", type = "number", step = "0.01", @class = "form-control", placeholder = "Total amount", ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.DetailModel.TotalPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-12 d-block" id="inputRemarks">
                                        <div class="form-group">
                                            <label for="txtDescription" class="form-label">Remarks/Particular</label>
                                            @Html.TextAreaFor(model => model.DetailModel.Remarks, new { id = "txtitemDescription", placeholder = "Type remarks here", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.DetailModel.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            }
                        </div>

                        @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                        {
                            <div class="box-footer">
                                <div class="row">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-4"></div>
                                    <div class="col-lg-4 col-md-4">
                                        <input type="submit" id="soCreateBtn" value="Add Requisition" class="btn btn-primary btn-block" />
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.BillRequisitionMasterId > 0)
                        {
                            @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })

                            <div class="table-responsive col-md-12  text-wrap">
                                <table id="KgErpDataTable" class="table table-striped table-responsive">
                                    <thead>
                                        <tr>
                                            <th>SL</th>
                                            @if (Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Overhead)
                                            {
                                                <th>Requisition For</th>
                                            }
                                            else
                                            {
                                                <th>Division Name</th>
                                                <th>BoQ Number</th>
                                                <th>BoQ Name</th>
                                            }
                                            @if (Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Overhead)
                                            {
                                                <th>Item</th>
                                            }
                                            else
                                            {
                                                <th>Material</th>
                                            }
                                            <th>Unit Name</th>
                                            @if (Model.BillRequisitionTypeId != (int)EnumBillRequisitionType.Overhead)
                                            {
                                                <th>Est. Qty</th>
                                            }
                                            <th>Recived</th>
                                            <th>Remaining</th>
                                            <th>Demand</th>
                                            <th>Unit Rate</th>
                                            <th>Total Price</th>
                                            @if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                                            {
                                                <th style="padding:5px;text-align:center;">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var item in Model.DetailList)
                                        {
                                            <tr>
                                                <td>@(++sl)</td>
                                                @if (Model.BillRequisitionTypeId == (int)EnumBillRequisitionType.Overhead)
                                                {
                                                    <td>
                                                        @item.RequisitionSubtypeName
                                                        <input type="hidden" value="@item.RequisitionSubtypeId" id="BRSubtyeIdHidden_@item.BillRequisitionDetailId" />
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        @item.BoqDivisionName
                                                        <input type="hidden" value="@item.BoqDivisionId" id="divisionIdHidden_@item.BillRequisitionDetailId" />
                                                    </td>
                                                    <td>
                                                        @item.BoqNumber
                                                        <input type="hidden" value="@item.BoqItemId" id="boqIdHidden_@item.BillRequisitionDetailId" />
                                                    </td>
                                                    <td>
                                                        @item.BoqItemName
                                                    </td>
                                                }

                                                <td>
                                                    @item.ProductName
                                                    <input type="hidden" value="@item.ProductId" id="productIdHidden_@item.BillRequisitionDetailId" />
                                                </td>
                                                <td>@item.UnitName</td>
                                                @if (Model.BillRequisitionTypeId != (int)EnumBillRequisitionType.Overhead)
                                                {
                                                    <td>@String.Format("{0:0.00}", item.EstimatedQty)</td>

                                                }
                                                <td>@String.Format("{0:0.00}", item.ReceivedSoFar)</td>
                                                <td>@String.Format("{0:0.00}", item.RemainingQty)</td>
                                                <td>@String.Format("{0:0.00}", item.DemandQty)</td>
                                                <td>@String.Format("{0:0.00}", item.UnitRate)</td>
                                                <td>@String.Format("{0:0.00}", item.TotalPrice)</td>

                                                @{ if (Model.StatusId == EnumBillRequisitionStatus.Draft)
                                                    {
                                                        <td style="padding:5px;text-align:center;">
                                                            <a id="@item.BillRequisitionDetailId" onclick=" makeEditble(@item.BillRequisitionDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                            <a id="@item.BillRequisitionDetailId" onclick="makeDeletale(@item.BillRequisitionDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteDamageSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                    </div>

                    @if (Model.BillRequisitionMasterId > 0 && Model.StatusId == EnumBillRequisitionStatus.Draft)
                    {
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.BillRequisitionMasterId" onclick="makeSubmitble(@Model.BillRequisitionMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitDamageModal" data-placement="top">
                                        @if (Model.StatusId == EnumBillRequisitionStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitBillRequisitionMaster", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDamageModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Requisition </b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidSubmitBRMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to proceed ?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-check">&nbsp;<span class="submitOrDraftText"></span>Yes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteBillRequisitionDetailById", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDamageSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Requisition Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.DetailModel.BillRequisitionDetailId, new { id = "hidBillRequisitionDetailId" })
                    @Html.HiddenFor(model => model.BillRequisitionMasterId, new { id = "hidBillRequisitionMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Requisition Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetDamageDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        var isEditable = false;

        // Make editable form
        function makeEditble(rowId) {
            isEditable = true;
            $.ajax({
                type: "POST",
                url: "@Url.Action("SingleBillRequisitionDetails", "BillRequisition")",
                datatype: "Json",
                data: { id: rowId },
                success: function (data) {
                    $('#soCreateBtn').val("Update");
                    $("#hidBRMasterId").val(data.BillRequisitionMasterId);
                    $('#ActionId').val(2);
                    $("#CompanyFK").val(data.CompanyId);
                    $("#hiddenBillRequisitionDetailId").val(data.BillRequisitionDetailId);
                    $("#ddlFloor").val(data.FloorId).trigger('change');
                    $("#ddlMember").val(data.MemberId).trigger('change');
                    $("#txtWrad").val(data.Ward);
                    $("#txtDPP").val(data.DPP);
                    $("#txtChainage").val(data.Chainage);
                    $("#txtPier").val(data.Pier);
                    $("#txtUnitId").val(data.UnitId);
                    $("#decEstimatedQty").val(data.EstimatedQty);
                    $("#decReceivedSoFar").val(data.ReceivedSoFar);
                    $("#decRemainingQty").val(data.RemainingQty);
                    $("#decDemandQty").val(data.DemandQty);
                    $("#decUnitRate").val(data.UnitRate);
                    $("#decTotalPrice").val(data.TotalPrice);
                    $("#txtitemDescription").val(data.Remarks);
                    $("#ddlBRSubTypeId").val(data.RequisitionSubtypeId).trigger('change');
                    $("#ddlDivisionId").val(data.BoqDivisionId).trigger('change');
                    GetBoqListByDivisionIdForEdit(data.BoqItemId, data.RequisitionSubtypeId, data.ProductId);

                    // Get boq list by division id
                    function GetBoqListByDivisionIdForEdit(boqId, subtypeId, materialId) {
                        var getBoqDivisionId = $("#ddlDivisionId option:selected");
                        var showBoqItemList = $("#ddlBOQItemId");
                        var showSubcategoryList = $("#ddlBRSubTypeId");
                        var showBoqMaterialList = $("#ddlRequisitionItemId");

                        if (@(Model.BillRequisitionTypeId) == @((int)EnumBillRequisitionType.Overhead)) {
                            $.ajax({
                                type: "GET",
                                url: "/BillRequisition/getBoqMaterialListForOverHead",
                                dataType: "json",
                                data: { id: subtypeId },
                                success: function (data) {
                                    showBoqMaterialList.empty();
                                    showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                                    $.each(data, function (index, item) {
                                        showBoqMaterialList.append($('<option>', {
                                            value: item.ProductId,
                                            text: item.ProductName
                                        }));
                                    });
                                    $("#ddlRequisitionItemId").val(materialId).trigger('change');
                                }
                            });
                        } else {
                            $.ajax({
                                type: "GET",
                                url: "/BillRequisition/getBoqItemListWithBoqNumber",
                                dataType: "json",
                                data: { id: getBoqDivisionId.val() },
                                success: function (data) {
                                    showBoqItemList.empty();
                                    showBoqItemList.append("<option selected disabled>==Select BoQ Item==</option>");

                                    $.each(data, function (index, item) {
                                        showBoqItemList.append($('<option>', {
                                            value: item.BoQItemId,
                                            text: item.Name
                                        }));
                                    });

                                    $("#ddlBOQItemId").val(boqId).trigger('change');

                                    $.ajax({
                                        type: "GET",
                                        url: "/BillRequisition/GetSubCategoryByBoqId",
                                        dataType: "json",
                                        data: { id: boqId },
                                        success: function (data) {
                                            showSubcategoryList.empty();
                                            showSubcategoryList.append("<option selected disabled>==Requisition For==</option>");

                                            $.each(data, function (index, item) {
                                                showSubcategoryList.append($('<option>', {
                                                    value: item.ProductSubCategoryId,
                                                    text: item.Name
                                                }));
                                            });
                                            $("#ddlBRSubTypeId").val(subtypeId).trigger('change');

                                            $.ajax({
                                                type: "GET",
                                                url: "/BillRequisition/GetMaterialListBySubcategoryId",
                                                dataType: "json",
                                                data: { id: subtypeId },
                                                success: function (data) {
                                                    showBoqMaterialList.empty();
                                                    showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                                                    $.each(data, function (index, item) {
                                                        showBoqMaterialList.append($('<option>', {
                                                            value: item.ProductId,
                                                            text: item.ProductName
                                                        }));
                                                    });

                                                    $("#ddlRequisitionItemId").val(materialId).trigger('change');
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            });
        }

        $(document).ready(function () {
            "use strict";

            // date picker activation
            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });


            // Description title change when requisition type overhead is selected
            $("#ddlBRTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var requisitionTypeId = selectedOption.val();

                if (requisitionTypeId == @((int)EnumBillRequisitionType.Overhead)) {
                    $("#descriptionTitle").text("Item Description");
                    $("#materialTitle").text("Requisition Item");
                    $("#demandTitle").text("Demand Quantity");
                    $("#unitTitle").text("Unit Rate");

                    // show hide input field
                    $("#inputDivision").removeClass("d-block").addClass("hidden");
                    $("#inputBoq").removeClass("d-block").addClass("hidden");
                    $("#inputEstimateQty").removeClass("d-block").addClass("hidden");
                    $("#inputRemainingQty").removeClass("d-block").addClass("hidden");
                    $("#inputMaterial").removeClass("hidden").addClass("d-block");
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");

                    // for layout
                    $("#inputDemandQty").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnitRate").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputTotalPrice").removeClass("col-md-3").addClass("col-md-4");

                    // Show subcategory by category id
                    var showRequisitionSubtype = $("#ddlBRSubTypeId");

                    $.ajax({
                        type: "GET",
                        url: "/Configuration/GetSubCategoryByCategoryId",
                        dataType: "json",
                        data: { id: requisitionTypeId },
                        success: function (data) {
                            showRequisitionSubtype.empty();
                            showRequisitionSubtype.append("<option selected disabled>==Requisition For==</option>");

                            $.each(data, function (index, item) {
                                showRequisitionSubtype.append($('<option>', {
                                    value: item.ProductSubCategoryId,
                                    text: item.Name
                                }));
                            });
                        }
                    });
                } else if (requisitionTypeId == @((int)EnumBillRequisitionType.Labor)) {
                    $("#demandTitle").text("Labor Quantity");
                    $("#unitTitle").text("Labor Rate");

                    // show hide input field
                    //$("#inputDivision").removeClass("d-block").addClass("hidden");
                    //$("#inputBoq").removeClass("d-block").addClass("hidden");
                    $("#inputEstimateQty").removeClass("d-block").addClass("hidden");
                    $("#inputRemainingQty").removeClass("d-block").addClass("hidden");
                    //$("#inputMaterial").removeClass("d-block").addClass("hidden");
                    $("#inputUnit").removeClass("d-block").addClass("hidden");
                    $("#inputReceivedSoFar").removeClass("d-block").addClass("hidden");

                    // for layout
                    $("#inputDemandQty").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputUnitRate").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputTotalPrice").removeClass("col-md-4").addClass("col-md-3");
                } else {
                    $("#descriptionTitle").text("Work Details :");
                    $("#materialTitle").text("Requisition Material");
                    $("#demandTitle").text("Demand Quantity");
                    $("#unitTitle").text("Unit Rate");

                    // show hide input field
                    $("#inputDivision").removeClass("hidden").addClass("d-block");
                    $("#inputBoq").removeClass("hidden").addClass("d-block");
                    $("#inputEstimateQty").removeClass("hidden").addClass("d-block");
                    $("#inputRemainingQty").removeClass("hidden").addClass("d-block");
                    $("#inputMaterial").removeClass("hidden").addClass("d-block");
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");

                    // for layout
                    $("#inputDemandQty").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnitRate").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputTotalPrice").removeClass("col-md-3").addClass("col-md-4");
                }
            });

            // show input field when project type
            $("#projectTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");

                if (selectedOption.val() == @((int)EnumBillReqProjectType.Building)) {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("hidden").addClass("d-block");
                    $("#inputMember").removeClass("hidden").addClass("d-block");
                    $("#inputPier").removeClass("d-block").addClass("hidden");
                } else if (selectedOption.val() == @((int)EnumBillReqProjectType.Road)) {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("hidden").addClass("d-block");
                    $("#inputDPP").removeClass("hidden").addClass("d-block");
                    $("#inputChainage").removeClass("hidden").addClass("d-block");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                    $("#inputMember").removeClass("d-block").addClass("hidden");
                    $("#inputPier").removeClass("d-block").addClass("hidden");
                } else if (selectedOption.val() == @((int)EnumBillReqProjectType.Runway)) {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("hidden").addClass("d-block");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                    $("#inputMember").removeClass("d-block").addClass("hidden");
                    $("#inputPier").removeClass("d-block").addClass("hidden");
                } else if (selectedOption.val() == @((int)EnumBillReqProjectType.Bridge)) {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputPier").removeClass("hidden").addClass("d-block");
                    $("#inputChainage").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                    $("#inputMember").removeClass("d-block").addClass("hidden");
                } else {
                    $("#depandableInputForm").removeClass("d-block").addClass("hidden");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                    $("#inputMember").removeClass("d-block").addClass("hidden");
                    $("#inputPier").removeClass("d-block").addClass("hidden");
                }
            });

            // TA/DA hidden div
            $("#ddlBRSubTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");

                if (selectedOption.val() == 19) {
                    $("#inputUnit").removeClass("d-block").addClass("hidden");
                    $("#inputReceivedSoFar").removeClass("d-block").addClass("hidden");
                    $("#inputUnitRate").removeClass("d-block").addClass("hidden");
                    $("#inputTotalPrice").removeClass("d-block").addClass("hidden");
                    $("#demandTitle").text("Payable Amount")

                    $("#inputRequisitionFor").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputMaterial").removeClass("col-md-3").addClass("col-md-4");
                } else {
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");
                    $("#inputUnitRate").removeClass("hidden").addClass("d-block");
                    $("#inputTotalPrice").removeClass("hidden").addClass("d-block");
                    $("#demandTitle").text("Demand Quantity")

                    $("#inputRequisitionFor").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputMaterial").removeClass("col-md-4").addClass("col-md-3");
                }
            });

            if ('@(Model.StatusId)' == '@(EnumBillRequisitionStatus.Draft)' && @(Model.BillRequisitionTypeId) == @((int)EnumBillRequisitionType.Overhead)) {
                var requisitionTypeId = @(Model.BillRequisitionTypeId);
                var showRequisitionSubtype = $("#ddlBRSubTypeId");

                $.ajax({
                    type: "GET",
                    url: "/Configuration/GetSubCategoryByCategoryId",
                    dataType: "json",
                    data: { id: requisitionTypeId },
                    success: function (data) {
                        showRequisitionSubtype.empty();
                        showRequisitionSubtype.append("<option selected disabled>==Requisition For==</option>");

                        $.each(data, function (index, item) {
                            showRequisitionSubtype.append($('<option>', {
                                value: item.ProductSubCategoryId,
                                text: item.Name
                            }));
                        });
                    }
                });

            } else {
                var projectId = @(Model.CostCenterId);
                var showBoqDivisionList = $("#ddlDivisionId");

                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/getBoqDivisionList",
                    dataType: "json",
                    data: { id: projectId },
                    success: function (data) {
                        showBoqDivisionList.empty();
                        showBoqDivisionList.append("<option selected disabled>==Select BoQ Division==</option>");

                        $.each(data, function (index, item) {
                            showBoqDivisionList.append($('<option>', {
                                value: item.BoqDivisionId,
                                text: item.Name
                            }));
                        });
                    }
                });
            }

            // claculate demand with unit rate and show to total
            var inputRemaining = $("#decRemainingQty");
            var inputDemand = $("#decDemandQty");
            var inputUnitPrice = $("#decUnitRate");
            var showTotalPrice = $("#decTotalPrice");

            function calculateTotalPrice() {
                var selectedOption = $("#ddlBRTypeId").find("option:selected");
                var remainingValue = parseFloat(inputRemaining.val()) || 0;
                var demandValue = parseFloat(inputDemand.val()) || 0;
                var unitPriceValue = parseFloat(inputUnitPrice.val()) || 0;
                var totalPrice = 0;

                if (selectedOption.val() == @((int)EnumBillRequisitionType.Overhead) || @(Model.BillRequisitionTypeId) == @((int)EnumBillRequisitionType.Overhead)) {
                    if (!isNaN(demandValue) && !isNaN(unitPriceValue)) {
                        totalPrice = demandValue * unitPriceValue;
                        showTotalPrice.val(totalPrice.toFixed(2));
                    }
                } else {
                    if (!isNaN(remainingValue) && !isNaN(demandValue) && !isNaN(unitPriceValue)) {
                        if (demandValue <= remainingValue || demandValue === 0) {
                            $("#demandValidate").text("");
                            totalPrice = demandValue * unitPriceValue;
                            showTotalPrice.val(totalPrice.toFixed(2));
                        } else {
                            inputDemand.val(remainingValue);
                            totalPrice = remainingValue * unitPriceValue;
                            showTotalPrice.val(totalPrice.toFixed(2));
                            $("#demandValidate").text("Demand cannot exceed the remaining amount!");
                        }
                    }
                }
            }

            inputDemand.on("input", calculateTotalPrice);
            inputUnitPrice.on("input", calculateTotalPrice);

        });

        // Get project list by project type id
        function GetProjectListByProjectTypeId() {
            var getProjectTypeId = $("#projectTypeId option:selected");
            var showProjectList = $("#ddlCostCenterId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/GetProjectList",
                dataType: "json",
                data: { id: getProjectTypeId.val() },
                success: function (data) {
                    showProjectList.empty();
                    showProjectList.append("<option selected disabled>==Select Project==</option>");

                    $.each(data, function (index, item) {
                        showProjectList.append($('<option>', {
                            value: item.CostCenterId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        // Get division list by project id
        function GetDivisionListByProjectId() {
            var getProjectId = $("#ddlCostCenterId option:selected");
            var showBoqDivisionList = $("#ddlDivisionId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/getBoqDivisionList",
                dataType: "json",
                data: { id: getProjectId.val() },
                success: function (data) {
                    showBoqDivisionList.empty();
                    showBoqDivisionList.append("<option selected disabled>==Select BoQ Division==</option>");

                    $.each(data, function (index, item) {
                        showBoqDivisionList.append($('<option>', {
                            value: item.BoqDivisionId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        // Get boq list by division id
        function GetBoqItemListByDivisionId() {
            if (isEditable == false) {
                var getBoqDivisionId = $("#ddlDivisionId option:selected");
                var showBoqItemList = $("#ddlBOQItemId");

                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/getBoqItemListWithBoqNumber",
                    dataType: "json",
                    data: { id: getBoqDivisionId.val() },
                    success: function (data) {
                        showBoqItemList.empty();
                        showBoqItemList.append("<option selected disabled>==Select BoQ Item==</option>");

                        $.each(data, function (index, item) {
                            showBoqItemList.append($('<option>', {
                                value: item.BoQItemId,
                                text: item.Name
                            }));
                        });
                    }
                });
            }
        }

        // Get sub category list by boq id
        function GetSubcategoryByBoqId() {
            if (isEditable == false) {
                var getRequisitionTypeId = $("#ddlBRTypeId option:selected").val();
                var getBoqItemId = $("#ddlBOQItemId option:selected").val();
                var showSubcategoryList = $("#ddlBRSubTypeId");

                if (@Model.BillRequisitionMasterId > 0) {
                    getRequisitionTypeId = @Model.BillRequisitionTypeId;
                }

                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/GetSubCategoryByTypeAndBoQ",
                    dataType: "json",
                    data: { typeId: getRequisitionTypeId, boqId: getBoqItemId },
                    success: function (data) {
                        showSubcategoryList.empty();
                        showSubcategoryList.append("<option selected disabled>==Requisition For==</option>");

                        $.each(data, function (index, item) {
                            showSubcategoryList.append($('<option>', {
                                value: item.ProductSubCategoryId,
                                text: item.Name
                            }));
                        });
                    }
                });
            }
        }

        // Get material list by sub category id
        function GetMaterialListBySubCategoryId() {
            if (isEditable == false) {
                var requisitionType = $("#ddlBRTypeId option:selected");
                var getBoqItemId = $("#ddlBOQItemId option:selected");
                var getSubcategoryId = $("#ddlBRSubTypeId option:selected");
                var showBoqMaterialList = $("#ddlRequisitionItemId");

                if (requisitionType.val() == @((int)EnumBillRequisitionType.Overhead) || @(Model.BillRequisitionTypeId) == @((int)EnumBillRequisitionType.Overhead)){
                    $.ajax({
                        type: "GET",
                        url: "/BillRequisition/getBoqMaterialListForOverHead",
                        dataType: "json",
                        data: { id: getSubcategoryId.val() },
                        success: function (data) {
                            showBoqMaterialList.empty();
                            showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                            $.each(data, function (index, item) {
                                showBoqMaterialList.append($('<option>', {
                                    value: item.ProductId,
                                    text: item.ProductName
                                }));
                            });
                        }
                    });
                } else {

                    $.ajax({
                        type: "GET",
                        url: "/BillRequisition/GetMaterialListByBoqIdAndSubcategoryId",
                        dataType: "json",
                        data: { boqId: getBoqItemId.val(), subtypeId: getSubcategoryId.val() },
                        success: function (data) {
                            showBoqMaterialList.empty();
                            showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                            $.each(data, function (index, item) {
                                showBoqMaterialList.append($('<option>', {
                                    value: item.ProductId,
                                    text: item.ProductName
                                }));
                            });
                        }
                    });
                }
            }
        }

        // Get unit name by product id
        function GetUnitNameByProductId() {
            var getUnitIdValue = $("#ddlRequisitionItemId option:selected");
            var showName = $("#showUnitName");
            var showValue = $("#txtUnitId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/GetUnitNameWithId",
                dataType: "json",
                data: { id: getUnitIdValue.val() },
                success: function (data) {
                    if (data) {
                        showName.val(data.unitName);
                        showValue.val(data.unitId);
                    }
                }
            });

            if (isEditable == false) {
                GetBudgetInfo();
            }
        }

        // Get budget info by boq id and by overhead
        function GetBudgetInfo() {
            var requisitionType = $("#ddlBRTypeId option:selected").val();
            var boqId = $("#ddlBOQItemId option:selected").val();
            var productId = $("#ddlRequisitionItemId option:selected").val();
            var projectId = $("#ddlCostCenterId option:selected").val();
            var showEstimate = $("#decEstimatedQty");
            var showUnitRate = $("#decUnitRate");
            var showReceivedSoFar = $("#decReceivedSoFar");
            var showRemaining = $("#decRemainingQty");
            var intputDemand = $("#decDemandQty");
            var totalAmount = $("#decTotalPrice");

            if (requisitionType == @((int)EnumBillRequisitionType.Overhead) || @(Model.BillRequisitionTypeId) == @((int)EnumBillRequisitionType.Overhead)) {

                if (projectId == 0 || projectId == null || projectId == undefined) {
                    projectId = @(Model.CostCenterId);
                }

                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/GetMaterialBudgetInfoForOverhead",
                    dataType: "json",
                    data: { projectId: projectId, productId: productId },
                    success: function (data) {
                        if (data) {
                            showEstimate.val(data.EstimateQty);
                            showUnitRate.val(data.UnitRate);
                            showReceivedSoFar.val(data.ReceivedSoFar);
                            showRemaining.val(data.RemainingQty);
                            intputDemand.val(0);
                            totalAmount.val(0);
                        }
                    }
                });
            } else {

                if (projectId == 0 || projectId == null || projectId == undefined) {
                    projectId = @(Model.CostCenterId);
                }

                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/GetMaterialBudgetInfo",
                    dataType: "json",
                    data: { projectId: projectId, boqId: boqId, productId: productId },
                    success: function (data) {
                        if (data) {
                            showEstimate.val(data.EstimateQty);
                            showUnitRate.val(data.UnitRate);
                            showReceivedSoFar.val(data.ReceivedSoFar);
                            showRemaining.val(data.RemainingQty);
                            intputDemand.val(0);
                            totalAmount.val(0);
                        }
                    }
                });
            }
        }

        // make submitable form
        function makeSubmitble(rowId) {
            if (@Model.StatusId == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }
            $('#hidSubmitBRMasterId').val(@Model.BillRequisitionMasterId);
        }

        // make deletable form
        function makeDeletale(rowId) {

            $('#hidBillRequisitionDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        // reset form
        function resetDamageDeleteSlaveForm() {

            $('#BRMasterSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }
    </script>
}