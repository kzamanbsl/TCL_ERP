@model KGERP.Service.ServiceModel.KttlCustomerModel
@{
    ViewBag.Title = "CreateOrEditService";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ClientId)
        @if (Model.ClientId > 0)
        {
            <script type="text/javascript">
                $(document).ready(function () {
                    $("#pnlClientBasicInfo").show();
                    $("#pnlClientAddComment").show();
                    $("#pnlClientAddAttachment").show();
                    $("#pnlClientHistory").show();
                    $("#AfterClientActivity").show();
                    $("#ClientAttachmentId").hide();
                });

                function ValidateEndDate() {
                    if (document.getElementById("pnlClientCreateOrEdit").style.display == "none") {
                        document.getElementById("pnlClientCreateOrEdit").style.display = "block";
                    }
                    else {
                        document.getElementById("pnlClientCreateOrEdit").style.display = "none";
                    }
                }
            </script>
        }
        else
        {
            <script type="text/javascript">
                $(document).ready(function () {
                    $("#pnlClientBasicInfo").hide();
                    $("#pnlClientAddComment").hide();
                    $("#pnlClientAddAttachment").hide();
                    $("#pnlClientHistory").hide();
                    $("#AfterClientActivity").hide();
                    $("#ClientAttachmentId").hide();
                    document.getElementById("pnlClientCreateOrEdit").style.display = "block";
                });
            </script>
        }

     

        <div class="panel panel-info pnlClientCreateOrEdit" id="pnlClientCreateOrEdit" style="display: none ">
            <div class="panel-heading"><b> Customer Entry Form </b></div>
            <div class="panel-body">
                <div class="container-fluid">                     
                    <div class="panel panel-primary">
                        <div class="panel-body">
                            <h4 class="text-on-pannel text-primary"><strong class="text-capitalize"> Family & Emergency Contact  </strong></h4>
                            <div class="form-group">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ContactName, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.ContactName, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ContactRelation, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.ContactRelation, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MotherName, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ContactAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.ContactAddress, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.MaritalStatus, new SelectList(Model.MaritalTypes, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ContactCellNo, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.ContactCellNo, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">

                                        @Html.Label("Spouse Name", htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.Spouse, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel panel-info">
                        <div class="panel-body">
                            <h4 class="text-on-pannel text-primary"><strong class="text-capitalize"> Customer Requirement  </strong></h4>
                            <div class="form-group">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TypeOfClientId, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.TypeOfClientId, new SelectList(Model.TypeOfClients, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.TypeOfClientId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Services, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.Services, new SelectList(Model.Servicess, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.Services, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ServiceYear, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.ServiceYear, new SelectList(Model.ServiceYears), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.ServiceYear, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ResponsiblePerson, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.ResponsiblePerson, new SelectList(Model.ResponsiblePersons, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.ResponsiblePerson, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ClientStatus, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.ClientStatus, new SelectList(Model.ClientStatuss, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.ClientStatus, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SourceOfMedia, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.SourceOfMedia, new SelectList(Model.SourceOfMedias, "value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                            @Html.ValidationMessageFor(model => model.SourceOfMedia, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PromotionalOffer, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.PromotionalOffer, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.PromotionalOffer, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ServicesDescription, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.TextAreaFor(model => model.ServicesDescription, 3, 51, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ServicesDescription, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-info">                        
                        <div class="panel-body">
                            <h4 class="text-on-pannel text-primary"><strong class="text-capitalize"> Meeting Details  </strong></h4>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NextScheduleDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.NextScheduleDate, new { htmlAttributes = new { @class = "datepicker", @style = "width:240px", @placeholder = "dd/mm/yyyy", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.NextScheduleDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PurposeOfMeeting, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.PurposeOfMeeting, new { htmlAttributes = new { @class = "form-control", @placeholder = "Purpose of Meeting", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.PurposeOfMeeting, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastMeetingDate1, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.LastMeetingDate1, new { htmlAttributes = new { @class = "form-control", @id = "lastMeetingDate1", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.LastMeetingDate1, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastMeetingDate2, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.LastMeetingDate2, new { htmlAttributes = new { @class = "form-control", @id = "lastMeetingDate2", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.LastMeetingDate2, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <div class="col-md-offset-10 col-md-2">
                            <input type="submit" value="Save" class="btn btn-success" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
 
    </div>
}

@*<div>
        @Html.ActionLink("Back to List", "Index", new { companyId=18})
    </div>*@

@if (TempData["errMessage"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("This Client No Already Exists");
        };
    </script>
}


@if (TempData["DataSave"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("Data Save Successfully!");
        };
    </script>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")


    <style type="text/css">
        .text-on-pannel {
            background: #fff none repeat scroll 0 0;
            height: auto;
            margin-left: 20px;
            padding: 3px 5px;
            position: absolute;
            margin-top: -47px;
            border: 1px solid #337ab7;
            border-radius: 8px;
        }

        .panel {
            margin-top: 27px !important;
        }

        .panel-body {
            padding-top: 30px !important;
        }

        .spacing-table {
            font-family: 'Helvetica', 'Arial', sans-serif;
            font-size: 12px;
            border-collapse: separate;
            border-spacing: 0 5px; /* this is the ultimate fix */
            width: 100%;
        }

            .spacing-table th {
                text-align: left;
                padding: 5px 5px;
            }

            .spacing-table td {
                border-width: 3px 0;
                /* border-color: darkred;
                            border-style: solid;*/
                background-color: #f1f1f1;
                color: Black;
                padding: 5px 5px;
            }

                .spacing-table td:first-child {
                    /*  border-left-width: 3px;*/
                    border-radius: 5px 0 0 5px;
                }

                .spacing-table td:last-child {
                    /*border-right-width: 3px;*/
                    border-radius: 0 5px 5px 0;
                }

        .image {
            float: left;
            max-height: 50px;
            max-width: 50px;
            margin-right: 10px;
        }

        .name {
            margin: 0;
            padding: 0;
        }

        .username {
            display: block;
            font-weight: bold;
            margin-bottom: 1em;
        }

        .ui-autocomplete {
            max-height: 320px;
            overflow: auto;
        }
    </style>

    <script type="text/javascript">
        $('#ddlDivision').change(function () {
            $.ajax({
                type: "post",
                url: "/KTTLCRM/GetDistrictByDivisionName",
                data: { divisionId: $('#ddlDivision').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var district = "<select>";
                    district = district + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        district = district + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    district = district + '</select>';
                    $('#ddlDistrict').html(district);
                }
            });
        });

        //Bind Upzila base on District Selection
        $('#ddlDistrict').change(function () {
            $.ajax({
                type: "post",
                url: "/KTTLCRM/GetUpzilaByDistrictName",
                data: { disrtictId: $('#ddlDistrict').val() },

                datatype: "json",
                traditional: true,
                success: function (data) {
                    var upazila = "<select>";
                    upazila = upazila + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        upazila = upazila + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    upazila = upazila + '</select>';
                    $('#ddlThanaUpazila').html(upazila);
                }
            });
        });

        //Present Address Division, District and Upzilla
        $('#ddlDivision2').change(function () {
            $.ajax({
                type: "post",
                url: "/KTTLCRM/GetDistrictByDivisionName2",
                data: { disrtictId: $('#ddlDivision2').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var district = "<select>";
                    district = district + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        district = district + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    district = district + '</select>';
                    $('#ddlDistrict2').html(district);
                }
            });
        });

        //Bind Upzila base on District Selection
        $('#ddlDistrict2').change(function () {
            $.ajax({
                type: "post",
                url: "/KTTLCRM/GetUpzilaByDistrictName2",
                data: { name: $('#ddlDistrict2').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var upazila = "<select>";
                    upazila = upazila + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        upazila = upazila + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    upazila = upazila + '</select>';
                    $('#ddlThanaUpazila2').html(upazila);
                }
            });
        });

        function findage() {

            var PresentDay = new Date();
            var dateOfBirth = (new Date(document.getElementById("IdDateOfBirth").value));
            var months = (PresentDay.getMonth() - dateOfBirth.getMonth() +
                (12 * (PresentDay.getFullYear() - dateOfBirth.getFullYear())));
            var age = Math.round(months / 12);
            document.getElementById("IdDateOfAgeDisplay").value = age.toString() + " Years";
        }
        function ageCalculator() {
            //collect input from HTML form and convert into date format
            var userinput = document.getElementById("IdDateOfBirth").value;
            var dob = new Date(userinput);

            //check user provide input or not
            if (userinput == null || userinput == '') {
                document.getElementById("message").innerHTML = "**Choose a date please!";
                return false;
            }

            //execute if the user entered a date
            else {
                //extract the year, month, and date from user date input
                var dobdobYear = dob.getYear();
                var dobdobMonth = dob.getMonth();
                var dobdobDate = dob.getDate();

                //get the current date from the system
                var now = new Date();
                //extract the year, month, and date from current date
                var currentYear = now.getYear();
                var currentMonth = now.getMonth();
                var currentDate = now.getDate();

                //declare a variable to collect the age in year, month, and days
                var age = {};
                var ageString = "";

                //get years
                yearAge = currentYear - dobYear;

                //get months
                if (currentMonth >= dobMonth)
                    //get months when current month is greater
                    var monthAge = currentMonth - dobMonth;
                else {
                    yearAge--;
                    var monthAge = 12 + currentMonth - dobMonth;
                }

                //get days
                if (currentDate >= dobDate)
                    //get days when the current date is greater
                    var dateAge = currentDate - dobDate;
                else {
                    monthAge--;
                    var dateAge = 31 + currentDate - dobDate;

                    if (monthAge < 0) {
                        monthAge = 11;
                        yearAge--;
                    }
                }
                //group the age in a single variable
                age = {
                    years: yearAge,
                    months: monthAge,
                    days: dateAge
                };


                if ((age.years > 0) && (age.months > 0) && (age.days > 0))
                    ageageString = age.years + " years, " + age.months + " months, and " + age.days + " days old.";
                else if ((age.years == 0) && (age.months == 0) && (age.days > 0))
                    ageString = "Only " + age.days + " days old!";
                //when current month and date is same as birth date and month
                else if ((age.years > 0) && (age.months == 0) && (age.days == 0))
                    ageageString = age.years + " years old. Happy Birthday!!";
                else if ((age.years > 0) && (age.months > 0) && (age.days == 0))
                    ageageString = age.years + " years and " + age.months + " months old.";
                else if ((age.years == 0) && (age.months > 0) && (age.days > 0))
                    ageageString = age.months + " months and " + age.days + " days old.";
                else if ((age.years > 0) && (age.months == 0) && (age.days > 0))
                    ageageString = age.years + " years, and" + age.days + " days old.";
                else if ((age.years == 0) && (age.months > 0) && (age.days == 0))
                    ageageString = age.months + " months old.";
                //when current date is same as dob(date of birth)
                else ageString = "Welcome to Earth! <br> It's first day on Earth!";

                //display the calculated age
                return document.getElementById("IdDateOfAgeDisplay").innerHTML = ageString;

            }
        }
    </script>
}


