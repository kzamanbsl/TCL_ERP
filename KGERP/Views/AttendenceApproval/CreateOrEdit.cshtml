@model KGERP.Service.ServiceModel.AttendenceApproveApplicationModel

@{
    ViewBag.Title = "CreateOrEdit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    <div class="row">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div>
                <h4><b>Time Approval Request</b></h4>
            </div>

            <hr style="border-color:#ff0000; padding:0px;margin-top: 5px;margin-bottom: 5px; border-width: 2px;" />
            <div class="form-horizontal">

                <div class="panel panel-info col-md-12">
                    <div class="panel-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Employee Id</label>
                                <div class="col-md-8">
                                    <input type="text" id="empId" value="@ViewBag.EmployeeId" class="form-control" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Employee Name</label>
                                <div class="col-md-8">
                                    <input type="text" value="@ViewBag.EmployeeName" class="form-control disabled" readonly />
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ApproveFor, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @*@Html.DropDownListFor(model => model.ApproveFor, new SelectList(@ViewBag.AppType, "Value", "Text", "True"),  new { @disabled = "disabled", @id = "ddApproval", @class = "dropdownsize form-control" })
                                        @Html.ValidationMessageFor(model => model.ApproveFor, "", new { @class = "text-danger" })*@
                                    <input type="text" id="ddApproval" value="Attendance Modify" name="ApproveFor" class="form-control disabled" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6" id="fromDateDiv">
                            <div class="form-group row">
                                <label class="control-label col-md-4">Start Date</label>
                                <div class="col-md-8">
                                    <input type="datetime" class="form-control datepicker left" id="fromDate" name="FromDateForOnField" value="@ViewBag.FromDate" onchange="ValidateEndDate()" autocomplete="off" required>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6" id="toDateDiv">
                            <div class="form-group row">
                                <label class="control-label col-md-4"> End Date</label>
                                //575 1375

                                <div class="col-md-8">
                                    <input type="datetime" class="form-control datepicker left" id="toDate" name="ToDateForOnField" value="@ViewBag.ToDate" onchange="ValidateEndDate()" autocomplete="off" required>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6" id="attDateForModify">
                            <div class="form-group">
                                @Html.LabelFor(model => model.AttendenceDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.AttendenceDate, new { htmlAttributes = new { @class = "datepicker", @style = "width:240px", @autocomplete = "off", @id = "attendenceDate" } })

                                    @Html.ValidationMessageFor(model => model.AttendenceDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        @*<div class="col-md-6" id="attDateForModify">
                                <div class="form-group row">
                                    <label class="control-label col-md-4">Modifyed Date</label>

                                    <div class="col-md-8">
                                        <input type="datetime" class="form-control datepicker left" id="attendenceDate" name="AttendenceDate" autocomplete="off" required>
                                    </div>
                                </div>

                            </div>*@


                        <div id="timeApproval">

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InTime, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.InTime, new { htmlAttributes = new { @class = "form-control ", @readonly = "readonly", @id = "inTime" } })


                                        @Html.ValidationMessageFor(model => model.InTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OutTime, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.OutTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "outTime" } })

                                        @Html.ValidationMessageFor(model => model.OutTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-md-4">Actual In Time</label>
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.ModifiedInTime, new { htmlAttributes = new { @class = "form-control", @id = "actualInTime" } })
                                        @Html.ValidationMessageFor(model => model.ModifiedInTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-md-4">Actual Out Time</label>
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.ModifiedOutTime, new { htmlAttributes = new { @class = "form-control", @id = "actualOutTime" } })

                                        @Html.ValidationMessageFor(model => model.ModifiedOutTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group purple-border">
                                <label class="control-label col-md-4" id="resonLabel">Reason</label>
                                @* @Html.LabelFor(model => model.Resion, new { @id = "resonLabel", htmlAttributes = new { @class = "control-label col-md-4" } })*@
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.Resion, new { @id = "reson", rows = "3", cols = "49", htmlAttributes = new { @class = "form-control", style = "width: 358px; max-width: 66px;" } })
                                    @Html.ValidationMessageFor(model => model.Resion, "", new { @class = "text-danger" })
                                </div>


                            </div>
                        </div>
                        <div class="col-md-6">
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                
                                    <input type="submit" value="Request" class="btn btn-info pull-right" />
                                    @Html.ActionLink("Cancel", "GetPersonalAttendenceStatus", null, new { @class = "btn btn-danger pull-right", @style = "margin-right:-150px" })
                               
                            </div>
                        </div>


                    </div>

                    @if (@ViewBag.Message != null)
                    {

                        <div class="alert alert-warning" role="alert">
                            <strong>@ViewBag.Message</strong>
                        </div>
                    }


                </div>
            </div>


        }
    </div>



@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

        $(document).ready(function () {
            $(document).ready(function () {
                $(function () {
                    $('.datepicker').datepicker({
                        dateFormat: "mm/dd/yy",
                        showOn: 'both',
                        buttonText: "<i class='fa fa-calendar'></i>",
                        changeMonth: true,
                        changeYear: true,
                        yearRange: "2001:+50"
                    });
                });

            });
            $("#timeApproval").show();
            $("#attDateForModify").show();
            $('#fromDateDiv').hide();
            $('#toDateDiv').hide();
            $("#resonLabel").text("Reason");

        });

        $('#attendenceDate').change(function () {

            var date = $(this).val();
            var empId = $('#empId').val();

            //$('#timeApproval').show();
            $.ajax({
                url: "/AttendenceApproval/GetInOutTime",
                type: "GET",
                data: { "empId": empId, "date": date },
                dataType: "Json"
            }).done(function (result) {
               

                $("#outTime").val(result.OutTime1);
                $("#actualOutTime").val(result.OutTime1);
                $("#inTime").val(result.InTime1);
                $("#actualInTime").val(result.InTime1);

                //$("#emR").val(result.EmployeeId);
                //$("#reson").val(result.EmployeeId);


                //$.each(result, function (i, v) {
                //    $("#tbl tbody").append(
                //        $("#emR").val(v.EmployeeId),
                //        $("#inTime").val(v.InTime)

                //    )
                //});


            }).fail(function (err) {
                //console.log(err);
            });
        });

        $('#ddApproval').change(function () {
            var val = $(this).val();

            if (val == "Attendance Modify") {
                $('#timeApproval').show();
                $('#attDateForModify').show();
                $('#fromDateDiv').hide();
                $('#toDateDiv').hide();
                $("#resonLabel").text("Reason");

            }
            else {
                $('#timeApproval').hide();
                $('#attDateForModify').hide();
                $('#fromDateDiv').show();
                $('#toDateDiv').show();
                $("#resonLabel").text("Location");
            }
        });


        function ValidateEndDate() {
            var startDate = $('#fromDate').val();
            var endDate = $('#toDate').val();
            if (startDate != '' && endDate != '') {
                if (Date.parse(startDate) > Date.parse(endDate)) {
                    $('#toDate').val('');
                    alert("Start Date should not be greater than End Date");
                }
            }
            return false;
        }

    </script>
}

