@model KGERP.ViewModel.KgReCrmViewModel
@{

    ViewBag.Title = "Add or Edit";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Payment.PaymentId)
    @Html.HiddenFor(model => model.Payment.CompanyId)
    @Html.HiddenFor(model => model.Payment.ClientId, new { id = "hfClientId" })

    <div class="form-horizontal">
        <div class="panel panel-primary">
            <div class="panel-heading" style="background-color:#4CAF50"><b>Payment</b></div>
            <div class="panel-body">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.FileNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Payment.FileNo, new { htmlAttributes = new { @class = "form-control", @id = "txtFileNo", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.FileNo, "", new { @class = "text-danger" })
                            @*<input type="text" id="txtFileNo" name="FileNo" class="form-control col-md-6" />*@
                            @*<input type="hidden" id="hfFileNo" name="ClientId" />*@

                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBox("Name", null, new { @class = "form-control", @readonly = "readonly", @id = "txtName" })
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBox("Address", null, new { @class = "form-control", @readonly = "readonly", @id = "txtAddress" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBox("Phone", null, new { @class = "form-control", @readonly = "readonly", @id = "txtPhone" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Due Amount", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBox("DueAmount", null, new { @class = "form-control", @readonly = "readonly", @id = "txtDueAmount" })
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.ProjectId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.Payment.ProjectId, new SelectList(Model.KGREProjects, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlKGREProject" })
                            @Html.ValidationMessageFor(model => model.Payment.ProjectId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Tran Date", htmlAttributes: new { @class = "control-label col-md-3" })
                        @*@Html.LabelFor(model => model.Payment.TransactionDate, htmlAttributes: new { @class = "control-label col-md-3" })*@
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Payment.TransactionDate, new { htmlAttributes = new { @class = "datepicker", @id = "txtPaymentDate", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.TransactionDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.PaymentModeId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.Payment.PaymentModeId, new SelectList(Model.PaymentModes, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlPaymentMethod" })
                            @Html.ValidationMessageFor(model => model.Payment.PaymentModeId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                         
                        @Html.LabelFor(model => model.Payment.TransactionType, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            Debit
                            @Html.RadioButtonFor(model => model.Payment.TransactionType, "DB", new { @id = "rbtnDebit" })
                            Credit
                            @Html.RadioButtonFor(model => model.Payment.TransactionType, "CR", new { @id = "rbtnCredit" })
                            @Html.ValidationMessageFor(model => model.Payment.TransactionType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.PaymentFor, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.Payment.PaymentFor, new SelectList(Model.PaymentFors, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlPaymentFor" })
                            @Html.ValidationMessageFor(model => model.Payment.PaymentFor, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.InAmount, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.Payment.InAmount, null, new { @class = "form-control", @id = "txtInAmount" })
                            @Html.ValidationMessageFor(model => model.Payment.InAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="bank col-md-6" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.BankId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.Payment.BankId, new SelectList(Model.Banks, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "dropdownsize form-control", @id = "ddlBank" })
                            @Html.ValidationMessageFor(model => model.Payment.BankId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="bank col-md-6" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.ProductType, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            Cheque
                            @Html.RadioButtonFor(model => model.Payment.ProductType, "C", new { @id = "rbtnCheque" })
                            Remote Deposit
                            @Html.RadioButtonFor(model => model.Payment.ProductType, "R", new { @id = "rbtnRemoteDeposit" })
                        </div>
                    </div>
                </div>

                <div class="cheque-no col-md-6" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.ChkNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Payment.ChkNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.ChkNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="remote-deposit col-md-6" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.BranchName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Payment.BranchName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.BranchName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="cash col-md-6" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.MoneyReceiptNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Payment.MoneyReceiptNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.MoneyReceiptNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment.Notes, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextAreaFor(model => model.Payment.Notes, 3, 150, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Payment.Notes, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <div class="col-md-offset-6">
                            <input type="submit" value="Submit" onclick="javascript: return SubmitForm();" class="btn btn-success pull-right" style="margin-left:2px" />
                            <a href="@Url.Action("Index","KGREPayment",new { companyId=Model.Payment.CompanyId})" class="btn btn-danger pull-right">
                                Close <i class="fa fa-close" aria-hidden="true"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
    <script>
        function SubmitForm() {
            var r = confirm("Are you sure to submit?");
            if (r == false) {
                return false;
            }
        }

        $(function () {
            $("#txtFileNo").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/KGRECRM/AutoCompleteByFileNo/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {

                    $("#hfClientId").val(i.item.val); 
                },
                minLength: 1,
                change: function (event, ui) {
                    loadCustomerInformation(ui.item.val);
                }

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });


        function loadCustomerInformation(customerId) {
            $.ajax({
                url: '/KGRECRM/GetCustomerPaymentInformation?customerId=' + customerId,
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    var result = JSON.parse(data);
                    $('#txtName').val(result.FullName)
                    $('#txtAddress').val(result.PermanentAddress)
                    $('#txtPhone').val(result.MobileNo)
                    $('#txtDueAmount').val(result.Due)
                    $('#ddlKGREProject').val(result.ProjectId)
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        }

        $('#txtInAmount').keyup(function () {
            var dueAmount = $('txtDueAmount').val() * 1;
            var inAmount = $('txtInAmount').val() * 1;
            //alert(dueAmount);
            if (inAmount > dueAmount) {
                alert('Inputed Amount over than Due Amount');
            }

        });

        $('#ddlPaymentMethod').change(function () {
            if ($('#ddlPaymentMethod').val() == 2) {
                $('.bank').show();
                $('.cash').hide();
            }
            if ($('#ddlPaymentMethod').val() == 4) {
                $('.cash').show();
                $('.bank').hide();
                $('.remote-deposit').hide();
                $('.cheque-no').hide();

            }
        });
        $('input[type="radio"]').click(function () {
            var inputValue = $(this).attr("value");
            if (inputValue == 'R') {
                $('.remote-deposit').show();
            }
            else {
                $('.remote-deposit').hide();
            }

            if (inputValue == 'C') {
                $('.cheque-no').show();
            }
            else {
                $('.cheque-no').hide();
            }

        });

    </script>

}



