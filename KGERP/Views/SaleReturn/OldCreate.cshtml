@model KGERP.ViewModel.SaleReturnViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    span.error {
        display: block;
        visibility: hidden;
        color: red;
        font-size: 90%;
    }

    tr.error {
        background-color: rgba(255,0,0,0.35);
    }

    .remove {
        width: 40px;
        height: 25px;
        font-size: 16px;
        background-color: #dd4b39;
        color: white;
        border: none;
        border-radius: 15px;
    }
</style>

@using (Html.BeginForm("OldCreate", "SaleReturn", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.SaleReturn.CompanyId)
    @Html.HiddenFor(model => model.SaleReturn.ProductType)


    <div class="row">
        <span style="font-size:20px">Old Sales Return</span>
        <hr style="border-color:#ff0000; padding:0px;margin-top: 5px;margin-bottom: 10px; border-width: 2px;" />
    </div>

    <div class="row">
        <div class="form-horizontal">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.SaleReturnNo, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SaleReturn.SaleReturnNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", } })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.ReturnDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SaleReturn.ReturnDate, new { htmlAttributes = new { @class = "datepicker", @autocomplete = "off", } })
                        @Html.ValidationMessageFor(model => model.SaleReturn.ReturnDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>



            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.CustomerId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.HiddenFor(x => x.SaleReturn.CustomerId, new { id = "CustomerId", name = "CustomerId" })
                        @Html.EditorFor(model => model.SaleReturn.CustomerName, new { htmlAttributes = new { @class = "form-control", @name = "CustomerName", @id = "txtCustomerName" } })
                        @Html.ValidationMessageFor(model => model.SaleReturn.CustomerName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Proprietor Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBox("Name", null, new { @class = "form-control", @readonly = "readonly", @id = "txtName" })

                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBox("Address", null, new { @class = "form-control", @readonly = "readonly", @id = "txtAddress" })

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBox("Phone", null, new { @class = "form-control", @readonly = "readonly", @id = "txtPhone" })

                    </div>
                </div>
            </div>

            @*<div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.OrderDeliverId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.HiddenFor(x => x.SaleReturn.OrderDeliverId, new { id = "OrderDeliverId", name = "OrderDeliverId" })
                        @Html.EditorFor(model => model.SaleReturn.InvoiceNo, new { htmlAttributes = new { @class = "form-control", @name = "InvoiceNo", @id = "txtInvoiceNo" } })
                        @Html.ValidationMessageFor(model => model.SaleReturn.CustomerName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.StockInfoId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.SaleReturn.StockInfoId, new SelectList(Model.StockInfos, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                        @Html.ValidationMessageFor(model => model.SaleReturn.StockInfoId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.ReceivedBy, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SaleReturn.ReceiverName, new { htmlAttributes = new { @class = "form-control", @name = "receiverName", @id = "receiverName" } })
                        @Html.ValidationMessageFor(model => model.SaleReturn.ReceivedBy, "", new { @class = "text-danger" })
                        @Html.HiddenFor(x => x.SaleReturn.ReceivedBy, new { @id = "receivedBy", @name = "receivedBy" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaleReturn.Reason, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SaleReturn.Reason, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SaleReturn.Reason, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

    </div>

    <table class="table table-responsive">
        <tr style="background-color:#3c8dbc;color:#ffffff">
            <th>Product</th>
            <th>Return Qty</th>
            <th>Rate</th>
            <th>Amount</th>
            <th>&nbsp;</th>
        </tr>
        <tr class="mycontainer" id="mainrow">
            <td style="width:275px">
                <input type="text" id="product" name="product" class="form-control" />
                <input type="hidden" id="hfProductId" name="productId" />
            </td>
            <td>
                <input type="text" id="qty" class="qty form-control" autocomplete="off" style="text-align:right" />
                <span class="error">Valid quantity required</span>
            </td>

            <td>
                <input type="text" id="rate" class="qty form-control" autocomplete="off" style="text-align:right" />
                <span class="error">Valid Rate required</span>
            </td>

            <td>
                <input type="text" id="amount" class="qty form-control" autocomplete="off" style="text-align:right" readonly />
            </td>
            <td>
                <button type="button" id="add" class="btn btn-primary pull-right"><i class="fa fa-plus-circle"></i>&nbsp; Add</button>
            </td>
        </tr>
    </table>
    <div id="orderItems">
        <table class="table" id="orderdetailsItems">
            <thead>
                <tr style="background-color:#3c8dbc;color:#ffffff;font-weight:bold">
                    <th>SL</th>
                    <th>Product</th>
                    <th>Return Qty</th>
                    <th>Rate</th>
                    <th>Amount</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="itemDetails"></tbody>
        </table>
        <span id="orderItemError" class="danger"></span>
    </div>

    <div class="row">
        <div class="col-md-offset-9 pull-right">
            <table>
                <tr>
                    <td></td>
                    <td>
                        <input id="submit" type="submit" onclick='return confirm("Are you sure you want to Submit");' value="Submit" class="btn btn-success pull-right" style="padding:5px 10px;margin-top:5px" />
                        <a href="@Url.Action("OldIndex",new { companyId=Model.SaleReturn.CompanyId,productType=Model.SaleReturn.ProductType})" id="cancel" class="btn btn-danger pull-right" style="padding:5px 10px;margin-right:10px;margin-top:5px">Cancel</a>

                    </td>
                </tr>
            </table>
        </div>
    </div>

}

<script src="~/Scripts/ApplicationScripts/Inventory_Feed/SaleReturn/OldSaleReturn.js"></script>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

        $(function () {
            $("#receiverName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#receivedBy").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });
        $(function () {
            $("#txtCustomerName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Vendor/AutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#CustomerId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {
                    loadCustomerInformation(ui.item.val);
                }
            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

        function loadCustomerInformation(customerId) {
            $.ajax({
                url: '/Vendor/GetCustomerInformation?customerId=' + customerId,
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    var result = JSON.parse(data);
                    $('#txtName').val(result.ContactName);
                    $('#txtAddress').val(result.Address);
                    $('#txtPhone').val(result.Phone);
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        }


        $("#txtInvoiceNo").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/OrderDeliver/InvoiceNoAutoComplete?customerId=' + $("#CustomerId").val(),
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
                console.log(i);
                $("#OrderDeliverId").val(i.item.val);
            }
        })

        $('#txtInvoiceNo').change(function () {
            var orderDeliverId = $('#OrderDeliverId').val();
            $.ajax({
                url: '/SaleReturn/GetDeliveredItem?orderDeliverId=' + orderDeliverId + "",
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    $('#deliveredItems').html(data);
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        });
        //-------------------------------------------------------------------------------
        $(function () {
            $("#product").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Products/AutoComplete/',
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#hfProductId").val(i.item.val);
                },
            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

    </script>
}
