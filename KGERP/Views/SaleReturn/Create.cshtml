@model KGERP.Service.ServiceModel.SaleReturnModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var message = TempData["message"];
}
<style>
    span.error {
        display: block;
        visibility: hidden;
        color: red;
        font-size: 90%;
    }

    tr.error {
        background-color: rgba(255,0,0,0.35);
    }

    .remove {
        width: 40px;
        height: 25px;
        font-size: 16px;
        background-color: #dd4b39;
        color: white;
        border: none;
        border-radius: 15px;
    }
</style>

<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }
</style>
<section class="content-header">
    <h1>
        @if (Model.SaleReturnId > 0)
        {
            <span>SaleReturn No <a target="_blank" href="#">@Model.SaleReturnNo</a></span>
        }
        else
        {
            <span>SaleReturn Information</span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">SaleReturn</li>
    </ol>
</section>

@if (Model.SaleReturnId == 0)
{
    using (Html.BeginForm("Create", "SaleReturn", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.CompanyId)
        @Html.HiddenFor(model => model.ProductType)
        <section class="content">
            <div class="row">
                <div class="form-horizontal">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SaleReturnNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.SaleReturnNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "datepicker", @autocomplete = "off", } })
                                @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.HiddenFor(x => x.CustomerId, new { id = "CustomerId", name = "CustomerId" })
                                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @name = "CustomerName", @id = "txtCustomerName" } })
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Proprietor Name", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.TextBox("Name", null, new { @class = "form-control", @readonly = "readonly", @id = "txtName" })

                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.TextBox("Address", null, new { @class = "form-control", @readonly = "readonly", @id = "txtAddress" })

                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.TextBox("Phone", null, new { @class = "form-control", @readonly = "readonly", @id = "txtPhone" })

                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderDeliverId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.HiddenFor(x => x.OrderDeliverId, new { id = "OrderDeliverId", name = "OrderDeliverId" })
                                @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @class = "form-control", @name = "InvoiceNo", @id = "txtInvoiceNo" } })
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StockInfoId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.StockInfoId, new SelectList(Model.StockInfos, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReceivedBy, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.ReceiverName, new { htmlAttributes = new { @class = "form-control", @name = "receiverName", @id = "receiverName" } })
                                @Html.ValidationMessageFor(model => model.ReceivedBy, "", new { @class = "text-danger" })
                                @Html.HiddenFor(x => x.ReceivedBy, new { @id = "receivedBy", @name = "receivedBy" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" id="deliveredItems">

            </div>
        </section>
    }

}
else
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(x => x.CompanyId, new { id = "CompanyFK" })
                <div class="box-danger">
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="col-md-1"> </div>
                        <div class="col-md-10">
                            <table class="table">
                                <tr>
                                    <td width="15%"><b>Return Invoice</b></td>
                                    <td width="1%">:</td>
                                    <th width="34%">@Model.SaleReturnNo</th>
                                    <td width="15%"><b>Return Date</b></td>
                                    <td width="1%">:</td>
                                    <td width="34%">@Model.ReturnDate.ToString("dd-MM-yyyy")</td>
                                </tr>
                                <tr>
                                    <td>Proprietor Name</td>
                                    <td>:</td>
                                    <td>@Model.ProprietorName</td>
                                    <td>Address</td>
                                    <td>:</td>
                                    <td>@Model.ProprietorAddress</td>
                                </tr>
                                <tr>
                                    <td>Proprietor Phone</td>
                                    <td>:</td>
                                    <td>@Model.ProprietorPhone</td>
                                    <td>Delivery Invoice</td>
                                    <td>:</td>
                                    <td>@Model.InvoiceNo</td>
                                </tr>
                                <tr>
                                    <td>Warehouse</td>
                                    <td>:</td>
                                    <td>@Model.WareHouseName</td>
                                    <td>Received By</td>
                                    <td>:</td>
                                    <td>@Model.ReceiverName</td>
                                </tr>
                                <tr>
                                    <td>Reason</td>
                                    <td>:</td>
                                    <td colspan="4">@Model.Reason</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-1"> </div>

                        <div class="box-header" style="clear:both">
                            <h4><b>Item List</b> </h4>
                        </div>
                        <div class="table-responsive col-md-12 text-nowrap">
                            <table id="KgErpDataTable" class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>SL</th>
                                        <th class="center">Code</th>
                                        <th class="center">Product Name </th>
                                        <th class="center">Unit</th>
                                        <th class="center">Base</th>
                                        <th class="center">Cash</th>
                                        <th class="center">Carrying</th>
                                        <th class="center">Special</th>
                                        <th class="center">Addition</th>
                                        <th class="center">Ready to Return</th>
                                        <th class="center">Return Rate</th>
                                        <th class="center">Return Amount</th>

                                    </tr>
                                </thead>
                                @{
                                    int sl = 0;
                                    decimal? totalAmount = 0;
                                }
                                <tbody>
                                    @foreach (var item in Model.ItemList)
                                    {
                                        totalAmount += item.Qty * ((item.Rate + item.AdditionPrice) - (item.BaseCommission + item.CashCommission + item.CarryingCommission + item.SpecialDiscount));
                                    <tr>
                                        <td>@(++sl)</td>
                                        <td>@item.ProductCode</td>
                                        <td>@item.ProductName</td>
                                        <td>@item.Unit</td>
                                        <td>@item.BaseCommission</td>
                                        <td>@item.CashCommission</td>
                                        <td>@item.CarryingCommission</td>
                                        <td>@item.SpecialDiscount</td>
                                        <td>@item.AdditionPrice</td>
                                        <td>@item.Qty</td>
                                        <td>@((item.Rate + item.AdditionPrice ) - (item.BaseCommission + item.CashCommission + item.CarryingCommission + item.SpecialDiscount)) </td>
                                        <td>@(item.Qty * ((item.Rate + item.AdditionPrice ) - (item.BaseCommission + item.CashCommission + item.CarryingCommission + item.SpecialDiscount))) </td>
                                    </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th></th>
                                        <th colspan="10">
                                            Total Return Amount
                                        </th>
                                        <th class="center">@totalAmount</th>

                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                    </div>
                    <div class="box-footer">
                        <div class="row">
                            <div class="col-md-3">
                                <a href="@Url.Action("GetVoucherReport","Report", new { companyId = Model.CompanyId, voucherId = Model.VoucherId ,reportName =""})" style="width:100%" target="_blank" class="btn btn-primary">
                                    Voucher Report
                                </a>
                            </div>
                            <div class="col-md-4">
                                <a target="_blank" class="btn btn-warning btn-block" style="width:100%" href="#">Challan Report of @Model.SaleReturnNo</a>
                            </div>
                            <div class="col-md-5">
                                @if (!Model.IsFinalized)
                                {
                                    <a onclick="makeSalesReturnSubmitable(@Model.SaleReturnId);" class="btn btn-success btn-block" style="width:100%" data-toggle="modal" data-target="#submitProdReferenceModal" title="Submit" data-placement="top"><i class="fa fa-fingerprint" aria-hidden="true"></i>Submit</a>

                                }
                                else
                                {
                                    <button class="btn btn-success btn-block" style="width:100%" disabled="disabled">Submitted</button>
                                }
                            </div>
                        </div>
                    </div>
                   
                </div>
            </div>
        </div>
    </section>
}


@using (Html.BeginForm("SubmittedSalesReturn", "SaleReturn", FormMethod.Post, new { id = "submitGCCLPOReceivingSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitProdReferenceModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Submit</b></h5>
                </div>
                <div class="modal-body">

                    @Html.HiddenFor(model => model.CompanyId, new { id = "submitCompanyFK" })
                    @Html.HiddenFor(model => model.SaleReturnId, new { id = "submitSaleReturnId" })
                    
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Submit this Sales Return?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

    function makeSalesReturnSubmitable(rowId) {
         $("#submitSaleReturnId").val(rowId)
         $('#submitCompanyFK').val("@Model.CompanyId");
         $('#submitActionId').val(10);
    }


         var message = '@message';
    if(message){
        alert(message);
    }

        $(function () {
            $("#receiverName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#receivedBy").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });
        $(function () {
            $("#txtCustomerName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Vendor/AutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#CustomerId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {
                    loadCustomerInformation(ui.item.val);
                }
            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

        function loadCustomerInformation(customerId) {
            $.ajax({
                url: '/Vendor/GetCustomerInformation?customerId=' + customerId,
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    var result = JSON.parse(data);
                    $('#txtName').val(result.ContactName);
                    $('#txtAddress').val(result.Address);
                    $('#txtPhone').val(result.Phone);
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        }


        $("#txtInvoiceNo").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/OrderDeliver/InvoiceNoAutoComplete?customerId=' + $("#CustomerId").val(),
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
              
                $("#OrderDeliverId").val(i.item.val);
            }
        })

        $('#txtInvoiceNo').change(function () {
            var orderDeliverId = $('#OrderDeliverId').val();
            $.ajax({
                url: '/SaleReturn/GetDeliveredItem?orderDeliverId=' + orderDeliverId + "",
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    $('#deliveredItems').html(data);
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        });

    </script>
}

