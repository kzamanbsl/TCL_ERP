@model KGERP.ViewModel.StoreViewModel

@{
    ViewBag.Title = "Store Detail Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        padding: 2px 0px 2px 0px;
    }
</style>

@using (Html.BeginForm("RMStoreCreateOrEdit", "Store", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Store.CompanyId)
    <div class="row">
        <table class="table table-responsive">
            <tr style="background-color:#4CAF50;color:#FFFFFF">
                <td colspan="10"><b>MRR Information</b></td>
            </tr>

            <tr>
                <td>
                    MRR No
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Store.ReceivedCode, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Store.Type, new { @Value = "R" })
                </td>
                <td>
                    MRR Date
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Store.ReceivedDate, htmlAttributes: new { @style = "width:240px", @class = "datepicker", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.Store.ReceivedDate, "", new { @class = "text-danger" })
                </td>

                <td>
                    Warehouse

                </td>
                <td>
                    @Html.DropDownListFor(model => model.Store.StockInfoId, new SelectList(Model.StockInfos, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                    @Html.ValidationMessageFor(model => model.Store.StockInfoId, "", new { @class = "text-danger" })
                </td>

            </tr>



            <tr>
                <td>
                    PO No
                </td>
                <td>
                    @Html.DropDownListFor(model => model.Store.PurchaseOrderId, new SelectList(Model.PurchaseOrders, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlPurchaseOrderNo" })
                    @Html.ValidationMessageFor(model => model.Store.PurchaseOrderId, "", new { @class = "text-danger" })
                </td>
                <td>
                    PO Date
                </td>

                <td>

                    @Html.Editor("PODate", new { htmlAttributes = new { @style = "width:240px", @readonly = "readonly", @class = "datepicker" } })
                </td>
                <td>
                    Demand No
                </td>
                <td>

                    @Html.TextBox("DemandNo", null, new { @readonly = "readonly", @class = "form-control" })
                </td>


            </tr>



            <tr>
                <td>
                    Demand Date

                </td>
                <td>
                    @Html.Editor("DemandDate", new { htmlAttributes = new { @style = "width:240px", @class = "datepicker" } })

                </td>


                <td>
                    Supplier

                </td>
                <td>
                    @Html.HiddenFor(model => model.Store.VendorId, htmlAttributes: new { @id = "hfSupplierId", @class = "form-control", @autocomplete = "off" })
                    @Html.TextBox("Supplier", null, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })

                </td>

                <td>
                    Challan No

                </td>
                <td>
                    @Html.EditorFor(model => model.Store.ChallanNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Store.ChallanNo, "", new { @class = "text-danger" })
                </td>

            </tr>
            <tr>
                <td>
                    Challan Date
                </td>
                <td>
                    @Html.EditorFor(model => model.Store.ChallanDate, new { htmlAttributes = new { @style = "width:240px", @class = "datepicker", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Store.ChallanNo, "", new { @class = "text-danger" })
                </td>
                <td>
                    Driver Name
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Store.DriversName, htmlAttributes: new { @class = "form-control" })
                </td>
                <td>
                    Truck No
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Store.TruckNo, htmlAttributes: new { @class = "form-control" })
                </td>
            </tr>


            <tr>
                <td>
                    Unloading Date
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Store.UnloadingDate, htmlAttributes: new { @style = "width:240px", @class = "datepicker" })
                </td>

                <td>
                    @*@Html.LabelFor(model => model.ChallanNo, htmlAttributes: new { @class = "control-label" })*@
                    Truck Fare
                </td>
                <td>
                    @Html.EditorFor(model => model.Store.TruckFare, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Store.TruckFare, "", new { @class = "text-danger" })
                </td>

                <td>
                    Labour Bill
                </td>
                <td>
                    @Html.EditorFor(model => model.Store.LabourBill, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Store.LabourBill, "", new { @class = "text-danger" })
                </td>

            </tr>
            <tr>
                <td>
                    Received By
                </td>
                <td>
                    @Html.EditorFor(model => model.Store.ReceiverName, new { htmlAttributes = new { @class = "form-control", @name = "receiverName", @id = "receiverName" } })
                    @Html.HiddenFor(x => x.Store.ReceivedBy, new { @id = "receivedBy", @name = "receivedBy" })
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </table>

    </div>
    <div class="row" id="purchaseOrderItems">

    </div>


}


<script src="~/Scripts/ApplicationScripts/Inventory_Feed/Stock/StockEntry.js"></script>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

        //$(function () {
        //    $('.datepicker').datepicker({
        //        dateFormat: "mm/dd/yy",
        //        showOn: 'both',
        //        buttonText: "<i class='fa fa-calendar'></i>",
        //        changeMonth: true,
        //        changeYear: true,
        //        yearRange: "2001:+50"
        //    });
        //});
        $(function () {
            $("#receiverName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#receivedBy").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });



        $(function () {
            $("#ddlPurchaseOrderNo").change(function () {
                var purchaseOrderId = $("#ddlPurchaseOrderNo option:selected").val();
                $.ajax({
                    url: '/PurchaseOrder/GetPurchaseOrderInfo?purchaseOrderId=' + purchaseOrderId + "",
                    type: "GET",
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (data) {
                        var result = JSON.parse(data);

                        var purchaseDate = new Date(result.PurchaseDate);
                        var demandDate = new Date(result.Demand.DemandDate);


                        console.log(result);
                        $('#PODate').val(getFormattedDate(purchaseDate))
                        $('#DemandNo').val(result.Demand.DemandNo)
                        $('#DemandDate').val(getFormattedDate(demandDate))
                        $('#Supplier').val(result.Vendor.Name)
                        $('#hfSupplierId').val(result.Vendor.VendorId)

                        $.ajax({
                            url: '/PurchaseOrder/GetQCItemList?purchaseOrderId=' + purchaseOrderId + '&companyId=' + result.CompanyId + "",
                            type: "GET",
                            async: true,
                            processData: false,
                            cache: false,
                            success: function (data) {
                                $('#purchaseOrderItems').html(data);
                            },
                            error: function (xhr) {
                                alert('error');
                            }
                        });
                    },
                    error: function (xhr) {
                        alert('error');
                    }
                });
            });
        });


        function getFormattedDate(date) {
            let year = date.getFullYear();
            let month = (1 + date.getMonth()).toString().padStart(2, '0');
            let day = date.getDate().toString().padStart(2, '0');

            return day + '/' + month + '/' + year;
        }
    </script>
}
