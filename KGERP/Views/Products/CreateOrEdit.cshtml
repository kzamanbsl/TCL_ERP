@model KGERP.ViewModel.ProductViewModel
@{
    ViewBag.Title = "Create";
}


@using (Html.BeginForm("CreateOrEdit", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <span style="font-size:25px">
            @if (Model.Product.ProductType.Equals("F"))
            {
                <span>Finish Product @Model.Product.ButtonName</span>
            }
            else
            {
                <span>Raw Material @Model.Product.ButtonName</span>
            }

        </span>
        <hr style="border-color:#ff0000; padding:0px;margin-top: 5px;margin-bottom: 5px; border-width: 2px;" />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Product.ProductId)
        @Html.HiddenFor(model => model.Product.CompanyId)
        @Html.HiddenFor(model => model.Product.ProductType)
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ProductCategoryId, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Product.ProductCategoryId, new SelectList(Model.ProductCategories, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlProductCategory" })
                @Html.ValidationMessageFor(model => model.Product.ProductCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ProductSubCategoryId, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Product.ProductSubCategoryId, new SelectList(Model.ProductSubCategories, "Value", "Text"), "--Select--", new { @class = "dropdownsize form-control", @id = "ddlProductSubCategory" })
                @Html.ValidationMessageFor(model => model.Product.ProductCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ProductName, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Product.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ShortName, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Product.ShortName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.ShortName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ProductCode, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Product.ProductCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Product.ProductCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.UnitId, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Product.UnitId, new SelectList(Model.Units, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                @Html.ValidationMessageFor(model => model.Product.UnitId, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.Product.ProductType.Equals("F"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Product.DieSize, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Product.DieSize, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.DieSize, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.PackSize, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Product.PackSize, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.PackSize, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Product.UnitPrice, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Product.UnitPrice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Product.TPPrice, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Product.TPPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.TPPrice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Product.PackId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.PackName, new { htmlAttributes = new { @class = "form-control", @id = "productName" } })
                    @Html.HiddenFor(model => model.Product.PackId, new { id = "hfProductId" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Product.ProcessLoss, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Product.ProcessLoss, new { htmlAttributes = new { @class = "form-control", @min = "0", max = "100" } })
                    @Html.ValidationMessageFor(model => model.Product.ProcessLoss, "", new { @class = "text-danger" })
                </div>
            </div>
        }


        <div class="form-group">
            @Html.LabelFor(model => model.Product.OrderNo, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Product.OrderNo, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Product.IsActive)
            </div>

        </div>
        <div class="col-md-offset-4 col-md-4">
            <div class="form-group">
                <a href="@Url.Action("Index",new {companyId=Model.Product.CompanyId, productType=Model.Product.ProductType})" class="btn btn-danger">
                    <span class="glyphicon glyphicon-remove-circle"></span>   Close
                </a>
                <button type="submit" class="btn btn-primary" onclick="javascript: return SubmitForm();" style="margin-left: 20px;"><span class="glyphicon glyphicon-floppy-disk"></span>@Model.Product.ButtonName</button>

            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

        function SubmitForm() {
            var r = confirm("Are you sure to save this?");
            if (r == false) {
                return false;
            }
        }
        $('#ddlProductCategory').change(function () {
            $.ajax({
                type: "post",
                url: "/ProductSubCategories/GetProductSubCategorySelectModelsByProductCategory",
                data: { productCategoryId: $('#ddlProductCategory').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var ProductSubCategory = "<select>";
                    ProductSubCategory = ProductSubCategory + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        ProductSubCategory = ProductSubCategory + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    ProductSubCategory = ProductSubCategory + '</select>';
                    $('#ddlProductSubCategory').html(ProductSubCategory);
                }
            });
        });


        $(function () {
            $("#productName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Products/AutoCompleteByCategory/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"R"}',
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#hfProductId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {
                    loadUnit(ui.item.val);
                }

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });


    </script>

}
