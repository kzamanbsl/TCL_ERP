@model KGERP.ViewModel.ProductViewModel
@{
    ViewBag.Title = "Create";
}


@using (Html.BeginForm("CreateOrEdit", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <span style="font-size:25px">Product</span>
        <hr style="border-color:#32527B; padding:0px;margin-top: 10px;margin-bottom: 10px; border-width: 2px;" />
    </div>

    <div class="form-horizontal">
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Product.ProductId)
            @Html.Hidden("type", Request.QueryString["type"])

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ProductCode, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.ProductCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Product.ProductCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ProductCategoryId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Product.ProductCategoryId, new SelectList(Model.ProductCategories, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlProductCategory" })
                        @Html.ValidationMessageFor(model => model.Product.ProductCategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ProductSubCategoryId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Product.ProductSubCategoryId, new SelectList(Model.ProductSubCategories, "Value", "Text"), "--Select--", new { @class = "dropdownsize form-control", @id = "ddlProductSubCategory" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ProductName, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Product.ProductName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ShortName, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.ShortName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Product.ShortName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            @*<div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.EngineNo, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.EngineNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Product.EngineNo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.ChassisNo, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.ChassisNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Product.ChassisNo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@


            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.UnitId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Product.UnitId, new SelectList(Model.Units, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                        @Html.ValidationMessageFor(model => model.Product.UnitId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.UnitPrice, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.UnitPrice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.OrderNo, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.OrderNo, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Product.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Product.IsActive)
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                <div class="form-group">
                    <input type="submit" value="@Model.Product.ButtonName" id="apply" class="btn btn-primary pull-right" />
                    <a href="@Url.Action("Index",new {companyId=Request.QueryString["companyId"], type=Request.QueryString["type"]})" class="btn btn-danger pull-right" style="margin-right:8px">
                        Close <i class="fa fa-close" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

        $('#ddlProductCategory').change(function () {
            $.ajax({
                type: "post",
                url: "/ProductSubCategories/GetProductSubCategorySelectModelsByProductCategory",
                data: { productCategoryId: $('#ddlProductCategory').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var ProductSubCategory = "<select>";
                    ProductSubCategory = ProductSubCategory + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        ProductSubCategory = ProductSubCategory + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    ProductSubCategory = ProductSubCategory + '</select>';
                    $('#ddlProductSubCategory').html(ProductSubCategory);
                }
            });
        });


        $(function () {
            $("#productName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Products/AutoCompleteByCategory/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"R"}',
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#hfProductId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {
                    loadUnit(ui.item.val);
                }

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });


    </script>

}
