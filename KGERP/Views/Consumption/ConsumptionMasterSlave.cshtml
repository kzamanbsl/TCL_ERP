@model KGERP.Service.ServiceModel.ConsumptionModel
@using KGERP.Utility;

@{
    ViewData["Title"] = "New Consumption";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }

    .ui-datepicker-trigger {
        width: 37px !important;
        height: 33px !important;
        margin-left: 5px !important;
    }

    .dateCustom {
        width: 90% !important;
        border-radius: 1px !important;
        border: 1px solid #d2d6de !important;
        height: 33px !important;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model?.ConsumptionMasterId > 0)
        {
            <span>
                New Consumption
            </span>
        }
        else
        {
            <span>
                New Consumption
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">New Consumption</li>
    </ol>
</section>
@using (Html.BeginForm("ConsumptionMasterSlave", "Consumption", FormMethod.Post, new { id = "ConsMasterSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ConsumptionMasterId, new { id = "hidConsMasterId", value = 1 })
                @Html.HiddenFor(model => model.ConsumptionDetailsId, new { id = "hidConsDetailId", value = 1 })
                @*@Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })*@
                <div class="box-danger">


                    <div class="box-body">
                        @if (Model.ConsumptionMasterId > 0)
                        {@Html.HiddenFor(model => model.BOQItemId, new { id = "hidBoqIteamId" })
                        <div class="row mb-5">
                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:17% !important">Project Type </th>
                                        <th>:</th>
                                        <td>@Model.ProjectTypeName</td>

                                        <th style="width:17% !important">Consumption Date</th>
                                        <th>:</th>
                                        <td>
                                            @Model.ConsumptionDate.ToString("dd/MM/yyyy")
                                        </td>
                                    </tr>

                                    <tr>
                                        <th style="width:17% !important">Project Name </th>
                                        <th>:</th>
                                        <td>@Model.CostCenterName</td>

                                        <th style="width:17% !important">Store Name</th>
                                        <th>:</th>
                                        <td>
                                            @Model.StoreName
                                        </td>
                                    </tr>

                                    <tr>
                                        <th style="width:17% !important">BoQ Division</th>
                                        <th>:</th>
                                        <td>@Model.BoQDivisionName</td>

                                        <th style="width:17% !important">BoQ Item</th>
                                        <th>:</th>
                                        <td>
                                            @Model.BOQItemName
                                        </td>
                                    </tr>

                                    <tr>
                                        <th style="width:17% !important">Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                        <th style="width:17% !important"></th>
                                        <th></th>
                                        <td></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        </div>
                    }


                        @if (Model.ConsumptionMasterId == 0)
                        {
                            @*@Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })*@

                            <div class="row">
                                @*@Html.HiddenFor(model => model.ActionId==(int)ActionEnum.Add, new { id = "CompanyFK" })*@

                                <div class="col-md-3">
                                    <label for="message-text" class="col-form-label">Consumption Date :</label>
                                    <div class="form-group" style="display:flex">
                                        <input name="ConsumptionDate" asp-for="ConsumptionDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker w-100 dateCustom" placeholder="Operation Date" autocomplete="off" id="txtOperationrDate">
                                        @Html.ValidationMessageFor(model => model.ConsumptionDate, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Project Type :</label>
                                        @Html.DropDownListFor(model => model.ProjectTypeId, Model.ProjectTypeList as SelectList, "==Select Project Type==", new { id = "projectTypeId", onchange = "GetProjectListByProjectTypeId()", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.ProjectTypeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Select Project :</label>
                                        @Html.DropDownListFor(model => model.CostCenterId, Model.ProjectList as SelectList, "==Select Project==", new { id = "ddlCostCenterId", onchange = "GetDivisionListByProjectId()", @class = "form-control searchingDropdown", style = "width:100%", required = "requried" })
                                        @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Store Location :</label>
                                        @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Select Store==", new { id = "ddlStoreId", @class = "form-control searchingDropdown", style = "width:100%", required = "requried" })
                                        @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3 d-block" id="inputDivision">
                                    <div class="form-group">
                                        <label>BoQ Division :</label>
                                        @Html.DropDownListFor(model => model.BoQDivisionId, Model.BOQDivisionList as SelectList, "==Select BoQ Division==", new { id = "ddlDivisionId", onchange = "GetBoqItemListByDivisionId()", @class = "form-control searchingDropdown", style = "width:100%" })
                                        @Html.ValidationMessageFor(model => model.BoQDivisionId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 d-block" id="inputBoq">
                                    <div class="form-group">
                                        <label>BoQ Item :</label>
                                        @Html.DropDownListFor(model => model.BOQItemId, Model.BOQItemList as SelectList, "==Select BoQ Item==", new { id = "ddlBOQItemId", onchange = "GetMaterialListByBoqId()", @class = "form-control searchingDropdown", style = "width:100%" })
                                        @Html.ValidationMessageFor(model => model.BOQItemId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                        }
                        @if ((Model?.StatusId ?? 0) != (int)ConsumptionStatusEnum.Submitted)
                        {
                            <div class="row">
                                <div class="col-md-3 d-block" id="MaterialType">
                                    <div class="form-group">
                                        <label id="materialTitle"> Material :</label>
                                        @Html.DropDownListFor(model => model.DetailModel.ProductId, Model.MaterialTypeList as SelectList, "==Select Material==", new { id = "ddlRequisitionItemId", @class = "form-control searchingDropdown", style = "width:100%", })
                                        @Html.ValidationMessageFor(model => model.DetailModel.ProductId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3 d-block" id="inputEstimateQty">
                                    <div class="form-group">
                                        <label>Stored Quantity :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.StoredQty, new { id = "decEstimatedQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Estimate quantity", ReadOnly = "true" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.StoredQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 d-block" id="inputReceivedSoFar">
                                    <div class="form-group">
                                        <label>Unit Price </label>
                                        @Html.TextBoxFor(model => model.DetailModel.UnitPrice, new { id = "decUnitPrice", type = "number", step = "0.01", @class = "form-control", placeholder = "Received so far", ReadOnly = "true" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 d-block" id="inputRemainingQty">
                                    <div class="form-group">
                                        <label>Available Quantity :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.RemainingQty, new { id = "decRemainingQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Remaining quantity", ReadOnly = "true" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.RemainingQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="col-md-3 d-block" id="inputTotalPrice">
                                    <div class="form-group">
                                        <label id="totalTitle">Total Amount :</label>
                                        @Html.TextBoxFor(model => model.DetailModel.TotalPrice, new { id = "decTotalPrice", type = "number", step = "0.01", @class = "form-control", placeholder = "Total amount", ReadOnly = "true" })
                                        @Html.ValidationMessageFor(model => model.DetailModel.TotalPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 d-block" id="inputUnitRate">
                                    <div class="form-group">
                                        <label id="unitTitle">Consumption Quantity</label>
                                        @Html.TextBoxFor(model => model.DetailModel.ConsumedQty, new { id = "decConsumptionQty", type = "number", step = "0.01", @class = "form-control", placeholder = "Consumption Quantity", })
                                        @Html.ValidationMessageFor(model => model.DetailModel.ConsumedQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        }

                    </div>

                    @if ((Model?.StatusId ?? 0) != (int)ConsumptionStatusEnum.Submitted)
                    {

                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-4"></div>
                                <div class="col-md-4"></div>
                                <div class="col-lg-4 col-md-4">
                                    <input type="submit" id="sosoCreateBtnCreateBtn" onclick="CreateConsumption()" value="Add Consumption" class="btn btn-primary btn-block" />
                                </div>
                            </div>
                        </div>

                    }


                    </div>

                @if (Model.ConsumptionMasterId > 0)
                {
                    @Html.HiddenFor(model => model.ConsumptionMasterId, new { id = "hidSlaveID" })

                    <div class="table-responsive col-md-12  text-wrap">
                        <table class="table table-striped table-responsive">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Product</th>
                                    <th>Stored Qty</th>
                                    <th>Consumption Qty</th>
                                    <th>Unit</th>
                                    <th>Total Amount</th>

                                    @if (Model.StatusId == (int)ConsumptionStatusEnum.Draft)
                                    {
                                        <th style="padding:5px;text-align:center;">Action</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var item in Model.DetailList)
                                {
                                    <tr>
                                        <td>@(++sl)</td>

                                        <td>
                                            @item.ProductName
                                        </td>
                                        <td>@String.Format("{0:0.00}", item.StoredQty)</td>
                                        <td>@String.Format("{0:0.00}", item.ConsumedQty)</td>
                                        <td>@String.Format("{0:0.00}", item.UnitPrice)</td>
                                        <td>@String.Format("{0:0.00}", item.TotalPrice)</td>


                                        @{ if (Model.StatusId == (int)ConsumptionStatusEnum.Draft)
                                            {
                                                <td style="padding:5px;text-align:center;">
                                                    <a id="@item.ConsumptionDetailsId" onclick=" makeEditble(@item.ConsumptionDetailsId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                    <a id="@item.ConsumptionDetailsId" onclick="makeDeletale(@item.ConsumptionDetailsId)" class="linkPointer" data-toggle="modal" data-target="#deleteDamageSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                </td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    if (Model?.StatusId == (int)ConsumptionStatusEnum.Draft)
                    {
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#ConsumptionSubmiteModal" data-placement="top">

                                        <i>Submit</i>

                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>

    </section>
}

@using (Html.BeginForm("ConsumptionMasterSlave", "Consumption", FormMethod.Post, new { id = "ConsumptionSubmiteFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="ConsumptionSubmiteModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Requisition </b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.ConsumptionMasterId, new { id = "hidSubmitBRMasterId" })
                    @Html.Hidden("ActionId", (int)ActionEnum.Finalize, new { id = "hidSubmitBRMasterId" })
                    @*@Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })*@

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to proceed ?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-check">&nbsp;<span class="submitOrDraftText"></span>Yes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteBillRequisitionDetailById", "BillRequisition", FormMethod.Post, new { id = "BRMasterSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDamageSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Requisition Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @*@Html.HiddenFor(model => model.DetailModel.BillRequisitionDetailId, new { id = "hidBillRequisitionDetailId" })*@
                    @Html.HiddenFor(model => model.ConsumptionMasterId, new { id = "hidBillRequisitionMasterId" })
                    @*@Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                        @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })*@

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Requisition Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetDamageDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">

        // overhead item
        function ShowMaterial() {
            var subTypeId = $("#reqSubtypeId").val();
            var showBoqMaterialList = $("#ddlRequisitionItemId");

            if (subTypeId > 0) {
                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/getBoqMaterialListForOverHead",
                    dataType: "json",
                    data: { id: subTypeId },
                    success: function (data) {
                        showBoqMaterialList.empty();
                        showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                        $.each(data, function (index, item) {
                            showBoqMaterialList.append($('<option>', {
                                value: item.ProductId,
                                text: item.ProductName
                            }));
                        });
                    }
                });
            } else {
                console.log("No Bill Requisition Id or No Requisition Subtype Id!");
            }
        }

        ShowMaterial();

        var isMakeEditable = false;
        // Make editable form
        function makeEditble(rowId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("SingleBillRequisitionDetails", "BillRequisition")",
                datatype: "Json",
                data: { id: rowId },
                success: function (data) {
                    unitPrice = data.UnitPrice;

                    $('#soCreateBtn').val("Update");
                    $("#hidBRMasterId").val(data.BillRequisitionMasterId);
                    $('#ActionId').val(2);
                    $("#CompanyFK").val(data.CompanyId);
                    $("#hiddenBillRequisitionDetailId").val(data.BillRequisitionDetailId);
                    $("#ddlRequisitionItemId").val(data.ProductId).trigger('change');

                    $("#txtFloor").val(data.Floor);
                    $("#txtWrad").val(data.Ward);
                    $("#txtDPP").val(data.DPP);
                    $("#txtChainage").val(data.Chainage);
                    $("#txtUnitId").val(data.UnitId);
                    $("#decEstimatedQty").val(data.EstimatedQty);
                    $("#decReceivedSoFar").val(data.ReceivedSoFar);
                    $("#decRemainingQty").val(data.RemainingQty);
                    $("#decDemandQty").val(data.DemandQty);
                    $("#decUnitRate").val(data.UnitRate);
                    $("#decTotalPrice").val(data.TotalPrice);
                    $("#txtitemDescription").val(data.Remarks);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            });
            isMakeEditable = true;
        }

        // make submitable form
        function makeSubmitble(rowId) {

            @*if (@Model.StatusId == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }*@
            $('#hidSubmitBRMasterId').val(@Model.ConsumptionMasterId);
        }

        // make deletable form
        function makeDeletale(rowId) {

            $('#hidBillRequisitionDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        // reset form
        function resetDamageDeleteSlaveForm() {

            $('#BRMasterSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        // get requisition subtype list by category id
        function GetSubCategoryListByCategoryId() {
            var getRequisitionTypeId = $("#ddlBRTypeId option:selected");
            var showRequisitionSubtype = $("#ddlBRSubTypeId");

            $.ajax({
                type: "GET",
                url: "/Configuration/GetSubCategoryByCategoryId",
                dataType: "json",
                data: { id: getRequisitionTypeId.val() },
                success: function (data) {
                    showRequisitionSubtype.empty();
                    showRequisitionSubtype.append("<option selected disabled>==Select Req. Subtype==</option>");

                    $.each(data, function (index, item) {
                        showRequisitionSubtype.append($('<option>', {
                            value: item.ProductSubCategoryId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        // get project list by project type id
        function GetProjectListByProjectTypeId() {
            var getProjectTypeId = $("#projectTypeId option:selected");
            var showProjectList = $("#ddlCostCenterId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/GetProjectList",
                dataType: "json",
                data: { id: getProjectTypeId.val() },
                success: function (data) {
                    showProjectList.empty();
                    showProjectList.append("<option selected disabled>==Select Project==</option>");

                    $.each(data, function (index, item) {
                        showProjectList.append($('<option>', {
                            value: item.CostCenterId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        // get division list by project id
        function GetDivisionListByProjectId() {
            var getProjectId = $("#ddlCostCenterId option:selected");
            var showBoqDivisionList = $("#ddlDivisionId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/getBoqDivisionList",
                dataType: "json",
                data: { id: getProjectId.val() },
                success: function (data) {
                    showBoqDivisionList.empty();
                    showBoqDivisionList.append("<option selected disabled>==Select BoQ Division==</option>");

                    $.each(data, function (index, item) {
                        showBoqDivisionList.append($('<option>', {
                            value: item.BoqDivisionId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        //// get boq item list by boq division id
        //function GetBoqItemListByDivisionId() {
        //    var getBoqDivisionId = $("#ddlDivisionId option:selected");
        //    var showBoqItemList = $("#ddlBOQItemId");

        //    $.ajax({
        //        type: "GET",
        //        url: "/BillRequisition/getBoqItemListWithBoqNumber",
        //        dataType: "json",
        //        data: { id: getBoqDivisionId.val() },
        //        success: function (data) {
        //            showBoqItemList.empty();
        //            showBoqItemList.append("<option selected disabled>==Select BoQ Item==</option>");

        //            $.each(data, function (index, item) {
        //                showBoqItemList.append($('<option>', {
        //                    value: item.BoQItemId,
        //                    text: item.Name
        //                }));
        //            });
        //        }
        //    });
        //}
        // get boq item list by boq division id
        function GetBoqItemListByDivisionId() {
            var getBoqDivisionId = $("#ddlDivisionId option:selected");
            var showBoqItemList = $("#ddlBOQItemId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/getBoqItemListWithBoqNumber",
                dataType: "json",
                data: { id: getBoqDivisionId.val() },
                success: function (data) {
                    showBoqItemList.empty();
                    showBoqItemList.append("<option selected disabled>==Select BoQ Item==</option>");

                    $.each(data, function (index, item) {
                        showBoqItemList.append($('<option>', {
                            value: item.BoQItemId,
                            text: item.Name
                        }));
                    });
                }
            });
        }

        //// get boq material list boq item id
        //function GetMaterialListByBoqId() {
        //    var getBoqItemId = $("#ddlBOQItemId option:selected");
        //    var showBoqMaterialList = $("#ddlRequisitionItemId");
        //    $.ajax({
        //        type: "GET",
        //        url: "/BillRequisition/getBoqMaterialList",
        //        dataType: "json",
        //        data: { id: getBoqItemId.val() },
        //        success: function (data) {
        //            showBoqMaterialList.empty();
        //            showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

        //            $.each(data, function (index, item) {
        //                showBoqMaterialList.append($('<option>', {
        //                    value: item.ProductId,
        //                    text: item.ProductName
        //                }));
        //            });
        //        }
        //    });
        //}
        // get boq material list boq item id
        function GetMaterialListByBoqId() {
            var getBoqItemId = $("#ddlBOQItemId").val();
            var getProjectId = $("#ddlCostCenterId").val();
            //var getStoredId = $("#ddlStoreId").val();
            var showBoqMaterialList = $("#ddlRequisitionItemId");
            $.ajax({
                type: "GET",
                url: "/MaterialReceive/GetMaterialReceiveListByBoqItem",
                dataType: "json",
                data: { companyId: @CompanyInfo.CompanyId, projectId: getProjectId,  BoqItem: getBoqItemId },
                success: function (data) {
                    showBoqMaterialList.empty();
                    showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                    $.each(data, function (index, item) {


                        showBoqMaterialList.append($('<option>', {
                            value: item.Value,
                            text: item.Text
                        }));
                    });
                }, error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error:", textStatus, errorThrown);
                }
            });
        }

        // get boq material list for draf
        function GetMaterialListByBoqIdForDraf() {
            var showBoqMaterialList = $("#ddlRequisitionItemId");
            var boqId = @((Model.BOQItemId == 0 || Model.BOQItemId == null)? 0 : Model.BOQItemId);
            $.ajax({
                type: "GET",
                url: "/BillRequisition/getBoqMaterialList",
                dataType: "json",
                data: { id: boqId },
                success: function (data) {
                    showBoqMaterialList.empty();
                    showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                    $.each(data, function (index, item) {
                        showBoqMaterialList.append($('<option>', {
                            value: item.ProductId,
                            text: item.ProductName
                        }));
                    });
                }
            });
        }
        GetMaterialListByBoqIdForDraf();

        // get boq material list for overhead
        function ShowBoqMaterialListByReqSubtypeId() {
            var RequisitionSubtype = $("#ddlBRSubTypeId option:selected");
            var showBoqMaterialList = $("#ddlRequisitionItemId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/getBoqMaterialListForOverHead",
                dataType: "json",
                data: { id: RequisitionSubtype.val() },
                success: function (data) {
                    showBoqMaterialList.empty();
                    showBoqMaterialList.append("<option selected disabled>==Select Material==</option>");

                    $.each(data, function (index, item) {
                        showBoqMaterialList.append($('<option>', {
                            value: item.ProductId,
                            text: item.ProductName
                        }));
                    });
                }
            });
        }

        // get selected material unit name
        function GetUnitNameByProductId() {
            var getUnitIdValue = $("#ddlRequisitionItemId option:selected");
            var showName = $("#showUnitName");
            var showValue = $("#txtUnitId");

            $.ajax({
                type: "GET",
                url: "/BillRequisition/GetUnitNameWithId",
                dataType: "json",
                data: { id: getUnitIdValue.val() },
                success: function (data) {
                    if (data) {
                        showName.val(data.unitName);
                        showValue.val(data.unitId);
                    }
                }
            });

            if (!isMakeEditable) {
                GetBudgetInfo();
            }
        }

        // get budget info
        function GetBudgetInfo() {
            var productId = $("#ddlRequisitionItemId option:selected");
            var boqId = $("#ddlBOQItemId option:selected");
            var showEstimate = $("#decEstimatedQty");
            var showUnitRate = $("#decUnitRate");
            var showReceivedSoFar = $("#decReceivedSoFar");
            var showRemaining = $("#decRemainingQty");
            var intputDemand = $("#decDemandQty");
            var totalAmount = $("#decTotalPrice");
            var boqIdFromMasterDetail = $("#boqId");
            var BoqValue = 0;

            if (boqIdFromMasterDetail.val() > 0) {
                BoqValue = boqIdFromMasterDetail.val();

            } else {
                BoqValue = boqId.val();
            }

            if (BoqValue > 0) {
                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/GetMaterialBudgetInfo",
                    dataType: "json",
                    data: { boqId: BoqValue, productId: productId.val() },
                    success: function (data) {
                        if (data) {
                            showEstimate.val(data.EstimateQty);
                            showUnitRate.val(data.UnitRate);
                            showReceivedSoFar.val(data.ReceivedSoFar);
                            showRemaining.val(data.RemainingQty);
                            intputDemand.val(0);
                            totalAmount.val(0);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "GET",
                    url: "/BillRequisition/GetMaterialBudgetInfoForOverhead",
                    dataType: "json",
                    data: { productId: productId.val() },
                    success: function (data) {
                        if (data) {
                            showEstimate.val(data.EstimateQty);
                            showUnitRate.val(data.UnitRate);
                            showReceivedSoFar.val(data.ReceivedSoFar);
                            showRemaining.val(data.RemainingQty);
                            intputDemand.val(0);
                            totalAmount.val(0);
                        }
                    }
                });
            }
        }


        $("#ddlRequisitionItemId").on('change', function () {
            var productId = $(this).val();
            var getBoqItemId = $("#ddlBOQItemId").val();
            var storeId = $("#ddlStoreId").val();

            $.ajax({
                type: "GET",
                url: "/MaterialReceive/GetMaterialReceiveLByBoqItemStoreIdAndProductId",
                dataType: "json",
                data: { BoqItem: getBoqItemId, storeId:storeId,ProductId: productId },
                success: function (data) {

                    $("#decEstimatedQty").val(data.StoredQty);
                    $("#decRemainingQty").val(data.RemainQuentity);
                    $("#decTotalPrice").val(data.TotalAmount);
                    $("#decUnitPrice").val(data.UnitPrice);
                    $("#decConsumptionQty").val();
                }
            });
        });

        $("#decConsumptionQty").on('keyup', function () {
            var remainQty = parseFloat($("#decRemainingQty").val());
            var consQty = parseFloat($(this).val());
            if (consQty > remainQty) {
                $("#sosoCreateBtnCreateBtn").prop('disabled', true);
            } else {
                $("#sosoCreateBtnCreateBtn").prop('disabled', false);
            }
        });
        //function CreateConsumption()
        //{
        //    alert('ok');
        //    var formData = $('#ConsMasterSlaveFormId').serialize();
        //    $.ajax({
        //        type: "GET",
        //        url: "/Consumption/ConsumptionMasterSlave",
        //        /*dataType: "json",*/
        //        data: companyId=21,
        //        success: function (data) {
        //            if (data) {
        //                //showEstimate.val(data.EstimateQty);
        //                //showUnitRate.val(data.UnitRate);
        //                //showReceivedSoFar.val(data.ReceivedSoFar);
        //                //showRemaining.val(data.RemainingQty);
        //                //intputDemand.val(0);
        //                //totalAmount.val(0);
        //            }
        //        }
        //    });
        //}





        $(document).ready(function () {
            'use strict';



            // dependable dropdown validate
            $("#ddlBRSubTypeId").empty();
            $("#ddlBRSubTypeId").append("<option selected disabled>==Select Req. Type First==</option>");


            $("#ddlCostCenterId").empty();
            $("#ddlCostCenterId").append("<option selected disabled>==Select Project Type First==</option>");

            $("#ddlDivisionId").empty();
            $("#ddlDivisionId").append("<option selected disabled>==Select Project First==</option>");

            $("#ddlBOQItemId").empty();
            $("#ddlBOQItemId").append("<option selected disabled>==Select Division First==</option>");

            $("#ddlRequisitionItemId").empty();
            $("#ddlRequisitionItemId").append("<option selected disabled>==Select BoQ First==</option>");

            // date picker activation
            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {

                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

            // claculate demand with unit rate and show to total
            var inputRemaining = $("#decRemainingQty");
            var inputDemand = $("#decDemandQty");
            var inputUnitPrice = $("#decUnitRate");
            var showTotalPrice = $("#decTotalPrice");

            function calculateTotalPrice() {

                var remainingValue = parseFloat(inputRemaining.val()) || 0;
                var demandValue = parseFloat(inputDemand.val()) || 0;
                var unitPriceValue = parseFloat(inputUnitPrice.val()) || 0;
                var totalPrice = 0;
                var selectedOption = $("#ddlBRTypeId").find("option:selected");
                var TypeId = $("#reqTypeId").val();

                if (selectedOption.val() == "@((int)EnumBillRequisitionType.Overhead)" || TypeId == "@((int)EnumBillRequisitionType.Overhead)") {
                    if (!isNaN(demandValue) && !isNaN(unitPriceValue)) {
                        totalPrice = demandValue * unitPriceValue;
                        showTotalPrice.val(totalPrice.toFixed(2));
                    }
                } else {
                    if (!isNaN(remainingValue) && !isNaN(demandValue) && !isNaN(unitPriceValue)) {
                        if (demandValue <= remainingValue || demandValue === 0) {
                            $("#demandValidate").text("");
                            totalPrice = demandValue * unitPriceValue;
                            showTotalPrice.val(totalPrice.toFixed(2));
                        } else {
                            inputDemand.val(remainingValue);
                            totalPrice = remainingValue * unitPriceValue;
                            showTotalPrice.val(totalPrice.toFixed(2));
                            $("#demandValidate").text("Demand cannot exceed the remaining amount!");
                        }
                    }
                }
            }

            inputDemand.on("input", calculateTotalPrice);
            inputUnitPrice.on("input", calculateTotalPrice);

            // Description title change when requisition type overhead is selected
            $("#ddlBRTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");

                if (selectedOption.val() === "@((int)EnumBillRequisitionType.Overhead)") {
                    $("#descriptionTitle").text("Item Description :");
                    $("#materialTitle").text("Requisition Subtype Item :");
                    $("#demandTitle").text("Demand Quantity :");
                    $("#unitTitle").text("Unit Rate :");

                    // master form
                    $("#inputDivision").removeClass("d-block").addClass("hidden");
                    $("#inputBoq").removeClass("d-block").addClass("hidden");

                    // details form
                    $("#inputEstimateQty").removeClass("d-block").addClass("hidden");
                    $("#inputRemainingQty").removeClass("d-block").addClass("hidden");
                    $("#inputMaterial").removeClass("hidden").addClass("d-block");
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");

                    // for layout
                    $("#inputMaterial").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnit").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputReceivedSoFar").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputDemandQty").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnitRate").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputTotalPrice").removeClass("col-md-3").addClass("col-md-4");
                    $("#ddlRequisitionItemId").empty();
                    $("#ddlRequisitionItemId").append("<option selected disabled>==Select Requisition Subtype First==</option>");
                } else if (selectedOption.val() === "@((int)EnumBillRequisitionType.Labor)") {
                    $("#demandTitle").text("Labor Quantity :");
                    $("#unitTitle").text("Labor Rate :");

                    // details form
                    $("#inputEstimateQty").removeClass("d-block").addClass("hidden");
                    $("#inputRemainingQty").removeClass("d-block").addClass("hidden");
                    $("#inputMaterial").removeClass("d-block").addClass("hidden");
                    $("#inputUnit").removeClass("d-block").addClass("hidden");
                    $("#inputReceivedSoFar").removeClass("d-block").addClass("hidden");

                    // for layout
                    $("#inputDemandQty").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputUnitRate").removeClass("col-md-3").addClass("col-md-4");
                    $("#inputTotalPrice").removeClass("col-md-3").addClass("col-md-4");
                } else {
                    $("#descriptionTitle").text("Work Details :");
                    $("#materialTitle").text("Requisition Material Item :");
                    $("#demandTitle").text("Demand Quantity :");
                    $("#unitTitle").text("Unit Rate :");

                    // master form
                    $("#inputDivision").removeClass("hidden").addClass("d-block");
                    $("#inputBoq").removeClass("hidden").addClass("d-block");

                    // details form
                    $("#inputEstimateQty").removeClass("hidden").addClass("d-block");
                    $("#inputRemainingQty").removeClass("hidden").addClass("d-block");
                    $("#inputMaterial").removeClass("hidden").addClass("d-block");
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");

                    // for layout
                    $("#inputMaterial").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputUnit").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputReceivedSoFar").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputDemandQty").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputUnitRate").removeClass("col-md-4").addClass("col-md-3");
                    $("#inputTotalPrice").removeClass("col-md-4").addClass("col-md-3");
                }
            });

            // show input field when project type
            $("#projectTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");

                if (selectedOption.val() === "@((int)EnumBillReqProjectType.Building)") {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("hidden").addClass("d-block");
                } else if (selectedOption.val() === "@((int)EnumBillReqProjectType.Road)") {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("hidden").addClass("d-block");
                    $("#inputDPP").removeClass("hidden").addClass("d-block");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                } else if (selectedOption.val() === "@((int)EnumBillReqProjectType.Runway)") {
                    $("#depandableInputForm").removeClass("hidden").addClass("d-block");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("hidden").addClass("d-block");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                } else {
                    $("#depandableInputForm").removeClass("d-block").addClass("hidden");
                    $("#inputWard").removeClass("d-block").addClass("hidden");
                    $("#inputDPP").removeClass("d-block").addClass("hidden");
                    $("#inputChainage").removeClass("d-block").addClass("hidden");
                    $("#inputFloor").removeClass("d-block").addClass("hidden");
                }
            });

            // TA/DA hidden div
            $("#ddlBRSubTypeId").on("change", function () {
                var selectedOption = $(this).find("option:selected");

                if (selectedOption.val() == 19) {
                    $("#inputMaterial").removeClass("d-block").addClass("hidden");
                    $("#inputUnit").removeClass("d-block").addClass("hidden");
                    $("#inputReceivedSoFar").removeClass("d-block").addClass("hidden");
                    $("#inputDemandQty").removeClass("d-block").addClass("hidden");
                    $("#inputUnitRate").removeClass("d-block").addClass("hidden");

                    $("#decTotalPrice").attr("readonly", false);
                    $("#totalTitle").text("Payable Amount");
                    $("#inputTotalPrice").removeClass("col-md-4").addClass("col-md-6");
                    $("#inputRemarks").removeClass("col-md-12").addClass("col-md-6");
                }else {
                    $("#inputMaterial").removeClass("hidden").addClass("d-block");
                    $("#inputUnit").removeClass("hidden").addClass("d-block");
                    $("#inputReceivedSoFar").removeClass("hidden").addClass("d-block");
                    $("#inputDemandQty").removeClass("hidden").addClass("d-block");
                    $("#inputUnitRate").removeClass("hidden").addClass("d-block");

                    $("#decTotalPrice").attr("readonly", true);
                    $("#totalTitle").text("Total Amount");
                    $("#inputTotalPrice").removeClass("col-md-6").addClass("col-md-4");
                    $("#inputRemarks").removeClass("col-md-6").addClass("col-md-12");
                }
            });
        });

    </script>
}