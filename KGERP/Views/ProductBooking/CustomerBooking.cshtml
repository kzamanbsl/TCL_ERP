@model KGERP.Service.ServiceModel.GLDLBookingViewModel
@{
    ViewBag.Title = "Customer Booking";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    input, select, textarea {
        max-width: 100%;
    }

    .content-header {
        padding: 10px 0.5rem;
    }

        .content-header .breadcrumb {
            background-color: white;
            line-height: 1.8rem;
            margin-bottom: 0;
            padding: 5px;
        }

    content-header .breadcrumb {
        line-height: 1.5rem;
    }

    .shadow {
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important;
    }

    .align-items-center {
        -webkit-align-items: center !important;
        -ms-flex-align: center !important;
        align-items: center !important;
    }

    .justify-content-between {
        -webkit-justify-content: space-between !important;
        -ms-flex-pack: justify !important;
        justify-content: space-between !important;
    }

    .d-flex {
        display: -webkit-flex !important;
        display: -ms-flexbox !important;
        display: flex !important;
    }

    .breadcrumb {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        list-style: none;
        background-color: #e9ecef;
        border-radius: 0.25rem;
    }

    .card {
        box-shadow: 0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%);
        margin-bottom: 1rem;
    }

    .card {
        position: relative;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-direction: column;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0,0,0,.125);
        border-radius: 0.25rem;
    }

    .card-header:first-child {
        border-radius: calc(.25rem - 0) calc(.25rem - 0) 0 0;
    }

    .card-header {
        background-color: transparent;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 0.75rem 1.25rem;
        position: relative;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
    }

    .card-header {
        padding: 0.75rem 1.25rem;
        margin-bottom: 0;
        background-color: #3f51b51f;
        border-bottom: 0 solid rgba(0,0,0,.125);
    }

    .card-body {
        -webkit-flex: 1 1 auto;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        min-height: 1px;
        padding: 1.25rem;
    }

    .text-sm .card-title {
        font-size: 1rem;
    }

    .card-title {
        float: left;
        font-size: 2.1rem;
        font-weight: 400;
        margin: 0;
    }

    .card-title {
        margin-bottom: 0.75rem;
    }

    .mt-2 {
        margin-top: 15px
    }

    .mt-3 {
        margin-top: 20px
    }

    /*    .select2-container--default .select2-selection--single, .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 0;
            padding: 6px 12px;
            height: 49px;
        }
    */
    element.style {
        max-width: 100%;
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .form-control {
        border-radius: 0;
        box-shadow: none;
        border-color: #d2d6de;
    }

        .form-control.intro {
            border: 1px solid #db1a1a !important;
        }

    .ui-datepicker-trigger .fa {
        padding: 10px;
        background: #ff9800;
        color: #fff;
    }

    .ui-datepicker-trigger {
        background: #ff9800;
        border: none;
    }

    .bg-div {
        padding: 0.75rem 1.25rem;
        margin-bottom: 0;
        background-color: #3f51b51f;
        border-bottom: 0 solid rgba(0,0,0,.125);
    }

    .error {
        color: orangered;
    }

    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        padding: 5px;
        line-height: 1.42857143;
        vertical-align: baseline !important;
        border-top: 1px solid #ddd;
    }

    .card {
        box-shadow: none;
    }

    .ui-datepicker-trigger .fa {
        padding: 9px;
        background: #ff9800;
        color: #fff;
    }

    .alert2 {
        padding: 15px;
        margin-bottom: 20px;
        border: 2px solid #f39c0e !important;
        border-radius: 4px;
    }

    .alert .close {
        color: red !important;
        opacity: 2.2
    }

    .alert-dismissable .close, .alert-dismissible .close {
        position: relative;
        top: -2px;
        right: -9px;
        color: inherit;
    }
</style>
<div class="content-header">
    <div class="container-fluid ">
        <div class="breadcrumb d-flex justify-content-between align-items-center shadow pl-3 pr-3">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item active"> Customer Booking </li>
            </ol>
            <div>
                <a href="#"><i class="fa fa-plus"></i>  Booking List</a>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("CustomerBooking", "ProductBooking", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.ClientId, new { @id = "ClientId" })
    @Html.HiddenFor(m => m.CompanyId, new { @id = "companyId" })
    @Html.HiddenFor(m => m.PStatus, new { @id = "ps" })
    <section class="content-header">
        <div class="">
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col-md-10">
                            <h3 class="card-title">
                                <i class="fa fa-plus"></i>
                                Customer Booking
                            </h3>
                        </div>
                        <div class="col-md-2"> <a target="_blank" class="btn btn-link btn-sm" href="~/Configuration/RSCommonCustomer?companyId=@Model.CompanyId">Add New Customer</a></div>
                    </div>


                </div>
                <div class="card-body">
                    <div class="tab-content mt-2 p-0">
                        <div id="alertsms"> </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label"> Application Date <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        <input type="text" name="ApplicationDateString" id="txtApplicationDate" value="@Model.ApplicationDateString" class="form-control datepickeronPage" />
                                        @Html.ValidationMessageFor(model => model.ApplicationDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="control-label"> Booking Date <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        <input type="text" name="BookingDateString" id="txtBookingDate" value="@Model.ApplicationDateString" class="form-control datepickeronPage" />
                                        @Html.ValidationMessageFor(model => model.BookingDateString, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">File No:</label>
                                    @Html.EditorFor(model => model.FileNo, new { htmlAttributes = new { @class = "form-control customStyle", @id = "FileNoId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.FileNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Select Customer: <b style="color:red"> *</b> </label>
                                    @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", @name = "ClientName", @id = "ClientNameId", @style = "max-width: 100%;" } })
                                    @Html.HiddenFor(x => x.ClientId, new { @id = "BookingBy", @name = "ClientId" })
                                    @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="control-label">Customer Group<b style="color:red"> *</b> </label>
                                    @Html.EditorFor(model => model.CustomerGroupName, new { htmlAttributes = new { @class = "form-control customStyle", @id = "CustomerGroupNameId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.CustomerGroupName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="control-label"> Mobile No<b style="color:red"> </b> </label>
                                    @Html.EditorFor(model => model.PrimaryContactNo, new { htmlAttributes = new { @class = "form-control customStyle", @id = "PrimaryContactNoId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.PrimaryContactNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">Email:</label>
                                    @Html.EditorFor(model => model.PrimaryEmail, new { htmlAttributes = new { @class = "form-control customStyle", @type = "email", @id = "PrimaryEmailId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.PrimaryEmail, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="control-label">Address<b style="color:red"> </b> </label>
                                    @Html.TextAreaFor(model => model.PrimaryContactAddr, new { id = "PrimaryContactAddrId", @class = "form-control customStyle", @placeholder = "Address" })
                                    @Html.ValidationMessageFor(model => model.PrimaryContactAddr, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="control-label">Project<b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        @Html.DropDownListFor(model => model.ProductCategoryId, new SelectList(Model.ProductCategoryList, "Value", "Text"), "---Select Project---", new { id = "ddlCommon_ProductCategoryFk", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                        @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @if (Model.CompanyId == 7)
                                    {
                                        <label class="control-label">Block<b style="color:red"> </b> </label>
                                    }
                                    else
                                    {
                                        <label class="control-label">Floor<b style="color:red"> </b> </label>
                                    }

                                    <div style="display:flex">
                                        @Html.DropDownListFor(model => model.ProductSubCategoryId, Model.ProductSubCategoryList as SelectList, "---Select Block---", new { id = "ddlCommonProductSubCategoryFk", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                        @Html.ValidationMessageFor(model => model.ProductSubCategoryId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @if (Model.CompanyId == 7)
                                    {
                                        <label class="control-label" id="pstatus">Plot<b style="color:red"> *</b> </label>
                                    }
                                    else
                                    {
                                        <label class="control-label" id="pstatus">Flat<b style="color:red"> *</b> </label>
                                    }

                                    @Html.DropDownListFor(model => model.ProductId, Model.ProductList as SelectList, "---Select Plot---", new { id = "ddlCommonProductFk", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row" id="productStatus">

                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Plot Size </label>
                                    <div style="display:flex">
                                        @Html.EditorFor(model => model.PlotSize, new { htmlAttributes = new { @id = "txtPlotSize", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } })
                                        @Html.ValidationMessageFor(model => model.PlotSize, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Rate Per<span class="ClassUnitName"></span> <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        @Html.EditorFor(model => model.RatePerKatha, new { htmlAttributes = new { @id = "txtRatePerKatha", @class = "form-control", @style = "max-width: 100%;" } })
                                        @Html.ValidationMessageFor(model => model.RatePerKatha, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Sales Person<b style="color:red"> *</b> </label>
                                    @Html.DropDownListFor(model => model.EmployeeId, Model.Employee as SelectList, "---Select Sales Person ---", new { id = "ddlCommon_EmployeeId", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                </div>
                                @*<div class="form-group">
                                        <label class="control-label"> Sales Person <b style="color:red"> *</b> </label>
                                        <select id="ddlCommon_EmployeeId" name="EmployeeId" required="required" class="form-control" , style="width: 100%;">
                                            <option>---Select Sales Person---</option>
                                            @foreach (var item in Model.Employee.Where(e => e.IsLeader == false).ToList())
                                            {
                                                <option value="@item.EmployeeId">@item.EmployeeName [@item.StrEmpId]</option>
                                            }
                                        </select>
                                    </div>*@
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label"> Team Lead <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        @Html.HiddenFor(m => m.TeamLeadId, new { id = "TeamLeadId" })
                                        <input readonly id="TeamLeadName" value="" class="form-control" style="width: 100%;" />

                                        @Html.ValidationMessageFor(model => model.TeamLeadId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="row mt-3" id="hideDive">
                        <div class="bg-div">
                            <b> Mode of Payment </b>

                        </div>

                        <table class="table table-bordered table-sm">
                            <thead>
                                <tr>
                                    <th>Sl</th>
                                    <th>Cost Head</th>
                                    @*<td>In Percentage</td>*@
                                    <th>Amount</th>
                                    <th>Include In Installment </th>
                                </tr>
                            </thead>


                            <tbody>
                                <tr>
                                    <th>1</th>
                                    <td> Land Value </td>
                                    @*<td>&nbsp;</td>*@
                                    <td>
                                        @Html.EditorFor(model => Model.LandValue, new { htmlAttributes = new { id = "LandValueId", @class = "form-control", @style = "max-width: 100%;" } })
                                    </td>
                                    <td>
                                        &nbsp;
                                    </td>

                                </tr>

                                @{int sl = 1; }
                                @for (int i = 0; i < Model.LstPurchaseCostHeads.Count; i++)
                                {
                                    <tr>
                                        <th>@(++sl) </th>
                                        <td>@Model.LstPurchaseCostHeads[i].CostName</td>
                                        @*<td>
                                                @Html.EditorFor(model => Model.LstPurchaseCostHeads[i].Percentage, new { htmlAttributes = new { @class = "form-control costHead", @style = "max-width: 100%;" } })
                                            </td>*@
                                        <td>
                                            @Html.HiddenFor(model => Model.LstPurchaseCostHeads[i].CostId)
                                            @Html.EditorFor(model => Model.LstPurchaseCostHeads[i].Amount, new { htmlAttributes = new { @class = "form-control costHead", @style = "max-width: 100%;" } })
                                            <input type="hidden" id="costValue" />
                                        </td>
                                        <td class="text-center">
                                            @Html.CheckBoxFor(model => Model.LstPurchaseCostHeads[i].IsSnstallmentInclude, new { @onclick = "GetSnstallmentableValue(" + i + ")" })
                                        </td>
                                    </tr>
                                }
                                <tr class="text-right">
                                    <td colspan="2">
                                        <b> Total Amount </b>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.TotalAmount, new { htmlAttributes = new { id = "TotalAmountId", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } }) </td>

                                </tr>
                                <tr>

                                    <td class="text-right"> Discount (Land Value)</td>
                                    <td style="display:flex; ">
                                        @Html.EditorFor(model => Model.Discount, new { htmlAttributes = new { id = "DiscountId", @class = "form-control", @style = "max-width: 80%; " } })
                                        <span style="margin:7px 0px 0px 5px">%</span>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.TotalDiscount, new { htmlAttributes = new { id = "TotalDiscountId", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>
                                <tr class="text-right">
                                    <td colspan="2">
                                        <b>Special Discount </b>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.SpecialDiscountAmt, new { htmlAttributes = new { id = "SpecialDiscountAmtId", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>
                                <tr class="text-right">
                                    <td colspan="2">
                                        <b>Total Discount</b>
                                    </td>
                                    <td>

                                        @Html.TextBox("TotalDiscount", 0, new { id = "TotalDiscountAmtId", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" })
                                    </td>
                                </tr>
                                <tr class="text-right">
                                    <td colspan="2">
                                        <b>Grand Total </b>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.GrandTotalAmount, new { htmlAttributes = new { id = "GrandTotalAmountId", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>
                                <tr class="text-left">

                                    <td>  Booking Money </td>
                                    <td style="display:flex; ">  @Html.EditorFor(model => Model.AdvancePercentage, new { htmlAttributes = new { id = "AdvancePercentageId", @class = "form-control", @style = "max-width: 80%; " } })  <span style="margin:7px 0px 0px 5px">%</span> </td>

                                    <td> @Html.EditorFor(model => Model.BookingMoney, new { htmlAttributes = new { id = "BookingMoneyId", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>

                                <tr class="text-right">
                                    <td colspan="2">
                                        <b>Rest of Amount </b>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.RestofAmount, new { htmlAttributes = new { id = "RestofAmountId", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>
                                <tr class="text-right">
                                    <td colspan="2">
                                        <b>Installment Amount </b>
                                    </td>
                                    <td> @Html.EditorFor(model => Model.InstallmentAmount, new { htmlAttributes = new { id = "txtInstallmentAmount", @readonly = "readonly", @class = "form-control", @style = "max-width: 100%;" } }) </td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="row" style="margin-bottom:10px">
                            <div class="col-sm-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2" checked>
                                    <label class="form-check-label" for="exampleRadios2">
                                        Automatic Process
                                    </label>
                                </div>

                            </div>

                            <div class="col-sm-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1">
                                    <label class="form-check-label" for="exampleRadios1">
                                        Manual Process
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-8"></div>
                        </div>

                        <div class="row Automaticprocessing">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">Installment Type:</label>
                                    @Html.DropDownListFor(model => model.BookingInstallmentTypeId, new SelectList(Model.BookingInstallmentType, "Value", "Text"), "---Select Booking Installment Type---", new { id = "BookingInstallmentTypeId", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.BookingInstallmentTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">No. of Installment:</label>
                                    <input type="text" value="1" id="NoOfInstallment" class="form-control col-md-8 valid" aria-describedby="NoOfInstallment-error" aria-invalid="false">

                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Installment Start Date<b style="color:red"> *</b> </label>
                                    <div style="display:flex;">
                                        <input type="text" id="AutomaticprocessingDate" value="@Model.ApplicationDateString" class="form-control datepickeronPage" />
                                    </div>

                                </div>
                            </div>

                            <div class="col-md-3"></div>
                        </div>

                        <div class="Menualprocess">
                            <div class="row">
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label class="control-label">Installment Type<b style="color:red"> *</b> </label>
                                        @Html.DropDownListFor(model => model.BookingInstallmentTypeManualId, new SelectList(Model.BookingInstallmentType, "Value", "Text"), "---Select Booking Installment Type---", new { id = "BookingInstallmentTypeId2", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                        @Html.ValidationMessageFor(model => model.BookingInstallmentTypeManualId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label class="control-label">No. of Installment<b style="color:red"> *</b> </label>
                                        <input type="text" value="1" id="NoOfInstallment2" class="form-control valid" aria-describedby="NoOfInstallment-error" aria-invalid="false">

                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label class="control-label">Amount<b style="color:red"> *</b> </label>
                                        <input type="number" id="OneimeAmount" class="form-control valid" aria-describedby="NoOfInstallment-error" aria-invalid="false">
                                    </div>
                                </div>



                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label class="control-label">Remaining Balance </label>
                                        <input type="text" id="RemainingBalance" readonly class="form-control valid" aria-describedby="NoOfInstallment-error" aria-invalid="false">
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label class="control-label">Installment Date<b style="color:red"> *</b> </label>
                                        <div style="display:flex;">
                                            <input type="text" id="stertistallmentId" value="@Model.ApplicationDateString" class="form-control datepickeronPage" />
                                        </div>

                                    </div>
                                </div>

                                <div class="col-md-1">
                                    <div class="form-group">
                                        <label class="control-label">&nbsp;</label>
                                        <div style="display:flex;">
                                            <button style="width:100%;" type="button" onclick="confirmShedul()" data-confirm="Are you sure to submit?" class="btn btn-success d-block pull-right">Process</button>

                                        </div>
                                    </div>
                                </div>

                            </div>


                        </div>




                        <div style="margin-top:10px;margin-bottom:20px">
                            <table class="table table-bordered">
                                <thead>
                                    <tr class="bg-div">
                                        <th>Sl</th>
                                        <th>Title</th>
                                        <th>Installment Date</th>
                                        <th>Payable Amount</th>
                                        @*<th>Action</th>*@
                                    </tr>
                                </thead>
                                <tbody id="Installment">
                                </tbody>
                            </table>
                        </div>

                        <div class="" style="margin-top:15px">
                            <div class="row">

                                <div class="col-md-5">
                                    @*<div class="form-group">
                                            <label for="message-text" class="col-form-label">Customer:</label>
                                            <input type="text" id="Customer" name="Customer" class="form-control" />
                                            <input type="hidden" id="VendorId" name="VendorId" />
                                            <span class="error">Customer  required</span>
                                        </div>*@
                                    <div class="form-group">
                                        <label for="message-text" class="col-form-label">Customer:</label>
                                        <select id="Customer" name="Customer" class="form-control">
                                        </select>
                                        @*<span class="error">Customer  required</span>*@
                                    </div>

                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="message-text" class="col-form-label">Share Percentage:</label>
                                        <input type="text" id="SharePercentage" class="qty form-control" autocomplete="off" style="text-align:right" />
                                        <span class="error">Share Percentage required</span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="message-text" class="col-form-label">&nbsp;</label>
                                        <button type="button" id="add" onclick="addItemToGrid()" style="width:100%" class="add btn btn-primary pull-left"><i class="glyphicon glyphicon-plus-sign"></i> Add</button>
                                        <button type="button" id="itemClose" onclick="CloseItemToGrid()" class="Close btn btn-danger pull-right" style="width:30%;margin-top:-32px">Close <i class="fa fa-close" aria-hidden="true"></i></button>
                                        <button type="button" id="itemEdit" onclick="EditItemToGrid()" style="width: 70%; margin-top: -32px" class="edit btn btn-warning pull-left"><i class="glyphicon glyphicon-pencil-sign"></i>Update</button>

                                    </div>
                                </div>


                            </div>

                            <div id="orderItems">
                                <table class="table table-striped" id="orderdetailsItems">
                                    <thead>
                                        <tr class="bg-div">
                                            <th>Sl</th>
                                            <th>Customer</th>
                                            <th>Share Percentage</th>
                                            <th>Customer Land Portion <span class="ClassUnitName"> </span> </th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="itemDetails">
                                    </tbody>
                                </table>
                                <span id="orderItemError" style="color:red"></span>
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-4">

                            </div>
                            <div class="col-md-4">

                            </div>
                            <div class="col-md-4">
                                <button onclick="SubmitForm()" data-confirm="Are you sure to submit?" value="Submit" style="width:100%" class="btn btn-success pull-right">Save Booking</button>

                            </div>
                        </div>


                    </div>
                </div>
            </div>
    </section>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script>
        var TeamList = @Html.Raw(Json.Encode(Model.Employee));
        console.table('kkkkkkkkkkk',TeamList);
        function rebuildDatePicker() {
            $('.js-date').datepicker({
                dateFormat: 'dd-M-yy',

                changeMonth: true,
                changeYear: true,
                yearRange: "1950:+150"
            });
        }


        $("#FileNoId").change(function () {
            var html;
            var ff = $("#FileNoId").val();
                    $.ajax({
                 type: "GET",
                  url: "@Url.Action("GetfileCheck", "ProductBooking")",
                  datatype: "Json",
                     data: { companyId: "@Model.CompanyId", fileNo:ff},
                  success: function (data) {
                      if (data) {
                         
                          if (data.CGId > 0) {
                              $("#alertsms").show();
                              html = '<div class="alert alert-danger" role="alert"> <h4>  FileNo ' + ff + ' is already exist !  </h4> <br> <a href="/ProductBooking/CustomerBookingInformation?companyId=' +@Model.CompanyId+'&CGId=' + data.CGId +'"> <h4> Existing file is on this link. Please click on this link </h4>   </a>    </div>';
                              $("#alertsms").html(html);
                          } else {
                              html = "";
                              $("#alertsms").hide();
                          }
                      }
                  }
                });
        });

        function bookingdatevalidation(name) {
            var date = new Date();
            const date2 = new Date();
            var dd = new Date(date2.getFullYear(), date2.getMonth(), -1);
         
            //var res = $.datepicker.formatDate('dd-M-yy', new Date());
            var currentDate = (date.getMonth() + 1) + "/" + date.getFullYear();
            var privousdate = (dd.getMonth() +1) + "/" + dd.getFullYear();
            var Bdate = new Date($("#txtBookingDate").val());
            var BookingDate = (Bdate.getMonth() + 1) + "/" + Bdate.getFullYear();

            if (name == "UnSold" || name == "VacantFlat") {
                if (currentDate >= BookingDate || BookingDate >= privousdate) {
                    $('#hideDive').css('visibility', 'visible');
                } else {
                    $('#hideDive').css('visibility', 'hidden');                 
                }               
            }
              
        }
        $("#txtBookingDate").change(function () {
            $("#ddlCommonProductFk").change()
        });

        $("#ddlCommonProductFk").change(function () {
            var html="";
            var ff = $("#ddlCommonProductFk").val();
            var ff2 = $("#pstatus").text();
            var ff22 = ff2.substr(0, 4);
             $.ajax({
                 type: "GET",
                  url: "@Url.Action("GetByProductstastus", "ProductBooking")",
                  datatype: "Json",
                 data: { productid:ff},
                  success: function (data) {
                      if (data) {
                        
                          $("#ps").val(data.PStatus);                   
                          bookingdatevalidation(data.PStatus);
                          if (data.ProductId > 0) {
                              
                              if (data.PStatus === 'UnSold' || data.PStatus === 'VacantFlat') {
                                  html = '<div class="alert alert2 alert-primary alert-dismissible" role="alert">' +
                                      '<strong id="productStatusSms">' + ff22 + ' Status Is : <b style="color: blue">' + data.PStatus + '</b> so <span style="color:red">Booking date must be current month</span>, <b style="color: blue">' + data.PStatus + '</b> ' + ff22 +' Available for Account Integrated. </strong>' +
                                      '<button type="button" class="close" data-dismiss="alert" aria-label="Close"> <span aria-hidden="true">&times;</span></button>' +
                                      '</div>'
                                  $("#productStatus").html(html);
                              } else {
                                  html = '<div class="alert alert2 alert-primary alert-dismissible" role="alert">' +
                                      '<strong id="productStatusSms">' + ff22 + ' Status Is :  <b class="text-success">' + data.PStatus + '</b> ,This ' + ff22 +' Not Available for Account Integrated </strong>' +
                                      '<button type="button" class="close" data-dismiss="alert" aria-label="Close"> <span aria-hidden="true">&times;</span></button>' +
                                      '</div>'
                                  $("#productStatus").html(html);
                                 
                              }

                          } else {
                              html = "";
                              $("#productStatus").hide();
                          }
                      }
                  }
                });
        });

    </script>

    <script type="text/javascript">
        let costvalue = 0;
        let vv = 0;
        function GetSnstallmentableValue(sl) {

            var rowId = "LstPurchaseCostHeads_" + sl + "__Amount"
            var  rowVal = $("#" + rowId).val();

            var LandValue = $("#LandValueId").val();
            var checkboxId = "LstPurchaseCostHeads_" + sl + "__IsSnstallmentInclude";

            if ($("#" + checkboxId).prop('checked') == true) {

                costvalue = Number(costvalue) + Number(rowVal);

            }
            else {
                costvalue = Number(costvalue) - Number(rowVal);
            }
            $("#costValue").val(costvalue);
            var tnstallmentAmount = Number(LandValue) + Number(costvalue);
            var landDiscountId = $("#TotalDiscountId").val();
            var specialDiscountAmtId = $("#SpecialDiscountAmtId").val();
            var totalDiscount = Number(landDiscountId) + Number(specialDiscountAmtId);
            $("#txtInstallmentAmount").val(Number(tnstallmentAmount) - Number(totalDiscount));
            CalculateAll();
        }




        $(document).ready(function () {
            $("#ClientNameId").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/ProductBooking/CustomerAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "companyId":"' +@Model.CompanyId+'"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#BookingBy").val(i.item.val);

                 $.ajax({
                 type: "GET",
                  url: "@Url.Action("GetVendorInformation", "ProductBooking")",
                  datatype: "Json",
                     data: { companyId: "@Model.CompanyId", vendorId: i.item.val },
                  success: function (data) {
                      if (data) {
                         
                          $("#CustomerGroupNameId").val(data.Name + " & Associated" );
                          $("#PrimaryContactNoId").val(data.Phone);
                          $("#PrimaryEmailId").val(data.Email);
                          $("#PrimaryContactAddrId").val(data.Address);
                          $("#ClientId").val(data.VendorId);
                      }
                  }
                });
                  //var vandorId =   $("#ClientId").val();
                    $.ajax({
                        url: '/Vendor/CustomerAssociatesCustomerId/',
                        /*   data: { companyId: "7", prefix: request.term },*/
                        data: "{ 'customerId': '" + i.item.val + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data2) {
                           
                            if (data2) {
                                $("#Customer").empty();
                                $("#Customer").append("<option value=''>==Select Customer ==</option>");
                                $(data2).each(function (index2, item2) {
                                    $("#Customer").append("<option value='" + item2.val + "'>" + item2.label + "</option>");
                                });
                            }
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });



            $('.datepickeronPage').datepicker({
                dateFormat: 'dd-M-yy',
                showOn: 'both',
                buttonText: "<i class='fa fa-calendar'></i>",
                changeMonth: true,
                changeYear: true,
                yearRange: "1950:+150"
            });
            onlodehidesho();
        });

        $("form").submit(function () {
            var r = confirm("Are you sure to save this?");
          
            if (r == false) {
                return false;
            }
        })
        var  selectProcess = 0;
        var InstallmentTotal = 0.0;
        let dList = [];
        $("#exampleRadios2").change(function () {
            var ff = $("#exampleRadios2").prop('checked');
            if (ff==true) {
                selectProcess = 1;
                onlodehidesho();
            }
        });

        $("#exampleRadios1").change(function () {
            var ff = $("#exampleRadios1").prop('checked');
            if (ff == true) {
                selectProcess = 2;
                onlodehidesho();
            }
        });

        function onlodehidesho() {
            if (selectProcess == 1 || selectProcess == 0) {
                $(".Automaticprocessing").show();
                $(".Menualprocess").hide();
                $('#Installment').empty();
                $("#select2-BookingInstallmentTypeId2-container").text("---Select Booking Installment Type---");
                $("#BookingInstallmentTypeId2").val("");
                InstallmentTotal = 0.0;
                $('#RemainingBalance').val($("#txtInstallmentAmount").val());
                dList = [];
            }
            else {
                $(".Menualprocess").show();
                $(".Automaticprocessing").hide();
                $('#Installment').empty();
                $("#select2-BookingInstallmentTypeId-container").text("---Select Booking Installment Type---");
                $("#BookingInstallmentTypeId").val("");
                InstallmentTotal = 0.0;
                var res=$("#txtInstallmentAmount").val();
                $('#RemainingBalance').val(res);
                $('#OneimeAmount').val(0);
                dList = [];
            }
        }




    var installmentType = @Html.Raw(Json.Encode(Model.BookingInstallmentType));
    let customersList = new Array();

        $("#BookingInstallmentTypeId").change(function () {

            var typeid = $('#BookingInstallmentTypeId').val();
            var datalist = installmentType.find(d => d.Value == parseFloat(typeid));

            if (parseFloat(typeid) > 0) {
                if (datalist.IsOneTime) {
                    document.getElementById('NoOfInstallment').readOnly = true;
                }
                else {
                    document.getElementById('NoOfInstallment').readOnly = false;
                }
                onlode();
            }

        });

        $("#AutomaticprocessingDate").change(function () {
            onlode();
        });


        $("#BookingInstallmentTypeId2").change(function () {

            var typeid = $('#BookingInstallmentTypeId2').val();
            var datalist = installmentType.find(d => d.Value == parseFloat(typeid));

            if (parseFloat(typeid) > 0) {
                if (datalist.IsOneTime) {
                    document.getElementById('NoOfInstallment').readOnly = true;
                }
                else {
                    document.getElementById('NoOfInstallment').readOnly = false;
                }

            }

        });

        $("#SpecialDiscountAmtId").keyup(function () {
            var amt = $("#SpecialDiscountAmtId").val();
            if (amt == '' || amt == undefined) {
                $("#SpecialDiscountAmtId").val(0);
            }
            CalculateAll();

        });


        $("#NoOfInstallment").keyup(function () {

            var no = $('#NoOfInstallment').val();
            if (no == null || no == '' || no == undefined || no == 0) {
                $('#NoOfInstallment').val(1);
            }
            else {
                $('#NoOfInstallment').val(parseInt(no));

            }
            onlode();
        });

        $("#NoOfInstallment2").keyup(function () {

            var no = $('#NoOfInstallment2').val();
            if (no == null || no == '' || no == undefined || no == 0) {
                $('#NoOfInstallment2').val(1);
            }
            else {
                $('#NoOfInstallment2').val(parseInt(no));

            }

        });

        function confirmShedul() {
            var onetime = parseFloat($('#OneimeAmount').val());
            var res = $("#txtInstallmentAmount").val() - parseFloat(InstallmentTotal);
            if (parseFloat(res) >= onetime) {
                onlode();
            }
            else {
                alert("Remaining Balance is", res);
            }
        };

        function onlode() {

            if (selectProcess == 1 || selectProcess == 0) {
                var typeid = $('#BookingInstallmentTypeId').val();
                var datalist = installmentType.find(d => d.Value == parseFloat(typeid));
               /* var restofAmountId = $("#RestofAmountId").val();*/
                var restofAmountId = $("#txtInstallmentAmount").val();
                var noOfInstallMent = $("#NoOfInstallment").val();
               /*var bookingDate = $("#txtBookingDate").val();*/
                var bookingDate = $("#AutomaticprocessingDate").val();
                if (bookingDate == null || bookingDate == undefined) {
                    alert('Please select Booking Date First');
                    return;
                }

                //console.debug(applicationDate);
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("InstallmentSchedule", "ProductBooking")",
                    datatype: "Json",
                    data: { conmpanyId:@Model.CompanyId, installmentId: datalist.Value, NoOfInstallment: noOfInstallMent, restofAmount: restofAmountId, BookingDate: bookingDate },
                    success: function (data) {
                      
                        InstallmentTotal = 0;
                        if (data) {
                            var tag = '';
                            $.each(data.LstSchedules, function (key, item) {
                                var InstallmentDate = DateCustom(item.InstallmentDate);
                             
                                tag += '<tr id="' + key + '">';
                                tag += '<td> ' + (key + 1) + '</td>';
                                tag += '<td><input  type="hidden" id="' + key + item.Title + '" name="Schedule[' + key + '].Title" value="' + item.Title + '"/>' + item.Title + '</td>';
                                tag += '<td><input class="form-control js-date"  name="Schedule[' + key + '].StringDate" value="' + item.StringDate + '"/></td>';
                                tag += '<td><input id="' + key + "Schedule" + '" onchange="ScheduleAmount(' + key + ')" onkeyup="ScheduleAmount(' + key + ')" type="number" min="0" class="ScheduleAmount form-control" name="Schedule[' + key + '].PayableAmount" value="' + item.PayableAmount.toFixed(2) + '"/> <input type="hidden" name="Schedule[' + key + '].SortOrder" value="' + item.SortOrder + '"/> <input type="hidden" name="Schedule[' + key + '].Title" value="' + item.Title + '"/> <input type="hidden" name="Schedule[' + key + '].InstallmentId" value="' + item.InstallmentId + '"/> </td>';
                                // tag += '<td> <a onclick="removecell(' + item.VendorId + ',' + key + ')" class=" btn-outline-danger btn-flat btn-sm sm"> <i class="fa fa-trash"></i></a> <a onclick="Editcell(' + item.VendorId + ',' + key + ')" class=" btn-outline-danger btn-flat btn-sm sm"> <i class="fa fa-pencil-square-o"></i></a></td>';
                                tag += '</tr>';
                                InstallmentTotal = parseFloat(InstallmentTotal) + parseFloat(item.PayableAmount);
                            });

                            tag += '<tr>';
                            tag += '<td colspan="3"> <b> Total </b></td>';
                            tag += '<td> ' + InstallmentTotal.toFixed(2) + '</td>';
                            tag += '</tr>';
                            $('#Installment').empty();
                            $('#Installment').html(tag);
                            rebuildDatePicker();
                        }
                    },
                    error: function (xhr) {
                        //console.log(xhr);
                    }

                });
            } else {

             var typeid = $('#BookingInstallmentTypeId2').val();
                var datalist = installmentType.find(d => d.Value == parseFloat(typeid));
                var restofAmountId = parseFloat($('#OneimeAmount').val());
                var noOfInstallMent = $("#NoOfInstallment2").val();
                var bookingDate = $("#stertistallmentId").val();
                if (bookingDate == null || bookingDate == undefined) {
                    alert('Please select Booking Date First');
                    return;
                }

                //console.debug(applicationDate);
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("InstallmentSchedule", "ProductBooking")",
                    datatype: "Json",
                    data: { conmpanyId:@Model.CompanyId, installmentId: datalist.Value, NoOfInstallment: noOfInstallMent, restofAmount: restofAmountId, BookingDate: bookingDate },
                    success: function (data) {

                        dList.push(...data.LstSchedules);
                       
                        InstallmentTotal = 0;
                        if (data) {
                            var tag = '';
                            $.each(dList, function (key, item) {
                                var InstallmentDate = DateCustom(item.InstallmentDate);
                             
                                tag += '<tr id="' + key + '">';
                                tag += '<td> ' + (key + 1) + '</td>';
                                tag += '<td><input  type="hidden" id="' + key + item.Title + '" name="Schedule[' + key + '].Title" value="' + item.Title + "(" + item.InstallmentName + ")" +'"/>' + item.Title + "(" + item.InstallmentName+")"+'</td>';
                                tag += '<td><input class="form-control js-date"  name="Schedule[' + key + '].StringDate" value="' + item.StringDate + '"/></td>';
                                tag += '<td><input id="' + key + "Schedule" + '" onchange="ScheduleAmount(' + key + ')" onkeyup="ScheduleAmount(' + key + ')" type="number" min="0" class="ScheduleAmount form-control" name="Schedule[' + key + '].PayableAmount" value="' + item.PayableAmount.toFixed(2) + '"/> <input type="hidden" name="Schedule[' + key + '].SortOrder" value="' + item.SortOrder + '"/> <input type="hidden" name="Schedule[' + key + '].Title" value="' + item.Title + '"/> <input type="hidden" name="Schedule[' + key + '].InstallmentId" value="' + item.InstallmentId + '"/> </td>';
                                // tag += '<td> <a onclick="removecell(' + item.VendorId + ',' + key + ')" class=" btn-outline-danger btn-flat btn-sm sm"> <i class="fa fa-trash"></i></a> <a onclick="Editcell(' + item.VendorId + ',' + key + ')" class=" btn-outline-danger btn-flat btn-sm sm"> <i class="fa fa-pencil-square-o"></i></a></td>';
                                tag += '</tr>';
                                InstallmentTotal +=item.PayableAmount;
                            });

                            tag += '<tr>';
                            tag += '<td colspan="3"> <b> Total </b></td>';
                            tag += '<td id="InstallmentTotal"> ' + InstallmentTotal.toFixed(2) + '</td>';
                            tag += '</tr>';
                            //$('#Installment').empty();
                            $('#Installment').html(tag);

                            $('#RemainingBalance').val($("#txtInstallmentAmount").val() - parseFloat(InstallmentTotal.toFixed(2)));
                            rebuildDatePicker();
                        }
                    },
                    error: function (xhr) {
                        //console.log(xhr);
                    }

                });

            }


    }

        function DateCustom(orderDate) {
            var dateString = orderDate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month < 10) {
                month = "0" + month;
            }
            var day = currentTime.getDate();
            if (day < 10) {
                day = "0" + day;
            }
            var year = currentTime.getFullYear();
            var date = year + '-' + month + '-' + day;
            return date;
        }


    $("#ddlCommon_ProductCategoryFk").change(function () {
        var productCategoryFk = $("#ddlCommon_ProductCategoryFk").val();
        $.ajax({
                type: "GET",
                url: "@Url.Action("GetCommonProductSubCategory", "WareHouse")",
                datatype: "Json",
                         data: { id: productCategoryFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCommonProductSubCategoryFk").empty();
                            $("#ddlCommonProductSubCategoryFk").append("<option value=''>==Select Subcategory==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCommonProductSubCategoryFk").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });

            })

    $("#ddlCommonProductSubCategoryFk").change(function () {
                var productSubCategoryFk = $("#ddlCommonProductSubCategoryFk").val();
                     $.ajax({
                type: "GET",
                url: "@Url.Action("GetCommonProduct", "WareHouse")",
                datatype: "Json",
                         data: {  id : productSubCategoryFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCommonProductFk").empty();
                            $("#ddlCommonProductFk").append("<option value=''>==Select Item==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCommonProductFk").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });
                        }
                    }
                });
            })

    $("#ddlCommonProductFk").change(function () {
        var ProductId = $("#ddlCommonProductFk").val();
        var companyId = $("#companyId").val();
        hideShowDiv();
        $.ajax({
            url: '@Url.Action("GetProductCostHeadsbyId", "ProductBooking")',
            data: { productid: ProductId, companyId: companyId },
            type: "POST",
            datatype: "Json",
            success: function (data) {
              
                var x = document.getElementsByClassName("ClassUnitName");

                for (var i = 0; i < x.length; i++) {
                    x[i].innerText = '(' + data.product.UnitName+')';    // Change the content
                }


                $('#txtPlotSize').val(data.product.PackSize);
                $('#txtRatePerKatha').val(data.product.UnitPrice);
                $('#txtPlotNo').val(data.product.ProductCode);
                $('#LandValueId').val(data.product.PackSize * data.product.UnitPrice)
                CalculateAll();

                var lan = customersList.length;
                if (lan === 0) {
                    DefultCustomer();
                    PopulateTableFromArray();
                    buttonVisibility();
                }
                else {
                    RecalculatCustomerlandvalue();
                }
            },
            error: function (xhr) {
                //console.log(xhr);
            }
        });

    })

        $("#ddlCommon_EmployeeId").change(function () {
            var empId = $("#ddlCommon_EmployeeId").val();


               $.ajax({
                   url: '@Url.Action("GetLeaderInfo", "TeamMakingProcess")',
                   data: { employeeId: empId, companyId: "@Model.CompanyId" },
            type: "POST",
            datatype: "Json",
            success: function (data) {
                $('#TeamLeadId').val(data.EmployeeId);
                $('#TeamLeadName').val(data.EmployeeName);
            },
            error: function (xhr) {
                //console.log(xhr);
            }
        });




        });




        $("#txtRatePerKatha").keyup(function () {
            var siz = $('#txtPlotSize').val();
            var rpk = $('#txtRatePerKatha').val();
            $('#LandValueId').val(siz * rpk)
            CalculateAll();

        });

        $("#AdvancePercentageId").keyup(function () { bookingmonyPersentic();});
        $("#LandValueId").keyup(function () { CalculateAll();});
        $("#BookingMoneyId").keyup(function () { bookingmony();});
        $("#DiscountId").keyup(function () { CalculateAll(); });
        $(".costHead").keyup(function () { CalculateAll(); });

        function bookingmony() {
            var LandValue = $('#LandValueId').val();
            var AdvancePercentage = $('#AdvancePercentageId').val();
            var BookingMoney = $('#BookingMoneyId').val();
            var TotalAmount = $('#TotalAmountId').val();
            var DiscountPercentage = $('#DiscountId').val();
            var SpecialDiscountAmt = $('#SpecialDiscountAmtId').val();
            var calculatedDiscount = CalculateDiscount(LandValue, DiscountPercentage);
            $('#TotalDiscountId').val(calculatedDiscount);
            var totalDiscountamt = parseFloat(calculatedDiscount) + parseFloat(SpecialDiscountAmt);
            $('#TotalDiscountAmtId').val(totalDiscountamt);
            var costHeads = document.getElementsByClassName("costHead");
            var costTotal = 0.0;
            for (var i = 0; i < costHeads.length; i++) {
                costTotal = parseFloat(costTotal) + parseFloat(costHeads[i].value);
            }
            var total = parseFloat(LandValue) + parseFloat(costTotal);
            var grandTotal = parseFloat(total) - parseFloat(totalDiscountamt);

           //var advanceAmount = ((parseFloat(grandTotal) / 100) * parseFloat(AdvancePercentage));
            var Percentage = ((parseFloat(BookingMoney)/parseFloat(grandTotal)) * 100);
            $('#AdvancePercentageId').val(Percentage);
            CalculateAll();
        }
        function bookingmonyPersentic() {
            var LandValue = $('#LandValueId').val();
            var AdvancePercentage = $('#AdvancePercentageId').val();
            var BookingMoney = $('#BookingMoneyId').val();
            var TotalAmount = $('#TotalAmountId').val();
            var DiscountPercentage = $('#DiscountId').val();
            var SpecialDiscountAmt = $('#SpecialDiscountAmtId').val();
            var calculatedDiscount = CalculateDiscount(LandValue, DiscountPercentage);
            $('#TotalDiscountId').val(calculatedDiscount);
            var totalDiscountamt = parseFloat(calculatedDiscount) + parseFloat(SpecialDiscountAmt);
            $('#TotalDiscountAmtId').val(totalDiscountamt);
            var costHeads = document.getElementsByClassName("costHead");
            var costTotal = 0.0;
            for (var i = 0; i < costHeads.length; i++) {
                costTotal = parseFloat(costTotal) + parseFloat(costHeads[i].value);
            }
            var total = parseFloat(LandValue) + parseFloat(costTotal);
            var grandTotal = parseFloat(total) - parseFloat(totalDiscountamt);

            var advanceAmount = ((parseFloat(grandTotal) / 100) * parseFloat(AdvancePercentage));
           // var Percentage = ((parseFloat(grandTotal) / parseFloat(BookingMoney)) * 100);
            $('#BookingMoneyId').val(advanceAmount);
            CalculateAll();
        }

        function ScheduleAmount (id) {
            var Schedule = document.getElementsByClassName("ScheduleAmount");
            var resAmount = $('#RestofAmountId').val();
            
            InstallmentTotal = 0.0;
            for (var i = 0; i < Schedule.length; i++) {
                if (parseFloat(Schedule[i].value) >= 0) {
                    InstallmentTotal = parseFloat(InstallmentTotal) + parseFloat(Schedule[i].value);
                }
                else {
                    alert("wrong input");
                }
            }
            $('#RemainingBalance').val($("#txtInstallmentAmount").val() - parseFloat(InstallmentTotal));
            if ($('#RemainingBalance').val() < 0) {
                $('#RemainingBalance').css("background-color", "#fdbbbb");
                $("#" + id + "Schedule").addClass("intro");
            } else {
                $('#RemainingBalance').css("background-color", "#eee");
                for (var i = 0; i < Schedule.length; i++) {
                    $("#" + Schedule[i].id).removeClass("intro");

                }
            }
            $('#InstallmentTotal').text(InstallmentTotal);

        };
        //$("#txtRatePerKatha").change(function () {
        //    var siz = $('#txtPlotSize').val();
        //    var rpk = $('#txtRatePerKatha').val();
        //    $('#LandValueId').val(siz * rpk)
        //    CalculateAll()
        //})


        function CalculateAll() {
            var LandValue = $('#LandValueId').val();
            var AdvancePercentage = $('#AdvancePercentageId').val();
            var TotalAmount = $('#TotalAmountId').val();
            var DiscountPercentage = $('#DiscountId').val();
            var SpecialDiscountAmt = $('#SpecialDiscountAmtId').val();
            var calculatedDiscount = CalculateDiscount(LandValue, DiscountPercentage);
            $('#TotalDiscountId').val(calculatedDiscount);
            var totalDiscountamt = parseFloat(calculatedDiscount) + parseFloat(SpecialDiscountAmt);
            $('#TotalDiscountAmtId').val(totalDiscountamt);
            var costHeads = document.getElementsByClassName("costHead");


            var costTotal = 0.0;
            costvalue = 0;
            for (var i = 0; i < costHeads.length; i++) {
                var checkboxId = "LstPurchaseCostHeads_" + i + "__IsSnstallmentInclude";

                if ($("#" + checkboxId).prop('checked') == true) {
                    costvalue = costvalue + Number(costHeads[i].value);
                }

                costTotal = parseFloat(costTotal) + parseFloat(costHeads[i].value);
            }
            var total = parseFloat(LandValue) + parseFloat(costTotal);
            var grandTotal = parseFloat(total) - parseFloat(totalDiscountamt);
            var tnstallmentAmount = Number(LandValue - totalDiscountamt) + Number(costvalue);
            $("#txtInstallmentAmount").val(tnstallmentAmount);
            //var advanceAmount = ((parseFloat(grandTotal) / 100) * parseFloat(AdvancePercentage));
            //var Percentage = ((parseFloat(grandTotal) / parseFloat(AdvancePercentage)) *100);
            var advanceAmount = $("#BookingMoneyId").val();
            var RestOfAmount = (parseFloat(grandTotal) - parseFloat(advanceAmount));

            $('#TotalAmountId').val(total);
            $('#GrandTotalAmountId').val(grandTotal);
            $('#BookingMoneyId').val(advanceAmount);
            $('#RestofAmountId').val(RestOfAmount);
            //$('#AdvancePercentageId').val(Percentage);
            $("#txtInstallmentAmount").val(tnstallmentAmount - advanceAmount);
            var id = $('#BookingInstallmentTypeId').val();
            //var onetime = $('#OneimeAmount').val();

            //if (onetime > 0) {
            //    $('#RemainingBalance').val(RestOfAmount - onetime);
            //} else {
            //    $('#RemainingBalance').val(RestOfAmount);
            //}
            if (id>0) {
                onlode();
            }


            $('#RemainingBalance').val(RestOfAmount - $("#txtInstallmentAmount").val());
            onlodehidesho();
        }



        //$("#OneimeAmount").keyup(function () {
        //    var onetime = parseFloat($('#OneimeAmount').val());
        //    var restofAmount = parseFloat( $('#RemainingBalance').val());
        //    if (restofAmount>onetime) {

        //    } else {
        //        alert("Remaining Balance is", restofAmount);
        //        $('#OneimeAmount').val(restofAmount);
        //    }

        //})


        function CalculateDiscount(LandValue, DiscountPercentage) {
            return ((LandValue / 100) * DiscountPercentage).toFixed(2);
        }

        $(function () {
            $("#Customer").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Vendor/ClientAutoComplete/',
                     /*   data: { companyId: "7", prefix: request.term },*/
                        data: "{ 'prefix': '" + request.term + "','companyId': '" +7+ "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#VendorId").val(i.item.val);
                },

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });


        //function myfunc() {
        //    var valueList = [];
        //    $('#itemDetails tr').each(function () {
        //        $(this).find("input[name='chk']:checked").each(function () {
        //            var values = [];
        //            $(this).closest("td").siblings("td").each(function () {
        //                values.push($(this).text());
        //            });
        //            valueList.push(values[0]);
        //        });
        //    });
        //    return valueList;
        //}
    </script>
    <script src="~/Scripts/ApplicationScripts/Inventory_Feed/Stock/GLDLCustomerBokkingEntry.js"></script>






}