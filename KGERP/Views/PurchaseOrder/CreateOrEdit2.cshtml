@model KGERP.ViewModel.PurchaseOrderViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        padding: 2px 0px 2px 0px;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.PurchaseOrder.PurchaseOrderId)
    @Html.HiddenFor(x => x.PurchaseOrder.CompanyId, new { @id = "hfCompanyId" })

    <div class="form-horizontal">
        <span style="font-size:20px;font-weight:bold">Purchase Order</span>
        <hr style="border-color:#ff0000; padding:0px;margin-top: 10px;margin-bottom: 10px; border-width: 2px;" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.PurchaseOrderNo, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.PurchaseOrderNo, new { htmlAttributes = new { @id = "txtPurchaseOrderNo", @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.PurchaseDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.PurchaseDate, new { htmlAttributes = new { @class = "datepicker", @style = "width: 240px;", @id = "txtFormulaDate", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.PurchaseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.ModeOfPurchaseId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.PurchaseOrder.ModeOfPurchaseId, new SelectList(Model.ModeOfPurchases, "Value", "Text"), "---Select---", new { id = "ddlModeOfPurchase", @class = "dropdownsize form-control"})
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.Days, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6" id="divCreditDuration" style="display:none">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.Days, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.Days, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.Days, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.SupplierId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.SupplierName, new { htmlAttributes = new { @class = "form-control", @name = "supplier", @id = "supplier" } })
                        @Html.HiddenFor(x => x.PurchaseOrder.SupplierId, new { @id = "supplierId", @name = "supplierId" })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.SupplierName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Proprietor Name", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBox("Name", null, new { @class = "form-control", @readonly = "readonly", @id = "txtName" })

                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBox("Address", null, new { @class = "form-control", @readonly = "readonly", @id = "txtAddress" })

                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBox("Phone", null, new { @class = "form-control", @readonly = "readonly", @id = "txtPhone" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.DemandId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.PurchaseOrder.DemandId, new SelectList(Model.Demands, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", @id = "ddlDemand" })
                    </div>
                </div>
            </div>
        </div>


        <div class="col-md-12">

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.ProductOriginId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.PurchaseOrder.ProductOriginId, new SelectList(Model.ProductOrigins, "Value", "Text"), "---Select---", new {@id="ddlProductOrigin", @class = "dropdownsize form-control", })
                    </div>
                </div>
            </div>
            <div class="col-md-6" id="divCompanyName" style="display:none">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.CompanyName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.CompanyName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    </div>
                </div>
            </div>
            <div class="col-md-6" id="divCountry" style="display:none">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.CountryId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.PurchaseOrder.CountryId, new SelectList(Model.Countries, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control", })
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.EmpId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.EmployeeName, new { htmlAttributes = new { @class = "form-control", @name = "employeeName", @id = "employeeName" } })
                        @Html.HiddenFor(x => x.PurchaseOrder.EmpId, new { @id = "empId", @name = "empId" })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.EmployeeName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.DeliveryDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.DeliveryDate, new { htmlAttributes = new { @class = "datepicker", @style = "width: 240px;", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.DeliveryDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.Remarks, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.Remarks, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrder.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseOrder.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PurchaseOrder.IsActive)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <table class="table table-responsive">
            <tr style="background-color:#4CAF50;color:#FFFFFF">
                <th>Raw Material</th>
                <th>Unit</th>
                <th>Present Stock</th>
                <th>Required Qty</th>
                <th>Purchased Qty</th>
                <th>Due Qty</th>
                <th>Demand Rate</th>
                <th>Purchase Qty</th>
                <th>Purchase Rate</th>
                <th>Amount</th>
                <th>Pack Size</th>
            </tr>
            <tr>
                <td width="15%">
                    @Html.HiddenFor(model => model.PurchaseOrderDetail.UnitId, new { @id = "hfUnitId" })
                    @Html.DropDownListFor(model => model.PurchaseOrderDetail.ProductId, new SelectList(Model.RawMaterials, "Value", "Text"), "--Select--", new { @class = "", @id = "ddlRawMaterial", @style = "padding:5px 0px 5px 0px;width: 200px;" })
                </td>
                <td width="5%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.UnitName, new { htmlAttributes = new { @id = "txtUnitName", @class = "", @style = "padding: 2px;width: 50px;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.PresentStock, new { htmlAttributes = new { @id = "txtPresentStock", @class = "", @style = "padding: 2px;width: 100px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.RequiredQty, new { htmlAttributes = new { @id = "txtRequiredQty", @class = "", @style = "padding: 2px;width: 100px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.PurchasedQty, new { htmlAttributes = new { @id = "txtPurchasedQty", @class = "", @style = "padding: 2px;width: 100px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="10%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.DueAmount, new { htmlAttributes = new { @id = "txtDueAmount", @class = "", @style = "padding: 2px;width: 100px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.DemandRate, new { htmlAttributes = new { @id = "txtDemandRate", @class = "", @style = "padding: 2px;width: 80px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="10%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.PurchaseQty, new { htmlAttributes = new { @type = "text", @id = "txtPurchaseQty", @class = "", @style = "padding: 2px;width: 100px;text-align:right;font-weight:bold", @onkeyup = "calculateAmount()" } })
                </td>
                <td width="10%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.PurchaseRate, new { htmlAttributes = new { @id = "txtPurchaseRate", @class = "", @style = "padding: 2px;width: 80px;text-align:right;font-weight:bold", @onkeyup = "calculateAmount()" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.Amount, new { htmlAttributes = new { @id = "txtAmount", @class = "", @style = "padding: 2px;width: 120px;text-align:right;border: 1px solid #999;background-color:#EEEEEE;", @readonly = "readlonly" } })
                </td>
                <td width="8%">
                    @Html.EditorFor(model => model.PurchaseOrderDetail.PackSize, new { htmlAttributes = new { @id = "txtAmount", @class = "", @style = "padding: 2px;width: 120px;text-align:right;", } })
                </td>
            </tr>

            <tr>
                <td colspan="11">
                    <br />
                    <a href="@Url.Action("Index", "PurchaseOrder", new { companyId = Model.PurchaseOrder.CompanyId})" class="btn btn-danger">
                        Close <i class="fa fa-close" aria-hidden="true"></i>
                    </a>
                    &nbsp;
                    <input type="submit" value="Submit" onclick="javascript: return SubmitForm();" class="btn btn-success" style="margin-right:10px" />
                </td>
            </tr>
        </table>
    </div>
}




@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">
        function SubmitForm() {
            var r = confirm("Are you sure to submit?");
            if (r == false) {
                return false;
            }
        }

        $(function () {
              $("#ddlModeOfPurchase").change(function () {
            var value = $("#ddlModeOfPurchase option:selected").text();
            if (value=='Credit Purchase') {
                $("#divCreditDuration").show();
            }
            else {
                $("#divCreditDuration").hide();
            }
        });
        })
        
        $(function () {
            $("#ddlProductOrigin").change(function () {
                var value = $("#ddlProductOrigin option:selected").text();
                if (value == 'LC (Foreign)') {
                    $("#divCountry").show();
                }
                else {
                    $("#divCountry").hide();
                }

                if (value == 'Local') {
                    $("#divCompanyName").show();
                }
                else {
                    $("#divCompanyName").hide();
                }
            });
        })
      

        function calculateAmount() {
            var purchaseQty = $('#txtPurchaseQty').val();
            var purchaseRate = $('#txtPurchaseRate').val();
            $('#txtAmount').val(parseFloat(parseFloat(purchaseQty) * parseFloat(purchaseRate)).toFixed(2));
        }


        $('#ddlDemand').change(function () {
            var demandId = $('#ddlDemand option:selected').val();
            var demand = $('#ddlDemand option:selected').text();
            var purchaseOrderNo = $('#txtPurchaseOrderNo').val();
            $('#txtPurchaseOrderNo').val(purchaseOrderNo + "/" + demand);
            $.ajax({
                type: "post",
                url: "/Products/GetRawmaterialByDemand",
                data: { demandId: $('#ddlDemand').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var RawMaterial = "<select>";
                    RawMaterial = RawMaterial + '<option value="">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        RawMaterial = RawMaterial + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    RawMaterial = RawMaterial + '</select>';
                    $('#ddlRawMaterial').html(RawMaterial);
                }
            });
        });

        $(function () {
            $("#ddlRawMaterial").change(function () {
                var productId = $("#ddlRawMaterial option:selected").val();
                var demandId = $('#ddlDemand option:selected').val();
                $.ajax({
                    url: '/PurchaseOrder/GetPurchaseOrderItemInfo?productId=' + productId + '&demandId=' + demandId + '',
                    type: "GET",
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (result) {
                       
                        $('#hfUnitId').val(result.UnitId);
                        $('#txtUnitName').val(result.UnitName);
                        $('#txtPresentStock').val(result.PresentStock);
                        $('#txtRequiredQty').val(result.RequiredQty);
                        $('#txtPurchasedQty').val(result.PurchasedQty);
                        $('#txtDueAmount').val(result.DueAmount);
                        $('#txtDemandRate').val(result.DemandRate);
                        $('#txtPurchaseQty').val(result.PurchaseQty);
                        $('#txtPurchaseRate').val(result.PurchaseRate);
                        $('#txtAmount').val(result.Amount);
                    },
                    error: function (xhr) {
                        alert('error');
                    }
                });
            });
        });

        $(function () {
            $("#supplier").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Vendor/SupplierAutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#supplierId").val(i.item.val);
                },
                minLength: 1,
                change: function (event, ui) {
                    loadCustomerInformation(ui.item.val);
                }



            }).focus(function () {
                $(this).autocomplete("search");
            });
        });
        function loadCustomerInformation(supplierId) {
            $.ajax({
                url: '/Vendor/GetSupplierInformation?supplierId=' + supplierId,
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    var result = JSON.parse(data);
                    $('#txtName').val(result.ContactName);
                    $('#txtAddress').val(result.Address);
                    $('#txtPhone').val(result.Phone);;
                },
                error: function (xhr) {
                    alert('error');
                }
            });

        }

        $(function () {
            $("#employeeName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeDesignationAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#empId").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });


    </script>
}
