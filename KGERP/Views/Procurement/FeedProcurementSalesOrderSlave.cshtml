@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;


@{
    ViewData["Title"] = "Sales Invoice";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double TotalPrice = 0;
    decimal TotalDiscount = 0;
    decimal DiscountUnit = 0;

}


<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
        <span>
            Sales Invoice History of: 
            @*<a target="_blank" href="~/Procurement/ProcurementSalesOrderDetailsReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId">@Model.OrderNo</a>*@
            <a class="btn-link linkPointer link-black" target="_blank" href="~/Report/GCCLSalesInvoiceReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId&reportName=GCCLSalesInvoiceReports">@Model.OrderNo</a>

        </span>
        }
        else
        {
            <span>
                Sales Invoice
            </span>
        }


    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Sales Invoice</li>
    </ol>
</section>
@using (Html.BeginForm("FeedProcurementSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "procurementSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })
                @Html.HiddenFor(model => model.CreditLimit, new { id = "hidCreditLimit" })
                @Html.HiddenFor(model => model.PayableAmount, new { id = "hidPayableAmount" })


                <div class="box-danger">

                    <!-- /.box-header -->
                    <div class="box-body">
                        @if (Model.OrderMasterId > 0)
                        {
                            @Html.HiddenFor(model => model.CustomerPaymentMethodEnumFK, new { id = "ddlSupplierPaymentMethodEnumFK" })
                            @Html.HiddenFor(model => model.CustomerId, new { id = "ddlCustomerId" })


                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table table-sm table-hover table-condensed">
                                    <tr>
                                        <th style="width:18%">
                                            Invoice No
                                        </th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">
                                            <label class="col-form-label">@Model.OrderNo</label>
                                        </td>
                                        <th style="width:18%"> Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>
                                    <tr>
                                        <th>Status</th>
                                        <th>:</th>
                                        <td>@Model.EnumStatusName</td>

                                        <th>Final Destination</th>
                                        <th>:</th>
                                        <td>@Model.FinalDestination</td>

                                    </tr>
                                    <tr>
                                        <th>Customer</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerName</td>

                                        <th>Customer Code</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerCode</td>

                                    </tr>
                                    <tr>
                                        <th>Propietor</th>
                                        <th>:</th>
                                        <td>@Model.Propietor</td>
                                        <th>Payment Method</th>
                                        <th>:</th>
                                        <td>@Model.POPaymentMethodName</td>
                                    </tr>
                                    <tr>
                                        <th>
                                            Address
                                        </th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                        <th>
                                            Zone
                                        </th>
                                        <th>:</th>
                                        <td>@Model.ZoneName</td>
                                    </tr>
                                    <tr>
                                        <th>
                                            Contact Person
                                        </th>
                                        <th>:</th>
                                        <td>@Model.ContactPerson</td>
                                        <th>
                                        <th>Customer Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>
                                    
                                    <tr>
                                        <th>Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Territory Incharge</th>
                                        <th>:</th>
                                        <td>@Model.SubZoneIncharge</td>
                                    </tr>
                                    <tr>
                                        <th>Order Location</th>
                                        <th>:</th>
                                        <td>@Model.Warehouse</td>
                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>                              
                                    <tr>
                                        <th></th>
                                        <th></th>
                                        <td></td>
                                        <th>Created Date</th>
                                        <th>:</th>
                                        <td>@Model.CreatedDate</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        }
                        <div class="box-body">

                            @if (Model.OrderMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Invoice Date</label>
                                            <input name="OrderDate" asp-for="OrderDate" type="text" value="@DateTime.Today.ToString("yyyy-MM-dd")" required="required" class="datePicker form-control" id="txtOrderDate" placeholder="Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Payment Method</label>
                                            @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlSupplierPaymentMethodEnumFK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Zone</label>
                                            @Html.DropDownListFor(model => model.ZoneFk, Model.ZoneList as SelectList, "==Select Zone==", new { id = "ddlZoneFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.ZoneFk, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label>Customer</label>
                                            @Html.DropDownListFor(model => model.CustomerId, Model.CustomerList as SelectList, "==Select Customer==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <span id="txtCreditLimit" style="font-weight:bold;color:darkred;text-decoration:underline;text-decoration-color:orangered;text-align:right">

                                            </span>
                                            <br />
                                            <span id="txtCustomerAddress" style="font-weight:bold;color:darkred;text-decoration:underline;text-decoration-color:orangered;text-align:right">

                                            </span>

                                        </div>
                                    </div>
                                    
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Expected Delivery Date</label>
                                            <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="text" required="required" class="datePicker form-control" id="txtDeliveryDate" placeholder="Expected Delivery Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Order Location:</label>
                                            @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Select Order Location==", new { id = "ddlStockInfoId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.LabelFor(model => model.OrderNo, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.OrderNo, new { htmlAttributes = new { @id = "txtOrderNo", @class = "form-control", @autocomplete = "off", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.OrderNo, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Sale Person:</label>
                                            @Html.DropDownListFor(model => model.SalePersonId, Model.MarketingOfficers as SelectList, "--Sale Person--", new { @class = "form-control", @id = "ddlMarketingOfficer" })
                                            @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription" class="col-form-label">Remarks:</label>
                                            @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                            }
                        <div class="row">
                            <div class="col-md-4" style="padding:0px 2px 0px 8px;">
                                <div class="form-group" style="padding:0px">
                                    <label for="message-text" class="col-form-label">Finish Item:</label>

                                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Product Name", @id = "txtProductName" } })

                                    @Html.HiddenFor(model => model.FProductId, new { id = "ddlRProductFK" })
                                    @Html.ValidationMessageFor(model => model.FProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="col-md-2" style="padding:0px">
                                <div class="form-group">
                                    <label>Order Qty</label>
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.Qty, new { id = "txtPurchaseQuantity", @onkeyup = "TotalAmountSumation()", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchase Quantity", required = "Required" })
                                        @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })

                                        <div class="input-group-addon">
                                            <span class="txtUnitName"></span>
                                        </div>
                                        <span class="text-danger" id="spnCreditLimitExceed"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-2" style="padding:0px">
                                <div class="form-group">
                                    <label>Unit Price</label>

                                    @Html.TextBoxFor(model => model.UnitPrice, new { id = "txtUnitPrice", type = "number", @onkeyup = "TotalAmountSumation()", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Unit Price", required = "Required" })
                                    @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })

                                </div>
                            </div>
                            <div class="col-md-1" style="padding:0px">
                                <div class="form-group">
                                    <label>Unit Dis.</label>

                                    @Html.TextBoxFor(model => model.ProductDiscountUnit, new { id = "ProductDiscountUnit", type = "number", @onkeyup = "TotalAmountWithDiscountSumation()", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Discount", required = "Required" })
                                    @Html.ValidationMessageFor(model => model.ProductDiscountUnit, "", new { @class = "text-danger" })

                                </div>
                            </div>
                            <div class="col-md-1" style="padding:0px">
                                <div class="form-group">
                                    <label>TTL Dis.</label>

                                    @Html.TextBoxFor(model => model.ProductDiscountTotal, new { id = "txtProductDiscountTotal", type = "number", @readonly = "readonly", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Discount", required = "Required" })
                                    @Html.ValidationMessageFor(model => model.ProductDiscountTotal, "", new { @class = "text-danger" })

                                </div>
                            </div>
                            <div class="col-md-2" style="padding:0px 0px 8px 0px;">
                                <div class="form-group">
                                    <label>Total Amount</label>
                                    @Html.TextBoxFor(model => model.TotalAmount, new { id = "txtTotalAmount", type = "number", @readonly = "readonly", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Total Price", required = "Required" })
                                    @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })

                                </div>
                            </div>
                        </div>
                        </div>
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-3">
                                    @*<table class="table" id="tblStockAvailable">
                                        <tr>
                                            <th>Available Stock: </th>
                                            <th id="stockAvailable"></th>
                                        </tr>
                                    </table>*@
                                </div>
                                <div class="col-md-5">
                                    @if (Model.OrderMasterId > 0)
                                    {
                                        <div class="col-md-9">
                                            <div class="form-group">
                                                @Html.DropDownListFor(model => model.PromotionalOfferId, Model.PromoOfferList as SelectList, "==Select Promotion==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%" })
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="submit" id="poConfirmPromoBtn" class="btn btn-warning">
                                              
                                                Confirm
                                            </button>
                                        </div>
                                    }

                                </div>
                                <div class="col-lg-4 col-md-4">
                                    <button type="submit" id="poCreateBtn" class="btn btn-primary btn-block">
                                        <i class='fa fa-plus'></i>
                                        @if (Model.OrderMasterId > 0)
                                        {
                                            <span>Add Item In Invoice</span>
                                        }
                                        else
                                        {
                                            <span>Create New Invoice</span>
                                        }
                                    </button>

                                </div>
                            </div>
                        </div>

                        <!--Body Will by Start Here-->
                        @{
                            if (Model.OrderMasterId > 0)
                            {

                                @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                                <div class="table-responsive col-md-12  text-nowrap">
                                    <table id="KgErpDataTable" class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th style="padding:5px;text-align:center;">SL</th>
                                                <th style="padding:5px;text-align:left;">Item</th>
                                                @*<th style="text-align: left;padding-left:5px;">Pack Quantity</th>
                                                    <th style="text-align: left;padding-left:5px;">Consumption</th>*@
                                                <th style="padding:5px;text-align:center;">Quantity</th>
                                                <th style="padding:5px;text-align:center;">Unit Price</th>
                                                <th style="padding:5px;text-align:center;">Discount Per Unit</th>
                                                    <th style="padding:5px;text-align:center;">TTL Discount</th>

                                                <th style="padding:5px;text-align:right;">Total Price</th>
                                                @if (Model.Status == (int)POStatusEnum.Draft)
                                                {
                                                    <th style="padding:5px;text-align:center;">Action</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.DataListSlave)
                                            {
                                                TotalPrice += item.TotalAmount;
                                                TotalDiscount += item.ProductDiscountTotal;
                                                DiscountUnit += item.ProductDiscountUnit;
                                                <tr>
                                                    <td style="padding:5px">@(++sl)</td>
                                                    <td style="padding:5px;text-align:left;">@item.ProductName <span class="label label-warning">@(item.PromotionalOfferId != null? "Promotion Item":"")</span>  </td>
                                                    @*<td style="padding:5px;text-align:left;">@item.PackQuantity</td>
                                                        <td style="padding:5px;text-align:left;">@item.Consumption</td>*@

                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>

                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>
                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.ProductDiscountUnit)</td>

                                                        <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.ProductDiscountTotal)</td>

                                                    <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}",item.TotalAmount)</td>
                                                    @{ if (Model.Status == (int)POStatusEnum.Draft)
                                                        {
                                                            <td style="padding:5px;text-align:center;">
                                                                <a id="@item.ID" onclick=" makeEditble(@item.OrderDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                                <a id="@item.ID" onclick="makeDeletale(@item.OrderDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteProcurementPurchaseOrderSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                            </td>
                                                        }
                                                    }
                                                </tr>
                                            }
                                        </tbody>

                                        <tfoot>
                                            <tr>
                                                <th></th>
                                                <th colspan="5">GROSS AMOUNT (IN BDT)</th>


                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", TotalPrice) </th>
                                                @if (Model.Status == (int)POStatusEnum.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>
                                            <tr>
                                                <th></th>
                                                <th colspan="5">PRODUCT DISCOUNT</th>


                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", TotalDiscount) </th>
                                                @if (Model.Status == (int)POStatusEnum.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>
                                            @if (Model.Status == (int)POStatusEnum.Submitted)
                                            {
                                                <tr>
                                                    <th></th>
                                                    <th colspan="5">GLOBAL DISCOUNT</th>


                                                    <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.DiscountAmount) </th>
                                                    @if (Model.Status == (int)POStatusEnum.Draft)
                                                    {
                                                        <th></th>
                                                    }
                                                </tr>
                                            }

                                            <tr>
                                                <th></th>
                                                <th colspan="5">NET AMOUNT (IN BDT)</th>


                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Convert.ToDecimal(TotalPrice) - TotalDiscount) </th>
                                                @if (Model.Status == (int)POStatusEnum.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>




                                            @if (Model.Status == (int)POStatusEnum.Draft)
                                            {
                                                <tr>
                                                    <th></th>
                                                    <th></th>
                                                    <th></th>
                                                    <th></th>
                                                    <th>
                                                        Discount (%)
                                                    </th>
                                                    <th style="text-align: right;">
                                                        Discount Amount
                                                    </th>

                                                    <th style="text-align: right;">
                                                        Payable Amount
                                                    </th>
                                                    @if (Model.Status == (int)POStatusEnum.Draft)
                                                    {
                                                        <th></th>
                                                    }
                                                </tr>
                                                <tr>
                                                    <th></th>
                                                    <th></th>
                                                    <th></th>
                                                    <th>GLOBAL DISCOUNT</th>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.DiscountRate, new { id = "txtDiscountParcentage", @onkeyup = "fnDiscountParcentage()", @class = "form-control input-sm", @placeholder = "In %", @style = "border:1px black solid;font-size:larger;font-weight:bolder;" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.DiscountAmount, new { id = "txtTotalDiscount", @onkeyup = "fnTotalDiscountnction()", @class = "form-control input-sm", @placeholder = "Discount", @style = "border:1px black solid;font-size:larger;font-weight:bolder;text-align:right;" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.TotalAmountAfterDiscount, new { id = "txtPayableAmount", @readonly = "readonly", @class = "form-control input-sm", @placeholder = "Discount", @style = "border:1px black solid;font-size:larger;font-weight:bolder;text-align:right;" })
                                                    </td>
                                                    @if (Model.Status == (int)POStatusEnum.Draft)
                                                    {
                                                        <th>
                                                            <button type="submit" id="poCreateBtn" class="btn btn-primary btn-block">
                                                                <i class='fa fa-save'></i>
                                                                Save
                                                            </button>
                                                        </th>
                                                    }
                                                </tr>
                                            }
                                        </tfoot>
                                    </table>
                                </div>
                            }
                        }
                    </div>
                    <div class="box-footer">
                        @if (Model.OrderMasterId > 0)
                        {
                        <div class="row">
                            <div class="col-md-6">
                                <a class="btn btn-warning" style="width:100%" target="_blank" href="~/Report/GetOrderInvoiceReport?orderMasterId=@Model.OrderMasterId"><i class="fa fa-print"></i> Sales Invoice</a>

                            </div>
                          
                            <div class="col-md-6">
                                <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitProcurementPurchaseOrderModal" data-placement="top">
                                    
                                    @if (Model.Status == (int)POStatusEnum.Submitted)
                                    {
                                        <i>Undo Submit</i>
                                    }
                                    else
                                    {
                                        <i class="fa fa-save"></i><i>&nbsp;Submit</i>
                                    }
                                </a>
                            </div>

                        </div>

                        }
                    </div>
                </div>
            </div>

        </div>
    </section>
}
@using (Html.BeginForm("FeedSubmitOrderMastersFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitProcurementPurchaseOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (<span id="submitOrDraftPOCIDText"></span>)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidsubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidsubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@using (Html.BeginForm("DeleteSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteProcurementPurchaseOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteProcurementPurchaseOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })

                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })

                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseRequisitionSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section scripts {

    <script type="text/javascript">

        function calculateAmount() {
            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = (Number(packQuantity) * Number(consumption)) / 1000;
            $('#txtPurchaseQuantity').val(Number((quantityInKg).toFixed(3)))
        }


        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
                                                    }
        function resetProcurementPurchaseRequisitionSlaveForm() {
            $('#procurementSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }
        function fnDiscountParcentage() {
                 var discountParcentage = $("#txtDiscountParcentage").val();
                var totalIncludingVat = "@(Convert.ToDecimal(TotalPrice) - TotalDiscount)";
              
                $('#txtTotalDiscount').val((Number((totalIncludingVat / 100) * discountParcentage)).toFixed(2));
            $('#txtPayableAmount').val((Number(totalIncludingVat) - (Number((totalIncludingVat / 100) * discountParcentage)))).toFixed(2);
            }
            function fnTotalDiscountnction() {
                var totalDiscount = $("#txtTotalDiscount").val();
                var totalIncludingVat =  "@(Convert.ToDecimal(TotalPrice) - TotalDiscount)";;

                $('#txtDiscountParcentage').val((Number((totalDiscount * 100) / totalIncludingVat)).toFixed(2));
                $('#txtPayableAmount').val((Number(totalIncludingVat) - Number(totalDiscount)).toFixed(2));
            }

        $(document).ready(function () {
            //
            //$('#tblStockAvailable').hide();
            $('#datePickerById').datepicker({
                format: "yyyy-mm-dd",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });
            if (Number("@Model.TotalAmountAfterDiscount") == 0) {
                $('#txtPayableAmount').val("@(Convert.ToDecimal(TotalPrice) - TotalDiscount)");
            }
            @*$('#txtTotalDiscount').val("@TotalDiscount");
            $('#txtDiscountParcentage').val("@(Convert.ToDecimal(TotalPrice) > 0 ?(TotalDiscount * 100) / Convert.ToDecimal(TotalPrice):0  )");*@

            //var valDis = $('#txtTotalDiscount').val();
            //var parVale = $('#txtDiscountParcentage').val();
            //if (Number(valDis) > 0) {
            //    $("#txtTotalDiscount").attr('disabled', 'disabled');

            //}
            //if (Number(parVale) > 0) {
            //    $("#txtDiscountParcentage").attr('disabled', 'disabled');

            //}

            $("#ddlStockInfoId").change(function () {
                var stockInfoId = $("#ddlStockInfoId option:selected").val();
                var productType = 'F';

                $.ajax({
                    url: '/OrderMaster/GetNewOrderNo?stockInfoId=' + stockInfoId + "&productType=" + productType+"",
                    type: "Post",
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (response) {
                        $('#txtOrderNo').val(response);
                    },
                    error: function (xhr) {
                        //alert('error');
                    }
                });
            });

            $("#ddlFinalDestinationCountryFk").val(19).change();
              $("#txtProductName").autocomplete({
                source: function (request, response) {
                    
                    $.ajax({
                       url:"@Url.Action("GCCLAutoCompleteRawPackingMaterialsGet", "Configuration")",
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { companyId: "@Model.CompanyFK", prefix: request.term },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },

            select: function (e, i) {
              
                    $("#ddlRProductFK").val(i.item.val);

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                        data: { companyId: "@Model.CompanyFK", productId: i.item.val },
                        success: function (data) {
                           
                            var items = "";
                            if (data) {
                                //$('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);

                                //$('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);
                                $("#txtUnitPrice").val(data.UnitPrice);

                            }
                        }
                    });
                $('#txtPurchaseQuantity').focus();

                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });




            $("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var productId = $("#ddlRProductFK").val();

                $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", productId: productId },
                        success: function (data) {
                            var items = "";
                            if (data) {
                               // $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                //$('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);
                                var customerTypeFK = $("#ddlSupplierPaymentMethodEnumFK").val();
                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Cash)") {

                                }
                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Credit)") {
                                    $("#txtUnitPrice").val(data.CreditSalePrice);
                                }
                            }
                        }
                    });
            })

            $("#ddlZoneFk").change(function () {
                var zoneFk = $("#ddlZoneFk").val();
                $.ajax({
                type: "GET",
                url: "@Url.Action("CustomerLisByZonetGet", "Procurement")",
                datatype: "Json",
                    data: { zoneId: zoneFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });
                        }
                    }
                });
            })

            $("#ddlCustomerId").change(function () {
                var customerId = $("#ddlCustomerId").val();
                $.ajax({
                type: "GET",
                url: "@Url.Action("CustomerRecevableAmountByCustomer", "Procurement")",
                datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", customerId: customerId},
                    success: function (data) {
                    var items = "";
                        if (data) {

                            $("#txtCreditLimit").text("Credit Limit of " + data.CommonCustomerName + " is " + data.CreditLimit + " and Recevable Amount is " + (data.PayableAmount - (data.ReturnAmount + data.InAmount)));
                            $("#hidCustomerTypeFk").val(data.CustomerTypeFk);
                            $("#txtCustomerAddress").text(data.CustomerAddress);
                            $("#hidCreditLimit").val(data.CreditLimit);
                            $("#hidPayableAmount").val((data.PayableAmount - (data.ReturnAmount + data.InAmount)));


                        }
                    }
                });


                $.ajax({
                    type: "post",
                    url: "/OfficerAssign/GetMarketingOfficersByCustomerZone",
                    data: { customerId: customerId },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        var MarketingOfficer = "<select>";
                        MarketingOfficer = MarketingOfficer + '<option value="">--Select--</option>';
                        for (var i = 0; i < data.length; i++) {
                            MarketingOfficer = MarketingOfficer + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                        }
                        MarketingOfficer = MarketingOfficer + '</select>';
                        $('#ddlMarketingOfficer').html(MarketingOfficer);
                    }
                });
            })

            $("#TermsAndConditionid").change(function () {
                                                            var termsAndConditionid = $('#TermsAndConditionid').val();
                $.ajax({
                                                            type: "GET",
                    url: "@Url.Action("GetTermNCondition", "Procurement")",
                    datatype: "Json",
                    data: { id: termsAndConditionid },
                    success: function (data) {
                        $('#txtTermsAndCondition').empty();
                        $('#txtTermsAndCondition').append(data.description);

                                                                }
                                                            });
                                                        });



            $("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var paymethod = $("#ddlSupplierPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }

            })


        });
            function makeEditble(rowId) {
              
            $.ajax({

                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {
                    
                      $('#poCreateBtn').html("<i class='fa fa-edit'></i>&nbsp;Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductCategoryName +" "+ data.ProductSubCategoryName + " "+ data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);

                      $("#txtPurchaseQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {
                $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                        datatype: "Json",
                    data: { orderMasterId: rowId },
                        success: function (data) {
                            $('#submitOrDraftPOCIDText').text(data.OrderNo);

                            if (data.Status == 0) {
                                $('.submitOrDraftText').text("Make Submit");
                            }
                            else {
                                $('.submitOrDraftText').text("Make Draft");

                            }
                        }
                 });
                $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }



        function TotalAmountSumation() {
            var purchaseQuantity = $("#txtPurchaseQuantity").val();
            var unitPrice = $("#txtUnitPrice").val();

            $("#txtTotalAmount").val(Number(purchaseQuantity) * Number(unitPrice));

            var hidCreditLimitAmount = $("#hidCreditLimit").val();
            var hidPayableAmountAmount = $("#hidPayableAmount").val();

            var balanceAmount = Number(hidCreditLimitAmount) - Number(hidPayableAmountAmount);
            var txtTotalValue = $("#txtTotalAmount").val();
            if (txtTotalValue > balanceAmount) {
                $(":submit").attr("disabled", true);
                $("#spnCreditLimitExceed").text("Your Credit Limit is exceed.")
            }
            else {
                $(":submit").removeAttr("disabled");
                $("#spnCreditLimitExceed").text("")
            }



        }

        function TotalAmountWithDiscountSumation() {
            var purchaseQuantity = $("#txtPurchaseQuantity").val();

            var discountUnit = $("#ProductDiscountUnit").val();


            $("#txtProductDiscountTotal").val(Number(purchaseQuantity) * Number(discountUnit));

            var hidCreditLimitAmount = $("#hidCreditLimit").val();
            var hidPayableAmountAmount = $("#hidPayableAmount").val();

            var balanceAmount = Number(hidCreditLimitAmount) - Number(hidPayableAmountAmount);
            var txtTotalValue = $("#txtTotalAmount").val();
            if (txtTotalValue > balanceAmount) {
                $(":submit").attr("disabled", true);
                $("#spnCreditLimitExceed").text("Your Credit Limit is exceed.")
            }
            else {
                $(":submit").removeAttr("disabled");
                $("#spnCreditLimitExceed").text("")
            }
        }
    </script>
}