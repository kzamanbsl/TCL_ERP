@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;


@{
    ViewData["Title"] = "Sales Invoice By PRF";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double TotalPrice = 0;
    decimal TotalDiscount = 0;
    decimal DiscountUnit = 0;

}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
    .hide{
    display:none;
    }
    .kgCustomAlert {
        color: #8a6d3b;
        background-color: #fcf8e3;
        border-color: #faebcc;
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }
</style>

<section class="content-header">
    <h1>
        
            <span>
                Sales Invoice
            </span>
       


    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Sales Invoice By PRF</li>
    </ol>
</section>
@using (Html.BeginForm("GCCLProcurementSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "procurementSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })
                @Html.HiddenFor(model => model.CreditLimit, new { id = "hidCreditLimit" })
                @Html.HiddenFor(model => model.PayableAmount, new { id = "hidPayableAmount" })

                <div class=" kgCustomAlert mt-1 hide" id="kgCustomAlert"  role="alert" style="margin-top:5px;">
                    <strong id="alertMessage">
                       
                    </strong>

                </div>
                <div class="box-danger">

                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="box-body">

                            <div class="row">
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Invoice Date</label>
                                        <input name="OrderDate" asp-for="OrderDate" type="text" value="@DateTime.Today.ToString("yyyy-MM-dd")" required="required" class="datePicker form-control" id="txtOrderDate" placeholder="Date" autocomplete="off" onchange="clrValidation("txtOrderDate")">
                                        @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Payment Method</label>
                                        @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlSupplierPaymentMethodEnumFK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @if (Model.CompanyFK == 8)
                                        {
                                            <label>Zone</label>
                                        }
                                        else
                                        {
                                            <label>Territory</label>
                                        }
                                        
                                        @Html.DropDownListFor(model => model.SubZoneFk, Model.SubZoneList as SelectList, "==Select Territory==", new { id = "ddlSubZoneFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.SubZoneFk, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Customer</label>
                                        @Html.DropDownListFor(model => model.CustomerId, Model.CustomerList as SelectList, "==Select Customer==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <span id="txtCreditLimit" style="font-weight:bold;color:darkred;text-decoration:underline;text-decoration-color:orangered;text-align:right">

                                        </span>
                                        <br />
                                        <span id="txtCustomerAddress" style="font-weight:bold;color:darkred;text-decoration:underline;text-decoration-color:orangered;text-align:right">

                                        </span>

                                    </div>
                                </div>
                                @*<div class="col-md-6">
                            <input id="txtCustomerRecevable" class="form-control" type="text" name="name" />

                        </div>*@
                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Delivery Date</label>
                                        <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="text" required="required" class="datePicker form-control" id="txtDeliveryDate" placeholder="Expected Delivery Date" autocomplete="off">
                                        @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group" style="padding:0px">
                                        <label for="message-text" class="col-form-label">Final Destination:</label>
                                        @Html.EditorFor(model => model.FinalDestination, new { htmlAttributes = new { @class = "form-control", @id = "txtFinalDestination" } })
                                        @Html.ValidationMessageFor(model => model.FinalDestination, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group" style="padding:0px">
                                        <label for="message-text" class="col-form-label">Warehouse:</label>
                                        @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Warehouse==", new { id = "ddlStockInfoId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                        @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group" style="padding:0px">
                                        <label for="message-text" class="col-form-label">Transportation Note:</label>
                                        @Html.EditorFor(model => model.CourierNo, new { htmlAttributes = new { @class = "form-control", @id = "txtCourierNo" } })
                                        @Html.ValidationMessageFor(model => model.CourierNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group" style="padding:0px">
                                        <label for="message-text" class="col-form-label">Transportation Charge:</label>
                                        @Html.EditorFor(model => model.CourierCharge, new { htmlAttributes = new { @class = "form-control", @id = "txtCourierCharge" } })
                                        @Html.ValidationMessageFor(model => model.CourierCharge, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="form-group">
                                        <label for="txtDescription" class="col-form-label">Remarks:</label>
                                        @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control", rows = 2 })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="ddlDemands" class="col-form-label">Demand No:</label>
                                        <select id="ddlDemands" required class="form-control selectDropdown">
                                        </select>

                                    </div>
                                </div>
                            </div>



                            <div class="row" id="demandTable">

                            </div>
                        </div>
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-3">
                                    <table class="table" id="tblStockAvailable">
                                        <tr>
                                            <th>Available Stock: </th>
                                            <th id="stockAvailable"></th>
                                        </tr>
                                    </table>
                                </div>
                                @*<div class="col-md-5">
                            @if (Model.OrderMasterId > 0)
                            {
                                <div class="col-md-9">
                                    <div class="form-group">
                                        @Html.DropDownListFor(model => model.PromotionalOfferId, Model.PromoOfferList as SelectList, "==Select Promotion==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <button type="submit" id="poConfirmPromoBtn" class="btn btn-warning">

                                        Confirm
                                    </button>
                                </div>
                            }

                        </div>*@

                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </section>
}
@using (Html.BeginForm("GCCLSubmitOrderMastersFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitProcurementPurchaseOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (<span id="submitOrDraftPOCIDText"></span>)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidsubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidsubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@using (Html.BeginForm("DeleteSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteProcurementPurchaseOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteProcurementPurchaseOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })

                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })

                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseRequisitionSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section scripts {

    <script type="text/javascript">

        function calculateAmount() {
            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = (Number(packQuantity) * Number(consumption)) / 1000;
            $('#txtPurchaseQuantity').val(Number((quantityInKg).toFixed(3)))
        }


        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
                                                    }
        function resetProcurementPurchaseRequisitionSlaveForm() {
            $('#procurementSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }
        function fnDiscountParcentage() {
                 var discountParcentage = $("#txtDiscountParcentage").val();
                var totalIncludingVat = "@(Convert.ToDecimal(TotalPrice) - TotalDiscount)";

                $('#txtTotalDiscount').val((Number((totalIncludingVat / 100) * discountParcentage)).toFixed(2));
            $('#txtPayableAmount').val((Number(totalIncludingVat) - (Number((totalIncludingVat / 100) * discountParcentage)))).toFixed(2);
            }
            function fnTotalDiscountnction() {
                var totalDiscount = $("#txtTotalDiscount").val();
                var totalIncludingVat =  "@(Convert.ToDecimal(TotalPrice) - TotalDiscount)";;

                $('#txtDiscountParcentage').val((Number((totalDiscount * 100) / totalIncludingVat)).toFixed(2));
                $('#txtPayableAmount').val((Number(totalIncludingVat) - Number(totalDiscount)).toFixed(2));
            }

        $(document).ready(function () {
            //
            $('#tblStockAvailable').hide();
            $('#datePickerById').datepicker({
                format: "yyyy-mm-dd",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });
            if (Number("@Model.TotalAmountAfterDiscount") == 0) {
                $('#txtPayableAmount').val("@(Convert.ToDecimal(TotalPrice) - TotalDiscount)");
            }
            @*$('#txtTotalDiscount').val("@TotalDiscount");
            $('#txtDiscountParcentage').val("@(Convert.ToDecimal(TotalPrice) > 0 ?(TotalDiscount * 100) / Convert.ToDecimal(TotalPrice):0  )");*@

            //var valDis = $('#txtTotalDiscount').val();
            //var parVale = $('#txtDiscountParcentage').val();
            //if (Number(valDis) > 0) {
            //    $("#txtTotalDiscount").attr('disabled', 'disabled');

            //}
            //if (Number(parVale) > 0) {
            //    $("#txtDiscountParcentage").attr('disabled', 'disabled');

            //}

            $("#ddlFinalDestinationCountryFk").val(19).change();
              $("#txtProductName").autocomplete({
                source: function (request, response) {

                    $.ajax({
                       url:"@Url.Action("GCCLAutoCompleteRawPackingMaterialsGet", "Configuration")",
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { companyId: "@Model.CompanyFK", prefix: request.term },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },

            select: function (e, i) {

                    $("#ddlRProductFK").val(i.item.val);

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                        data: { companyId: "@Model.CompanyFK", productId: i.item.val },
                        success: function (data) {
                            var items = "";
                            if (data) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);

                                $('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);
                                //$("#txtUnitPrice").val(data.UnitPrice);
                                var customerTypeFK = $("#ddlSupplierPaymentMethodEnumFK").val();

                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Cash)") {
                                    $("#txtUnitPrice").val(data.TPPrice);
                                    //$("#txtDiscountUnit").val(data.UnitPrice - data.TPPrice)
                                }
                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Credit)") {
                                    $("#txtUnitPrice").val(data.CreditSalePrice);
                                    //$("#txtDiscountUnit").val(0)
                                }
                            }
                        }
                    });
                $('#txtPurchaseQuantity').focus();

                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });

            @*$("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var productId = $("#ddlRProductFK").val();
                StartLoader();
                $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", productId: productId },
                        success: function (data) {
                            var items = "";
                            EndLoader();
                            if (data) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                $('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);
                                var customerTypeFK = $("#ddlSupplierPaymentMethodEnumFK").val();
                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Cash)") {
                                    $("#txtUnitPrice").val(data.TPPrice);
                                }
                                if (customerTypeFK == "@((int)VendorsPaymentMethodEnum.Credit)") {
                                    $("#txtUnitPrice").val(data.CreditSalePrice);
                                }
                            }

                    },
                    error: function (error) {
                        console.error(error);
                        EndLoader();
                    }
                    });
            })*@

            $("#ddlSubZoneFk").change(function () {
                var subZoneFk = $("#ddlSubZoneFk").val();
                var CompanyID =@Html.Raw(Json.Encode(Model.CompanyFK));
               
                var ActionName = CompanyID == 8 ? 'CustomerLisByZonetGet' : 'CustomerLisBySubZonetGet';

                if (CompanyID == 8) {
                    StartLoader();
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("CustomerLisByZonetGet","Procurement")",
                        datatype: "Json",
                        data: { zoneId: subZoneFk },
                        success: function (data) {
                            var items = "";
                            if (data) {
                                $("#ddlCustomerId").empty();
                                $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                                $(data).each(function (index, item) {
                                    $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                                });
                            }
                            EndLoader();
                        },
                        error: function (error) {
                            EndLoader();
                        }
                    });
                }
                else {
                    StartLoader();
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("CustomerLisBySubZonetGet", "Procurement")",
                        datatype: "Json",
                        data: { subZoneId: subZoneFk },
                        success: function (data) {
                            var items = "";
                            if (data) {
                                $("#ddlCustomerId").empty();
                                $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                                $(data).each(function (index, item) {
                                    $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                                });
                            }
                            EndLoader();
                        },
                        error: function (error) {
                            EndLoader();
                        }
                    });
                }

            });
            //updated by hridoy 07-apr-2022



            $("#ddlCustomerId").change(function () {
                var customerId = $("#ddlCustomerId").val();
                StartLoader();
                GetDemandList(customerId);

                $.ajax({
                type: "GET",
                url: "@Url.Action("CustomerRecevableAmountByCustomer", "Procurement")",
                datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", customerId: customerId},
                    success: function (data) {
                    var items = "";
                        if (data) {

                            SetAlert("Credit Limit of " + data.CommonCustomerName + " is " + data.CreditLimit + " and Recevable Amount is " + (data.PayableAmount - (data.ReturnAmount + data.InAmount)) + ' ' + isnull(data.CustomerAddress,''));
                            //$("#txtCreditLimit").text("Credit Limit of " + data.CommonCustomerName + " is " + data.CreditLimit + " and Recevable Amount is " + (data.PayableAmount - (data.ReturnAmount + data.InAmount)));
                            $("#hidCustomerTypeFk").val(data.CustomerTypeFk);
                            //$("#txtCustomerAddress").text(data.CustomerAddress);
                            $("#hidCreditLimit").val(data.CreditLimit);
                            $("#hidPayableAmount").val((data.PayableAmount - (data.ReturnAmount + data.InAmount)));
                            EndLoader();
                        }
                    },
                    error: function (error) {
                        console.error(error);
                        EndLoader();
                    }
                });
                EndLoader();
            })

            function GetDemandList(customerId) {
                StartLoader();
                $.ajax({
                type: "GET",
                url: "@Url.Action("GetDemandsByCustomer", "Procurement")",
                datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", customerId: customerId},
                    success: function (data) {
                        $("#ddlDemands").empty();
                        $("#ddlDemands").append("<option value=''>==Select Demand No==</option>");
                        $(data).each(function (index, item) {
                            $("#ddlDemands").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                        EndLoader();
                    },
                    error: function (errorresp) {
                        EndLoader();
                       // console.error(errorresp);
                    }
                });
            }
            $("#ddlDemands").change(function () {
                var demandId = $("#ddlDemands").val();
                StartLoader();
                if (demandId != '' && demandId != undefined) {
                    $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDemandDetailsPartial", "Procurement")",
                    datatype: "Json",
                    data: { demandId: demandId },
                     success: function (data) {
                         $("#demandTable").html(data);
                         EndLoader();
                        },
                        error: function (error) {
                            console.error(error);
                            EndLoader();
                        }
                });
                }

            });

            function SetAlert(message) {
                //hhhh
                $('#kgCustomAlert').removeClass('hide');
                $('#alertMessage').text(message);
            }

            //end hridoy 7-apr-2022
            $("#TermsAndConditionid").change(function () {
                var termsAndConditionid = $('#TermsAndConditionid').val();
                StartLoader();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetTermNCondition", "Procurement")",
                    datatype: "Json",
                    data: { id: termsAndConditionid },
                    success: function (data) {
                        $('#txtTermsAndCondition').empty();
                        $('#txtTermsAndCondition').append(data.description);
                        EndLoader();
                    },
                    error: function (error) {
                        console.error(error);
                        EndLoader();
                    }
                         });
                         });



            $("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var paymethod = $("#ddlSupplierPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }

            })


        });
            function makeEditble(rowId) {

                StartLoader();
            $.ajax({

                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {

                      $('#poCreateBtn').html("<i class='fa fa-edit'></i>&nbsp;Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductCategoryName +" "+ data.ProductSubCategoryName + " "+ data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);

                      $("#txtPurchaseQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                      EndLoader();
                },
                error: function (error) {
                    console.error(error);
                }
                 });
            }

        function makeSubmitble(rowId) {
                $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                        datatype: "Json",
                    data: { orderMasterId: rowId },
                        success: function (data) {
                            $('#submitOrDraftPOCIDText').text(data.OrderNo);

                            if (data.Status == 0) {
                                $('.submitOrDraftText').text("Make Submit");
                            }
                            else {
                                $('.submitOrDraftText').text("Make Draft");

                            }
                        }
                 });
                $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }



        function TotalAmountSumation() {
            var purchaseQuantity = $("#txtPurchaseQuantity").val();
            var unitPrice = $("#txtUnitPrice").val();

            $("#txtTotalAmount").val(Number(purchaseQuantity) * Number(unitPrice));

            var hidCreditLimitAmount = $("#hidCreditLimit").val();
            var hidPayableAmountAmount = $("#hidPayableAmount").val();

            var balanceAmount = Number(hidCreditLimitAmount) - Number(hidPayableAmountAmount);
            var txtTotalValue = $("#txtTotalAmount").val();
            if (txtTotalValue > balanceAmount) {
                $(":submit").attr("disabled", true);
                $("#spnCreditLimitExceed").text("Your Credit Limit is exceed.")
            }
            else {
                $(":submit").removeAttr("disabled");
                $("#spnCreditLimitExceed").text("")
            }



        }

        function TotalAmountWithDiscountSumation() {
            var purchaseQuantity = $("#txtPurchaseQuantity").val();

            var discountUnit = $("#ProductDiscountUnit").val();


            $("#txtProductDiscountTotal").val(Number(purchaseQuantity) * Number(discountUnit));

            var hidCreditLimitAmount = $("#hidCreditLimit").val();
            var hidPayableAmountAmount = $("#hidPayableAmount").val();

            var balanceAmount = Number(hidCreditLimitAmount) - Number(hidPayableAmountAmount);
            var txtTotalValue = $("#txtTotalAmount").val();
            if (txtTotalValue > balanceAmount) {
                $(":submit").attr("disabled", true);
                $("#spnCreditLimitExceed").text("Your Credit Limit is exceed.")
            }
            else {
                $(":submit").removeAttr("disabled");
                $("#spnCreditLimitExceed").text("")
            }
        }
        function ValidateBeforeSubmit(orderMaster) {
            @*

                    "ExpectedDeliveryDate": $("#txtDeliveryDate").val(),
                    "PaymentMethod": $("#ddlSupplierPaymentMethodEnumFK").val(),
                    "Status": 1,
                    "CourierNo": $("#txtCourierNo").val(),
                    "FinalDestination": $("#txtFinalDestination").val(),
                    "CourierCharge": $("#txtCourierCharge").val(),
                    "CurrentPayable": $("#hidPayableAmount").val(),
                    "StockInfoId": $("#ddlStockInfoId").val(),//ddlSubZoneFk
                    "FinalDestination": $("#txtFinalDestination").val(),
                    "IsActive": true,
                    "Remarks": $("#txtDescription").val()*@

            if (orderMaster.OrderDate == '' || orderMaster.OrderDate == NaN) {
                FocusByID("txtOrderDate", "Order date is required");
                return false;
            }
            else {
                clrValidation("txtOrderDate");

            }
            if (orderMaster.CustomerId <= 0 || orderMaster.CustomerId == NaN) {
                FocusByID("ddlCustomerId", "Customer Selection is required");
                return false;
            }
            else {
                clrValidation("ddlCustomerId");
            }
            if (orderMaster.PaymentMethod <= 0 || orderMaster.PaymentMethod == NaN) {
                FocusByID("ddlSupplierPaymentMethodEnumFK", "Payment Method Selection is required");
                return false;
            }
            else {
                clrValidation("ddlSupplierPaymentMethodEnumFK");
            }
            if (orderMaster.ExpectedDeliveryDate == '' || orderMaster.ExpectedDeliveryDate == NaN) {
                FocusByID("txtDeliveryDate", "Delivery Date is required");
                return false;
            }
            else {
                clrValidation("txtDeliveryDate");
            }
            if (orderMaster.FinalDestination == '' || orderMaster.FinalDestination == NaN) {
                FocusByID("txtFinalDestination", "FinalDestination Date is required");
                return false;
            }
            else {
                clrValidation("txtFinalDestination");
            }//
            if (orderMaster.StockInfoId == 0 || orderMaster.StockInfoId == '' || orderMaster.StockInfoId == NaN) {
                FocusByID("ddlStockInfoId", "Warehouse Selection is required");
                return false;
            }
            else {
                clrValidation("ddlStockInfoId");
            }
            return true;
        }

        function FocusByID(name, msg) {
            if (name == "txtOrderDate") {
                $('span[data-valmsg-for="OrderDate"]').text(msg);
            }
            else if (name == "ddlCustomerId") {
                $('span[data-valmsg-for="CustomerId"]').text(msg);
            }
            else if (name == "txtDeliveryDate") {
                $('span[data-valmsg-for="ExpectedDeliveryDate"]').text(msg);
            }

            else if (name == "ddlSupplierPaymentMethodEnumFK") {
                $('span[data-valmsg-for="CustomerPaymentMethodEnumFK"]').text(msg);
            }
            else if (name == "txtFinalDestination") {
                $('span[data-valmsg-for="FinalDestination"]').text(msg);
            }
            else if (name == "ddlStockInfoId") {
                $('span[data-valmsg-for="StockInfoId"]').text(msg);
            }
            document.getElementById(name).focus();
        }


        function clrValidation(name) {
            if (name == "txtOrderDate") {
                $('span[data-valmsg-for="OrderDate"]').text("");
            }
            else if (name == "ddlCustomerId") {
                $('span[data-valmsg-for="CustomerId"]').text("");
            }
            else if (name == "txtDeliveryDate") {
                $('span[data-valmsg-for="ExpectedDeliveryDate"]').text("");
            }

            else if (name == "ddlSupplierPaymentMethodEnumFK") {
                $('span[data-valmsg-for="CustomerPaymentMethodEnumFK"]').text("");
            }
            else if (name == "txtFinalDestination") {
                $('span[data-valmsg-for="FinalDestination"]').text("");
            }
            else if (name == "ddlStockInfoId") {
                $('span[data-valmsg-for="StockInfoId"]').text("");
            }

        }


        function PRFAddtoMaster() {
                let orderMaster = {
                    "OrderMasterId": 0,
                    "CompanyId": '@Html.Raw(Json.Encode(Model.CompanyFK))',
                    "ProductType": 'F',
                    "CustomerId": $("#ddlCustomerId").val(),
                    "OrderDate": $("#txtOrderDate").val(),
                    "ExpectedDeliveryDate": $("#txtDeliveryDate").val(),
                    "PaymentMethod": $("#ddlSupplierPaymentMethodEnumFK").val(),
                    "Status": 1,
                    "DemandId": $("#ddlDemands").val(),
                    "CourierNo": $("#txtCourierNo").val(),
                    "FinalDestination": $("#txtFinalDestination").val(),
                    "CourierCharge": $("#txtCourierCharge").val(),
                    "CurrentPayable": $("#hidPayableAmount").val(),
                    "StockInfoId": $("#ddlStockInfoId").val(),
                    "FinalDestination": $("#txtFinalDestination").val(),
                    "IsActive": true,
                    "TotalAmount": grandTotal,
                    "Remarks": $("#txtDescription").val()
            }
            if (ValidateBeforeSubmit(orderMaster)) {
                StartLoader();
                 $.ajax({
                        type: "POST",
                        url: "@Url.Action("GCCLProcurementSalesOrderSlaveByPRF", "Procurement")",
                        datatype: "Json",
                        data: { StrOrderMaster: JSON.stringify(orderMaster), ArrayOrderItems: JSON.stringify(demandItems) },
                            success: function (data) {
                    
                                EndLoader();
                                if (data.error) {
                                    alert('failed to Create');
                                }
                                else {
                                    if (data.companyId == 8) {
                                        window.location.href = '/Procurement/FeedProcurementSalesOrderSlave?companyId=' + data.companyId + '&orderMasterId=' + data.orderMasterId;
                                    }
                                    else {
                                        window.location.href = '/Procurement/GCCLProcurementSalesOrderSlave?companyId=' + data.companyId + '&orderMasterId=' + data.orderMasterId;
                                    }
                                   
                                }
                             },
                             error: function (error) {
                                 EndLoader();
                                 console.log(error);
                             }
                 });
            }
            //ValidateBeforeSubmit(orderMaster);

        };


    </script>
}