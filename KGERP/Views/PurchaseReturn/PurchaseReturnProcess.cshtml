@model KGERP.Service.ServiceModel.PurchaseReturnnewViewModel
@{
    ViewBag.Title = "Purchase Return";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var productType = Request.QueryString["productType"];
    var message = TempData["message"];
}
<style>
    span.error {
        display: block;
        visibility: hidden;
        color: red;
        font-size: 90%;
    }

    tr.error {
        background-color: rgba(255,0,0,0.35);
    }

    .remove {
        width: 40px;
        height: 25px;
        font-size: 16px;
        background-color: #dd4b39;
        color: white;
        border: none;
        border-radius: 15px;
    }

    .input-group {
        width: 100% !important;
    }

    .mb-2 {
        margin-bottom: 15px !important;
    }

    .input-group .form-control {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.PurchaseReturnId > 0)
        {
            <span>
                Purchase Return History of: <a target="_blank" href="~/Report/GetPurchaseReturnReport?purchaseReturnId=@Model.PurchaseReturnId">@Model.ReturnNo</a>

            </span>
        }
        else
        {
            <span>
                PurchaseReturn
            </span>
        }


    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Purchase Return</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="box">
            @using (Html.BeginForm("PurchaseReturnProcess", "PurchaseReturn", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(x => x.CompanyId)
                @Html.HiddenFor(x => x.PurchaseReturnId)
                @Html.HiddenFor(x => x.AccoutHeadId, new { @id = "hfSupplierAccoutHeadId" })
                @Html.HiddenFor(x => x.PurchaseReturnDetailId, new { @id = "hfPurchaseReturnDetailId" })

                <div class="box-danger">

                    <!-- /.box-header -->
                    <div class="box-body">
                        <h4> @Model.message</h4>

                        @if (Model.PurchaseReturnId == 0)
                        {

                            <div class="row">
                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label" })
                                        @Html.DropDownListFor(model => model.ProductType, new SelectList(Model.ProductTypes, "Value", "Text"), "---Select---", new { @id = "ddlProductType", @class = "dropdownsize form-control" })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.Label("Supplier", htmlAttributes: new { @class = "control-label" })
                                        <br />
                                        @Html.HiddenFor(model => model.SupplierId, new { @id = "hfSupplierId" })
                                        @Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @class = "form-control", @name = "SupplierName", @id = "txtSupplierName" } })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.SupplierName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        <label for="CompanyName" class="control-label">Supplier Name</label>
                                        <input type="text" class="form-control" id="SupplierName" readonly>
                                    </div>
                                </div>

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        <label for="Address" class="control-label">Supplier Address</label>
                                        <input type="text" class="form-control" id="Address" readonly>
                                    </div>
                                </div>
                            </div>

                            <div class="row">

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.ReturnNo, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.ReturnNo, new { htmlAttributes = new { @id = "txtReturnNo", @class = "form-control", @autocomplete = "off", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.ReturnNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label" })
                                        <br />
                                        <div style="display:flex">
                                            @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "datepicker form-control", @autocomplete = "off" } })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.Label("Warehouse", htmlAttributes: new { @class = "control-label" })
                                        @Html.DropDownListFor(model => model.StockInfoId, new SelectList(Model.Stocks, "Value", "Text"), "---Select---", new { @class = "dropdownsize form-control" })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-3 mb-2">
                                    <div class="input-group">
                                        @Html.Label("Return Person", htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.ReturnPersonName, new { htmlAttributes = new { @class = "form-control", @name = "returnPersonName", @id = "returnPersonName" } })
                                        @Html.HiddenFor(x => x.ReturnBy, new { @id = "returnBy", @name = "returnBy" })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.ReturnPersonName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-2">
                                    <div class="input-group">
                                        @Html.Label("Return Reason", htmlAttributes: new { @class = "control -label" })
                                        <br />
                                        @Html.EditorFor(model => model.ReturnReason, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.ReturnReason, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                                <div class="col-md-6 mb-2">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.ReferenceNo, htmlAttributes: new { @class = "control-label" })
                                        <br />
                                        @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {

                            <table class="table">
                                <tr>
                                    <th style="width:18%">
                                        Return No
                                    </th>
                                    <th style="width:2%">:</th>
                                    <td style="width:30%">
                                        <label class="col-form-label">@Model.ReturnNo</label>
                                    </td>
                                    <th style="width:18%"> PRF Date</th>
                                    <th style="width:2%">:</th>
                                    <td style="width:30%">@Model.ReturnDate.Value.ToString();</td>
                                </tr>
                                <tr>

                                    <th>Product Type</th>
                                    <th>:</th>
                                    <td>@Model.ProductType</td>
                                    <th>Created By</th>
                                    <th>:</th>
                                    <td>@Model.CreatedBy</td>

                                </tr>

                                <tr>
                                    <th style="width:18%">
                                        Supplier Name
                                    </th>
                                    <th style="width:2%">:</th>
                                    <td style="width:30%">
                                        <label class="col-form-label">@Model.SupplierName</label>


                                    </td>
                                    <th style="width:18%"> StockInfo Name </th>
                                    <th style="width:2%">:</th>
                                    <td style="width:30%">@Model.StockInfoName</td>
                                </tr>

                            </table>

                        }




                        <div class="box-body">


                            @if (Model.IsSubmited == false)
                            {
                                <table class="table table-responsive">
                                    <tr style="background-color:#3c8dbc;color:#ffffff">
                                        <th>Product</th>
                                        <th>Return Quantity</th>
                                        <th>Return Rate</th>
                                        <th>Return Amount</th>
                                        @if (Model.PurchaseReturnId > 0)
                                        {
                                            <th>&nbsp;</th>
                                        }
                                    </tr>
                                    <tr class="mycontainer" id="mainrow">
                                        <td style="width:275px">
                                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", @name = "ProductName", @id = "ProductName" } })
                                            @Html.HiddenFor(model => model.ProductId, new { @id = "hfProductId" })
                                            <br />
                                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                        </td>
                                        <td>
                                            @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { id = "Qty", @class = "form-control", @autocomplete = "off" } })
                                            <br />
                                            @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                        </td>

                                        <td>
                                            @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { id = "Rate", @class = "form-control", @autocomplete = "off" } })
                                            <br />
                                            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                        </td>

                                        <td>
                                            <input type="text" id="amount" class="qty form-control" autocomplete="off" style="text-align:right" readonly />
                                        </td>
                                        @if (Model.PurchaseReturnId > 0)
                                        {

                                            <td class="text-right">

                                                <button style="margin-right:5px" type="submit" id="poCreateBtn" class="btn btn-primary"><span id="changetextId">Add</span> </button>

                                                <span id="cancalId">
                                                    <a class="btn btn-danger" onclick="makecancal()">Cancel</a>
                                                </span>
                                            </td>
                                        }

                                    </tr>
                                </table>
                            }

                            <br />


                            @if (Model.PurchaseReturnId > 0)
                            {

                                <table id="KgErpDataTable" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Return Quantity</th>
                                            <th>Return Rate</th>
                                            <th>Total Amount</th>
                                            @if (Model.IsSubmited == false)
                                            {
                                                <th>&nbsp;</th>
                                            }
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.PurchaseReturnDetailItem)
                                        {

                                            <tr>
                                                <td>@item.CatagoryName - @item.SubCatagoryName - @item.ProductName </td>
                                                <td>
                                                    @item.Qty
                                                </td>
                                                <td>
                                                    @item.Rate
                                                </td>
                                                <td>
                                                    <b> @item.TotalRate  </b>
                                                </td>
                                                @if (Model.IsSubmited == false)
                                                {
                                                    <td>

                                                        <a onclick="makeEdit(@item.PurchaseReturnDetailId)" style="color:black" class="linkPointer" title="Edit" data-placement="top"> <i class="glyphicon glyphicon-pencil" aria-hidden="true"></i></a>
                                                        <a id="linkVoucherId_@item.PurchaseReturnDetailId" onclick="makeDeletale(@item.PurchaseReturnDetailId)" style="color:red" class="linkPointer" data-toggle="modal" data-target="#deleteVoucherModal" title="Delete" data-placement="top"> <i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>

                                                    </td>
                                                }
                                            </tr>
                                        }
                                       
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th></th>
                                            <th colspan="2" style="text-align:right ;padding-right:10px"> Total Amount :</th>
                                            <th> @Model.GrossAmount</th>
                                            @if (Model.IsSubmited == false)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                    </tfoot>

                                </table>

                            }
                        </div>
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-8">

                                </div>
                                <div class="col-lg-4 col-md-4">
                                    @if (Model.PurchaseReturnId == 0)
                                    {
                                        <button type="submit" id="poCreateBtn" class="btn btn-primary btn-block">
                                            <i class='fa fa-plus'></i>
                                            <span>Create New Return</span>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>


                    </div>
                    <div class="box-footer">
                        @if (Model.PurchaseReturnId > 0)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    @if (Model.IsSubmited)
                                    {
                                        <a target="_blank" style="width:100%" class="btn btn-info" href="~/Report/GetPurchaseReturnReport?purchaseReturnId=@Model.PurchaseReturnId">Return Challan</a>

                                    }


                                </div>
                                <div class="col-md-6">
                                    @if (!Model.IsSubmited)
                                    {
                                        <a style="width:100%" class="linkPointer btn btn-primary" data-toggle="modal" data-target="#purchaseReturnSubmitedModalId" onclick="makeSubmit(@Model.PurchaseReturnId)"> Submit</a>

                                    }
                                    else
                                    {
                                        <a style="width:100%" class="btn btn-default" data-toggle="modal"> Submitted Successfully</a>

                                    }

                                </div>

                            </div>

                        }
                    </div>
                </div>
            }
        </div>
    </div>
</section>



@using (Html.BeginForm("PurchaseReturnSubmited", "PurchaseReturn", FormMethod.Post))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="purchaseReturnSubmitedModalId" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Purchase Return Submited(@Model.ReturnNo)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.PurchaseReturnId)
                    @Html.HiddenFor(model => model.CompanyId)

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Submit this Item? Submit or Not</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@using (Html.BeginForm("DeleteItem", "PurchaseReturn", FormMethod.Post))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteVoucherModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.PurchaseReturnDetailId, new { id = "PurchaseReturnDetailId" })
                    @Html.HiddenFor(model => model.PurchaseReturnId)
                    @Html.HiddenFor(model => model.CompanyId)

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Item? Delete or Not</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">

         var message = '@message';
        if(message){
            alert(message);
        }

        function makeDeletale(PurchaseReturnDetailId) {
            $('#PurchaseReturnDetailId').val(PurchaseReturnDetailId);

        }
        function makeSubmit(row) {


        }


        function confirmSubmit() {
            var accountHeadId = $("#hfSupplierAccoutHeadId").val();
            if (accountHeadId == '') {
                alert("The supplier is not integrated with Accounts.\n Please set supplier A/C number first.");
                return false;
            }
            else {
                confirm("Are you sure you want to submit purchase return?")
            }
        }

    $(function () {
        var companyId = "@Model.CompanyId";

        $("#txtSupplierName").autocomplete({
                source: function (request, response) {
                    //console.log(request);
                    //console.log(response);

                    $.ajax({
                        url:"@Url.Action("GetAutoCompleteSupplierGet", "Procurement")",// '/AccountHeads/AutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { prefix: request.term, companyId: companyId },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                           response($.map(data, function (item) {
                               return item;
                           }))
                        },
                        error: function (response) {
                                                                        //alert(response.responseText);
                        },
                        failure: function (response) {
                                                                        //alert(response.responseText);
                        }
                    });
                },

                select: function (e, i) {
                    $("#hfSupplierId").val(i.item.val);

                    },
                minLength: 1,
            cache: true,
            change: function (event, ui) {
                loadSupplierInformation(ui.item.val);
            }

            }).focus(function () {
                $(this).autocomplete("search");
            });


        });

        function loadSupplierInformation(supplierId) {
            $.ajax({
                url: '/Vendor/GetSupplierInformation?supplierId=' + supplierId,
                type: "GET",
                async: true,
                processData: false,
                cache: false,
                success: function (data) {
                    var result = JSON.parse(data);
                    console.log(result);
                    $('#SupplierName').val(result.ContactName);
                    $('#Address').val(result.Address);
                    $('#hfSupplierAccoutHeadId').val(result.HeadGLId);
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        }

        $('#ddlProductType').change(function () {
            $.ajax({
                type: "post",
                url: "/PurchaseReturn/GetPurchaseReturnNoByProductType",
                data: { productType: $('#ddlProductType').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    $("#txtReturnNo").val(data);
                }
            });
        });

        $(function () {
            $("#ProductName").autocomplete({
                source: function (request, response) {

                    $.ajax({
                        url:"@Url.Action("AutoCompleteProductGet", "Configuration")",
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { companyId: "@Model.CompanyId", prefix: request.term, productType : "R" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });



                },
                select: function (e, i) {
                    $("#hfProductId").val(i.item.val);
                },
                minLength: 1
            }).focus(function () {
                $(this).autocomplete("search");
            });
        });

        $(function () {
            $("#returnPersonName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Employee/EmployeeAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "productType":"F"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#returnBy").val(i.item.val);
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });
        });



        var amount = 0;
        $("#Rate").keyup(function () {
            var unitPrice = $(this).val();
            var qty = $('#Qty').val();
            amount = parseFloat(qty * unitPrice);
            $('#amount').val(amount.toFixed(2));
        });

        $("#Qty").keyup(function () {
            var qty = $(this).val();
            if (isNaN(qty)) {
                alert("Plese select valid number");
                $('#Qty').val('');
            }
            var unitPrice = $('#Rate').val();
            $('#amount').val(parseFloat(qty * unitPrice).toFixed(2));
        });

    $("#Rate").change(function () {
        var unitPrice = $(this).val();
        var qty = $('#Qty').val();
        amount = parseFloat(qty * unitPrice);
        $('#amount').val(amount.toFixed(2));
    });

    $("#Qty").change(function () {
        var qty = $(this).val();
        if (isNaN(qty)) {
            alert("Plese select valid number");
            $('#Qty').val('');
        }
        var unitPrice = $('#Rate').val();
        $('#amount').val(parseFloat(qty * unitPrice).toFixed(2));
    });



        function makeEdit(row) {
            var data=@Html.Raw(Json.Encode(Model.PurchaseReturnDetailItem));
            var datalist = data.find(d => d.PurchaseReturnDetailId == row);
            console.log(datalist);

            $('#ProductName').val(datalist.CatagoryName+"-"+datalist.SubCatagoryName+"-"+ datalist.ProductName);
            $('#hfProductId').val(datalist.ProductId);
            $('#Qty').val(datalist.Qty);
            $('#hfPurchaseReturnDetailId').val(datalist.PurchaseReturnDetailId);
            $('#Rate').val(datalist.Rate).change();
            $('#changetextId').text("Update");
            $('#cancalId').show();
        }
        function makecancal() {
            $('#ProductName').val("");
            $('#hfProductId').val(0);
            $('#Qty').val("");
            $('#hfPurchaseReturnDetailId').val(0);
            $('#Rate').val("").change();
            $('#changetextId').text("Add");
            $('#cancalId').hide();
        }

        $('#cancalId').hide();

    </script>
}

